[
    {
        "id": "2e45288a104f3290",
        "type": "tab",
        "label": "Pacific JWD DATABASE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "56194313af156269",
        "type": "tab",
        "label": "Read From Touch",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3151ab83381d0f9c",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a18e7f39a1e44c08",
        "type": "tab",
        "label": "influxDB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "89b1a4cb613890e8",
        "type": "tab",
        "label": "JWD Notify",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "26b3157ed829ec77",
        "type": "tab",
        "label": "Pacific JWD API",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "c5a5c509ecaea59e",
        "type": "MSSQL-UCGv2-CN",
        "name": "Suwinthawong",
        "server": "127.0.0.1",
        "port": "1433",
        "encyption": false,
        "database": "Suwinthawong",
        "pool": "20",
        "connectionTimeout": "16000",
        "requestTimeout": "30000"
    },
    {
        "id": "cd05d9872760ae9d",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "datalog",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "e10a211d5412445b",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "a313a5c51c706b00",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://127.0.0.1:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "66dd948c209b9c21",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://127.0.0.1:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "a15101d814bae221",
        "type": "modbus-client",
        "name": "JWD Suwinthawong",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "172.16.46.23",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": false,
        "reconnectTimeout": "1000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "d3df8da0c7ef9cf6",
        "type": "MSSQL-UCGv2-CN",
        "name": "XwebEvo",
        "server": "127.0.0.1",
        "port": "1433",
        "encyption": false,
        "database": "XwebEvo",
        "pool": "20",
        "connectionTimeout": "16000",
        "requestTimeout": "40000"
    },
    {
        "id": "6344ddc14b2ec98c",
        "type": "MSSQL-UCGv2-CN",
        "name": "Usermanage",
        "server": "127.0.0.1",
        "port": "1433",
        "encyption": false,
        "database": "Usermanage",
        "pool": "20",
        "connectionTimeout": "16000",
        "requestTimeout": "10000"
    },
    {
        "id": "3ae68967e4149d33",
        "type": "MSSQL-CN",
        "name": "",
        "server": "127.0.0.1",
        "encyption": false,
        "database": "Usermanage"
    },
    {
        "id": "bf71358653f02133",
        "type": "MSSQL-UCGv2-CN",
        "name": "TEST_USER",
        "server": "127.0.0.1",
        "port": "1433",
        "encyption": false,
        "database": "TEST_USER",
        "pool": "20",
        "connectionTimeout": "16000",
        "requestTimeout": "15000"
    },
    {
        "id": "a5afa25e5459d2e2",
        "type": "MSSQL-CN",
        "name": "",
        "server": "127.0.0.1",
        "encyption": false,
        "database": "Usermanage"
    },
    {
        "id": "eee6093ea24b6bf2",
        "type": "MSSQL-CN",
        "name": "",
        "server": "127.0.0.1",
        "encyption": false,
        "database": "Suwinthawong"
    },
    {
        "id": "47e244d64b650bb7",
        "type": "MSSQL-CN",
        "name": "Suwinthawong",
        "server": "127.0.0.1",
        "encyption": false,
        "database": "Suwinthawong"
    },
    {
        "id": "b29a1fe3.36f72",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Setting",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nsetting = {\n    url : \"http://172.16.46.20/\"\n}\nflow.set(\"Setting\",setting);",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a82321555b3c84fe",
        "type": "inject",
        "z": "2e45288a104f3290",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/1 0-23 * * *",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 60,
        "wires": [
            [
                "4a1b6bc2c2a2d71d"
            ]
        ]
    },
    {
        "id": "4a1b6bc2c2a2d71d",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "DateTime",
        "func": "var d = new Date();\nvar date = ('00' + d.getDate()).slice(-2) + \"-\" + ('00' + (d.getMonth()+1)).slice(-2) +\"-\" + d.getFullYear() + \" \" + ('00' + d.getHours()).slice(-2) + \":\" + ('00' + d.getMinutes()).slice(-2);\n\nflow.set(\"DateTime\",date)\nflow.set(\"mili\",d.getTime())",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d3b23a9e0e2b2d0f",
        "type": "comment",
        "z": "2e45288a104f3290",
        "name": "DateTime",
        "info": "",
        "x": 360,
        "y": 20,
        "wires": []
    },
    {
        "id": "7610b11d04f04811",
        "type": "comment",
        "z": "2e45288a104f3290",
        "name": "StartUp Config",
        "info": "",
        "x": 120,
        "y": 20,
        "wires": []
    },
    {
        "id": "9ccfa5dddd8b771d",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "POST Device List",
        "func": "msg.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n}\nmsg.payload =  {\n    'duid': '0'\n}\nmsg.url = flow.get(\"Setting\").url\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 100,
        "wires": [
            [
                "c0eeb894e77489e3"
            ]
        ]
    },
    {
        "id": "c0eeb894e77489e3",
        "type": "http request",
        "z": "2e45288a104f3290",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{url}}}cgi-bin/getdevline.cgi",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 100,
        "wires": [
            [
                "6e4f1cae88b825bf"
            ]
        ]
    },
    {
        "id": "942b06fbc795b446",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Set Device_List",
        "func": "output = []\nfor(let i = 0; i < msg.payload.d.length;i++) {\n    output.push(msg.payload.d[i].addr)\n}\nflow.set(\"Device_List\",output)\nmsg.payload = output\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 100,
        "wires": [
            [
                "9bb2b473cd9ba97a"
            ]
        ]
    },
    {
        "id": "6e4f1cae88b825bf",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Convert JSON FORMAT",
        "func": "msg.payload = msg.payload.substr(1).slice(0, -1)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 100,
        "wires": [
            [
                "855fd6ca5cc004f1"
            ]
        ]
    },
    {
        "id": "855fd6ca5cc004f1",
        "type": "json",
        "z": "2e45288a104f3290",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 100,
        "wires": [
            [
                "942b06fbc795b446"
            ]
        ]
    },
    {
        "id": "0b4a4caf3e1b1631",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "URL",
        "func": "msg.url = flow.get('Setting').url;\n\nmsg.Device_List = flow.get('Device_List').join('|');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 100,
        "wires": [
            [
                "1f2f03b92851709b"
            ]
        ]
    },
    {
        "id": "1f2f03b92851709b",
        "type": "http request",
        "z": "2e45288a104f3290",
        "name": "XML",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{url}}}/cgi-bin/rt_format.cgi?DEVLST={{{Device_List}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1520,
        "y": 100,
        "wires": [
            [
                "d28f8c74a70560e2"
            ]
        ]
    },
    {
        "id": "82ee1e4b1fbda983",
        "type": "xml",
        "z": "2e45288a104f3290",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "9da12a240b96e504"
            ]
        ]
    },
    {
        "id": "fcce2ca19294c465",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "",
        "func": "flow.set(\"Xweb\",msg.payload);\nmsg.Type = Object.keys(msg.payload)[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 320,
        "wires": [
            [
                "c44dcfbe8901fafb"
            ]
        ]
    },
    {
        "id": "c44dcfbe8901fafb",
        "type": "switch",
        "z": "2e45288a104f3290",
        "name": "",
        "property": "Type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "xwebEVO",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "xweb500",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 320,
        "wires": [
            [
                "288e08f8135f85c0"
            ],
            []
        ]
    },
    {
        "id": "288e08f8135f85c0",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "",
        "func": "Type = Object.keys(msg.payload)[0];\nvar output = {};\n\nvar timestamp = new Date().getTime();\nmsg.dateTime = parseInt(timestamp / 1000)\n\nfor(let i in msg.payload[Type].device){\n    analog = [];\n    anal = {};\n    for(let ana in msg.payload[Type].device[i].analogInput){\n        analog.push({\n            name : msg.payload[Type].device[i].analogInput[ana].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].analogInput[ana].value.toString(),\n            unit : msg.payload[Type].device[i].analogInput[ana].unit.toString(),\n            index : msg.payload[Type].device[i].analogInput[ana].index.toString(),\n            \n        })\n        anal[msg.payload[Type].device[i].analogInput[ana].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].analogInput[ana].value.toString();\n    }\n    digital = [];\n    digit = {};\n    for(let di in msg.payload[Type].device[i].digitalInput){\n        digital.push({\n            name : msg.payload[Type].device[i].digitalInput[di].name.toString().replace(/\"/g,\"\").replace(/ /g,\"_\"),\n            value : msg.payload[Type].device[i].digitalInput[di].value.toString(),\n        })\n        digit[msg.payload[Type].device[i].digitalInput[di].name.toString().replace(/\"/g,\"\").replace(/ /g,\"_\")] = msg.payload[Type].device[i].digitalInput[di].value.toString();\n    }\n    deviceState = [];\n    deviceSta = {};\n    for(let ds in msg.payload[Type].device[i].deviceStatus){\n        deviceState.push({\n            name : msg.payload[Type].device[i].deviceStatus[ds].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].deviceStatus[ds].value.toString(),\n        })\n        deviceSta[msg.payload[Type].device[i].deviceStatus[ds].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].deviceStatus[ds].value.toString();\n    }\n    outState = [];\n    outputState = {};\n    for(let os in msg.payload[Type].device[i].outputStatus){\n        outState.push({\n            name : msg.payload[Type].device[i].outputStatus[os].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].outputStatus[os].value.toString(),\n        })\n        outputState[msg.payload[Type].device[i].outputStatus[os].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].outputStatus[os].value.toString();\n    }\n    alm = [];\n    alarms = {};\n    for(let al in msg.payload[Type].device[i].alarm){\n        alm.push({\n            name : msg.payload[Type].device[i].alarm[al].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].alarm[al].value.toString(),\n        })\n        alarms[msg.payload[Type].device[i].alarm[al].name.toString().replace(/\"/g,\"\").replace(/ /g,\"_\").replace(\"%20\",\"_\")] = msg.payload[Type].device[i].alarm[al].value.toString(); \n    }\n    output[i] = {\n        name : msg.payload[Type].device[i].$.name,\n        adr : msg.payload[Type].device[i].$.adr,\n        uid : msg.payload[Type].device[i].$.uid,\n        lanid : msg.payload[Type].device[i].$.lanid,\n        analogInput : anal,\n        digitalInput : digit,\n        deviceStatus : deviceSta,\n        outputStatus : outputState,\n        alarm : alarms,\n    }\n}\nglobal.set(\"Xweb\",output);\nmsg.payload = output\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 320,
        "wires": [
            [
                "a125ae9d26c32fe3"
            ]
        ]
    },
    {
        "id": "a125ae9d26c32fe3",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Set Flow Influx",
        "func": "let output = [];\nlet nextto = [];\nlet data = [];\nlet xjaData = [];\nvar add = [\n    \"192.168.50.155:502:51\",\n    \"192.168.50.155:502:52\",\n    \"192.168.50.155:502:53\",\n    \"192.168.50.155:502:54\",\n    \"192.168.50.155:502:55\",\n    \"192.168.50.155:502:56\",\n    \"192.168.50.155:502:57\",\n    \"192.168.50.155:502:58\",\n    \"192.168.50.155:502:59\",\n    \"192.168.50.155:502:60\",\n    \"192.168.50.155:502:61\",\n    \"192.168.50.155:502:62\",\n    \"192.168.50.155:502:63\",\n    \"192.168.50.155:502:64\",\n    \"192.168.50.155:502:65\",\n    \"192.168.50.155:502:66\",\n    \"192.168.50.155:502:67\",\n    \"192.168.50.155:502:68\",\n    \"192.168.50.155:502:69\",\n    156,157,\n];\nconst address = (adr) =>{\n    for(let i in add){\n        if(add[i] == adr){\n            return add[i];\n        }\n    }\n}\nfor(let i in msg.payload){\n    let objects = {};\n    let adr = address(msg.payload[i].adr);\n    for(let [k,v] of Object.entries(msg.payload[i].analogInput)){\n        objects[k] = parseFloat(v);\n        if(v == \"\"){\n            objects[k] = 32767;\n        }\n    }\n    for(let [k,v] of Object.entries(msg.payload[i].digitalInput)){\n        objects[k.replace(/ /g,\"_\")] = parseInt(v);\n    }\n    for(let [k,v] of Object.entries(msg.payload[i].deviceStatus)){\n        objects[k] = parseInt(v);\n    }\n    for(let [k,v] of Object.entries(msg.payload[i].outputStatus)){\n        objects[k] = parseInt(v);\n    }\n    for(let [k,v] of Object.entries(msg.payload[i].alarm)){\n        objects[k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = parseInt(v);\n    }\n        \n    if(!adr){\n        nextto.push({\n            name : msg.payload[i].name.replace(/ /g,\"_\"),\n            adr : msg.payload[i].adr,\n            objects,\n        });\n        if(Object.values(objects).length > 0){\n            data.push({\n                name : msg.payload[i].name.replace(/ /g,\"_\"),\n                adr : msg.payload[i].adr,\n                data : objects,\n                timestamp : msg.dateTime,\n            });\n            node.status({fill:\"green\",shape:\"dot\",text:\"success\"})\n            nextto.push({\n                name : msg.payload[i].name.replace(/ /g,\"_\"),\n                adr : msg.payload[i].adr,\n                objects,\n            });\n            output.push({\n                measurement: msg.payload[i].name.replace(/ /g,\"_\"),\n                fields: objects,\n                tags : {\n                    device : msg.payload[i].adr,\n                },\n                timestamp: msg.dateTime\n            });\n        }\n    }else{\n        for(let [k,v] of Object.entries(msg.payload[i].analogInput)){\n            objects[k] = parseFloat(v);\n            if(v == \"\"){\n                objects[k] = 32767;\n            }\n        }\n        for(let [k,v] of Object.entries(msg.payload[i].digitalInput)){\n            objects[k.replace(/ /g,\"_\")] = parseInt(v);\n        }\n        for(let [k,v] of Object.entries(msg.payload[i].deviceStatus)){\n            objects[k] = parseInt(v);\n        }\n        for(let [k,v] of Object.entries(msg.payload[i].outputStatus)){\n            objects[k] = parseInt(v);\n        }\n        for(let [k,v] of Object.entries(msg.payload[i].alarm)){\n            objects[k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = parseInt(v);\n        }\n        \n        if(Object.values(objects).length > 0){\n            xjaData.push({\n                name : msg.payload[i].name.replace(/ /g,\"_\"),\n                adr : msg.payload[i].adr,\n                data : objects,\n                timestamp : msg.dateTime,\n            });\n            node.status({fill:\"green\",shape:\"dot\",text:\"success\"});\n        }\n    }\n}\nif(data.length > 0){\n    flow.set(\"Data\",data);\n    global.set(\"Data\",data);\n    global.set(\"xjaData\",xjaData);\n    msg.data = nextto;\n    msg.payload = output;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 320,
        "wires": [
            [
                "85e638f51dced3ed",
                "a3f6b4666975b6f0"
            ]
        ]
    },
    {
        "id": "85e638f51dced3ed",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Filter to sql",
        "func": "output = [];\narr = [];\ndata = msg.data;\nvar d = new Date();\nvar timestamp = parseInt(d.getTime() / 1000)\nfor(let i of msg.data){\n    obj = [];\n    \n    for(let [k,v] of Object.entries(i.objects)){\n        obj.push({\n            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n            value : v\n        })\n    }\n    \n    output.push({\n        name : i.name,\n        adr : i.adr,\n        data : obj,\n        timestamp : timestamp,\n    })\n    arr.push({\n        name : i.name,\n        adr : i.adr,\n        data : obj,\n        timestamp : timestamp\n    })\n}\nmsg.payload = output\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 360,
        "wires": [
            [
                "c2a6ef21b7a22d7f"
            ]
        ]
    },
    {
        "id": "c2a6ef21b7a22d7f",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "",
        "func": "output = [];\noutput2 = [];\n\nfor(let i = 0; i < msg.payload.length; i++){\n    for(let a of msg.payload[i].data){\n        output.push({\n            name : msg.payload[i].name,\n            address : msg.payload[i].adr,\n            deviceName : msg.payload[i].name,\n            data : a.name.replace(/ /g,\"_\"),\n        });\n    }\n    output2.push({\n        deviceName : msg.payload[i].name,\n        address : msg.payload[i].adr,\n    });\n    if(Object.values(output2).length > 0 &&\n        Object.values(output).length > 0\n    ){\n        node.status({fill: 'green',shape: 'dot',text: 'Done'})\n    }\n    \n}\nmsg.data = output2;\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "c3c3599bf6e1bd1e",
                "facf051b78be9f19"
            ]
        ]
    },
    {
        "id": "facf051b78be9f19",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE TABLES",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF OBJECT_ID (N'[Suwinthawong].[dbo].[{{{deviceName}}}]', N'U') IS NULL\nBEGIN\n    CREATE TABLE [Suwinthawong].[dbo].[{{{deviceName}}}] (\n        [ID] [int] IDENTITY(1,1) NOT NULL,\n        [TimeStamp] VARCHAR(20) NULL,\n        PRIMARY KEY ([ID])\n    )\nEND\nIF NOT EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = '{{{data}}}')\nBEGIN\n\tALTER TABLE [dbo].[{{{deviceName}}}]\n\tADD [{{{data}}}] VARCHAR(100) NULL\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 290,
        "y": 400,
        "wires": [
            [
                "a0d08ce2d83d1cab"
            ]
        ]
    },
    {
        "id": "a0d08ce2d83d1cab",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 510,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "4eab9afd5ab9479c",
        "type": "inject",
        "z": "2e45288a104f3290",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 0-23 * * *",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "9ccfa5dddd8b771d"
            ]
        ]
    },
    {
        "id": "398901bfc1f6542f",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "ALTER COLUMN",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = 'LiquidSV')\nBEGIN\n\tEXEC sp_rename '[dbo].[{{{deviceName}}}].[LiquidSV]','Liquid_SV','COLUMN'\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 1170,
        "y": 180,
        "wires": [
            [
                "32f47f902b947e61"
            ]
        ]
    },
    {
        "id": "632f4c4d751e77cc",
        "type": "catch",
        "z": "2e45288a104f3290",
        "name": "",
        "scope": [
            "32f47f902b947e61"
        ],
        "uncaught": false,
        "x": 1570,
        "y": 60,
        "wires": [
            [
                "86252eb58d2cc7b5"
            ]
        ]
    },
    {
        "id": "ab554cf576043279",
        "type": "comment",
        "z": "2e45288a104f3290",
        "name": "เมื่อไม่มี index จะทำการเพิ่ม index โดยใช้ Column [TimeStamp]",
        "info": "เมื่อไม่มี index จะทำการเพิ่ม index โดยใช้ Column [TimeStamp]",
        "x": 1380,
        "y": 400,
        "wires": []
    },
    {
        "id": "86252eb58d2cc7b5",
        "type": "debug",
        "z": "2e45288a104f3290",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 60,
        "wires": []
    },
    {
        "id": "32f47f902b947e61",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 1370,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "69863b35755d19c8",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE INDEX",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n)\nBEGIN\n\tIF EXISTS(\n\t\tSELECT * FROM SYS.INDEXES\n\t\tWHERE object_id = (SELECT object_id FROM SYS.OBJECTS WHERE name = '{{{deviceName}}}')\n\t)\n\tBEGIN\n\t\tCREATE INDEX db_TimeStamp\n\t\tON [Suwinthawong].[dbo].[{{{deviceName}}}] ([TimeStamp])\n\tEND\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 1240,
        "y": 360,
        "wires": [
            [
                "32f47f902b947e61"
            ]
        ]
    },
    {
        "id": "a4156007d7c483fc",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<xwebEVO name=\"XWEB EVO\" on=\"1\">\n<device name=\"Energy meter Com.PR3\" adr=\"1\" uid=\"51\" lanid=\"RS1\">\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>1.000</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>1.000</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.07</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>1.000</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>230299.459</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>160</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>402.3</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>228.4</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>232.2</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>230.4</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>398.3</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>400.8</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter Main MDB\" adr=\"2\" uid=\"52\" lanid=\"RS1\">\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>401.6</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>157900.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>167500.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>165000.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>170200.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>59900.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>398.9</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>59500.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>169450.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>1083622.304</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>500</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>232.6</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>58.000</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>229.0</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>403.4</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>734.000</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>49750.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>750.500</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>752.500</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>174650.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>170393.6</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>230.8</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>0.936</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.05</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>0.943</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>0.958</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>486400.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>519850.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter Com.PR1\" adr=\"3\" uid=\"53\" lanid=\"RS1\">\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>402.0</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>81264.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>88704.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>-85800.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>89256.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>-42996.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>399.2</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>36732.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>72612.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>253559.965</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>120</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>232.7</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>837.960</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>229.4</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>403.6</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>389.880</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>36864.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>414.240</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>414.600</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>95796.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>91750.4</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>230.8</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>0.915</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.06</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>0.895</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>0.928</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>169944.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>-43908.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>281976.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter Main Com.PR2\" adr=\"4\" uid=\"54\" lanid=\"RS1\">\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>1.000</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>1.000</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.05</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>1.000</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>153474.848</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>120</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>403.7</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>229.6</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>232.9</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>231.2</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>400.0</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>402.4</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Fan Evap. Condenser\" adr=\"5\" uid=\"3\" lanid=\"RS1\">\n<analogInput>\n<name>\"Discharge. (bar)\"</name>\n<value>50.00</value>\n<unit>bar</unit>\n<index>3</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Low Pressure\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Pressure\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_1-1\" adr=\"6\" uid=\"10\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-16.5</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-17.1</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_1-2\" adr=\"7\" uid=\"11\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-17.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-17.0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_1-3\" adr=\"8\" uid=\"12\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-16.8</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-17.2</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_1-4\" adr=\"9\" uid=\"13\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-16.8</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-17.2</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_2-1\" adr=\"10\" uid=\"14\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-16.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>0.0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_2-2\" adr=\"11\" uid=\"15\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-16.9</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-15.3</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_2-3\" adr=\"12\" uid=\"16\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-16.5</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-16.5</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_3-1\" adr=\"13\" uid=\"17\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-16.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-16.8</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_3-2\" adr=\"14\" uid=\"18\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-16.6</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-17.2</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_3-3\" adr=\"15\" uid=\"19\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-17.2</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-16.8</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_3-4\" adr=\"16\" uid=\"20\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-17.4</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-16.8</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_4-1\" adr=\"17\" uid=\"21\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-15.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-14.8</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_4-2\" adr=\"18\" uid=\"22\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-15.1</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-15.2</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_7-1\" adr=\"19\" uid=\"23\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>29.8</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>30.5</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>29.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_6-1\" adr=\"20\" uid=\"24\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-15.1</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-15.7</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_6-2\" adr=\"21\" uid=\"25\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-13.5</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-15.3</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Chill Room\" adr=\"22\" uid=\"26\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>15.4</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>16.1</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_5-1\" adr=\"23\" uid=\"27\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>1</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_5-2\" adr=\"24\" uid=\"28\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>1</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Ante Room.1-1\" adr=\"25\" uid=\"29\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-4.8</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-6.2</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-5.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Ante Room.1-2\" adr=\"26\" uid=\"30\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>0.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>50.5</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-5.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Loading_1\" adr=\"27\" uid=\"31\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>11.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>10.1</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Loading_2\" adr=\"28\" uid=\"32\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>8.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>0.0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"NH3 Detector_1\" adr=\"29\" uid=\"33\" lanid=\"RS1\">\n<analogInput>\n<name>\"NH3\"</name>\n<value>0</value>\n<unit>ppm</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"High Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Pre Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"NH3 Detector_2\" adr=\"30\" uid=\"34\" lanid=\"RS1\">\n<analogInput>\n<name>\"NH3\"</name>\n<value>0</value>\n<unit>ppm</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"High Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Pre Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"NH3 Detector_3\" adr=\"31\" uid=\"35\" lanid=\"RS1\">\n<analogInput>\n<name>\"NH3\"</name>\n<value>0</value>\n<unit>ppm</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"High Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Pre Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"NH3 Detector_4\" adr=\"32\" uid=\"36\" lanid=\"RS1\">\n<analogInput>\n<name>\"NH3\"</name>\n<value>0</value>\n<unit>ppm</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"High Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Pre Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 1\" adr=\"33\" uid=\"37\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>3.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 2\" adr=\"34\" uid=\"67\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>7.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 3\" adr=\"35\" uid=\"68\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>10.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"LOADING AHU_1\" adr=\"36\" uid=\"69\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>11.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>8.7</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"LOADING AHU_2\" adr=\"37\" uid=\"70\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>13.2</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>16.2</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Packing_1_1\" adr=\"38\" uid=\"71\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>34.6</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>30.9</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>0.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 4\" adr=\"39\" uid=\"72\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-23.1</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 5\" adr=\"40\" uid=\"73\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>6.2</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 6\" adr=\"41\" uid=\"74\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-24.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"INTER\" adr=\"96\" uid=\"75\" lanid=\"RS1\">\n<analogInput>\n<name>\"Pb 1\"</name>\n<value>2.2</value>\n<unit>Bar</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"VESSEL 1\" adr=\"97\" uid=\"76\" lanid=\"RS1\">\n<analogInput>\n<name>\"Pb 1\"</name>\n<value>0.9</value>\n<unit>Bar</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"VESSEL 2\" adr=\"98\" uid=\"77\" lanid=\"RS1\">\n<analogInput>\n<name>\"Pb 1\"</name>\n<value>2.5</value>\n<unit>Bar</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_9-1\" adr=\"115\" uid=\"38\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-10.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-16.7</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_9-2\" adr=\"116\" uid=\"39\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-11.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-17.4</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_9-3\" adr=\"117\" uid=\"40\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-13.5</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-16.3</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_8\" adr=\"118\" uid=\"41\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>23.8</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>23.4</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_10\" adr=\"119\" uid=\"42\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>22.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>21.9</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-1\" adr=\"120\" uid=\"43\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>24.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>24.1</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-2\" adr=\"121\" uid=\"44\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>24.6</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>24.3</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-3\" adr=\"122\" uid=\"45\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>24.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>23.6</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-4\" adr=\"123\" uid=\"46\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>23.9</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>23.2</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-5\" adr=\"124\" uid=\"47\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>23.9</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>22.8</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Loading_3\" adr=\"125\" uid=\"48\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>21.1</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Loading_4\" adr=\"126\" uid=\"49\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>21.4</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Ante Room_3\" adr=\"127\" uid=\"50\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>10.6</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>9.9</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter Com.PR4\" adr=\"128\" uid=\"66\" lanid=\"RS1\">\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>125082.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>115680.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>1.000</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>0.999</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.04</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>0.996</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>9936.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>1315068.831</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>60</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>39321.6</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>42600.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>402.7</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>180.780</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>3162.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>183.540</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>177.960</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>228.7</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>16.440</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>232.1</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>230.4</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>4662.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>398.3</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>3102.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>41442.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>39480.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>37584.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>37932.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>400.7</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter MDB2\" adr=\"129\" uid=\"65\" lanid=\"RS1\">\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>400.3</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>53792.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>55152.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>54848.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>59544.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>20288.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>397.8</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>20240.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>59056.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>123802.686</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>80</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>231.3</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>17.120</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>228.2</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>400.9</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>261.040</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>18776.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>261.120</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>261.600</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>60456.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>58982.4</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>229.8</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>0.939</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.04</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>0.937</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>0.946</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>163640.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>180176.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Evap Condenser (SEC1410C)\" adr=\"156\" uid=\"97\" lanid=\"RS1\">\n<digitalInput>\n<name>\"Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 2 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Evap Condenser (SEC1410C) 2\" adr=\"157\" uid=\"98\" lanid=\"RS1\">\n<digitalInput>\n<name>\"Fan 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 4 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Water Pump Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Water Pump Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Comp Mycom 355 kW (Blast Freezer)\" adr=\"192.168.50.155:502:51\" uid=\"78\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Comp Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Comp Alarm\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Oil Pump Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Oil Pump Alarm\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Evap Condenser (ECS-2000)\" adr=\"192.168.50.155:502:52\" uid=\"79\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Fan 1\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Fan 2\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 4 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Fan 3\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Water Pump Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Fan 4\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Water Pump\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Vessel and Blast Freezer 4\" adr=\"192.168.50.155:502:53\" uid=\"80\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Diff Pressure\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"NH3 Pump1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"NH3 Pump1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"NH3 Pump2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"NH3 Pump2 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Hi-Cut\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 By Pass SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 4 and 5\" adr=\"192.168.50.155:502:54\" uid=\"81\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 4 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 4 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 5 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 4 and 5 (2)\" adr=\"192.168.50.155:502:55\" uid=\"82\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 5 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 6 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 6 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 ByPass SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 1 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 2 Run\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 5 and 6\" adr=\"192.168.50.155:502:56\" uid=\"83\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 3 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 4 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 5 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 5 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 6 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 6 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 6\" adr=\"192.168.50.155:502:57\" uid=\"84\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 6 By Pass SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 4 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 6 (2)\" adr=\"192.168.50.155:502:58\" uid=\"85\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 5 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 5 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 6 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 6 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Compressor 4 (Mycom) and Cold Storage 9\" adr=\"192.168.50.155:502:59\" uid=\"86\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Comp Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Oil Pump Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Comp Alarm\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-2 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Cold Storage 9-2 and Cold Storage 9-3\" adr=\"192.168.50.155:502:60\" uid=\"87\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 9-2 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-2 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-2 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-2 Suction Sv\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-2 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-3 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-3 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-3 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-3 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-3 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Cold Storage 11-1 and Cold Storage 11-2\" adr=\"192.168.50.155:502:61\" uid=\"88\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 11-1 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Cold Storage 11-2 Cold Storage 11-3 and Cold Storage 11-4\" adr=\"192.168.50.155:502:62\" uid=\"89\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 11-2 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Cold Storage 11-5 and Cold Storage 8\" adr=\"192.168.50.155:502:63\" uid=\"90\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 11-4 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Sunction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Cold Storage 8 and Cold Storage 10\" adr=\"192.168.50.155:502:64\" uid=\"91\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 8 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Hotgas SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Loading Area 3 4 and Ante Room 3\" adr=\"192.168.50.155:502:65\" uid=\"92\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Loading 3 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 3 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 3 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 4 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 3 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 4 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 4 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Ante Room 3 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Ante Room 3 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Ante Room 3 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Ante Room 3 and Overload\" adr=\"192.168.50.155:502:66\" uid=\"93\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Ante Room 3 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Oil Pump Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Ante Room 3 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Overload Cold Storage 11\" adr=\"192.168.50.155:502:67\" uid=\"94\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 9-3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Overload Cold Storage and Loading\" adr=\"192.168.50.155:502:68\" uid=\"95\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 11-5 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Overload Ante Room 3\" adr=\"192.168.50.155:502:69\" uid=\"96\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Ante Room 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Compressor No.1\" adr=\"192.168.50.83:502:101\" uid=\"55\" lanid=\"TCP\">\n<analogInput>\n<name>\"Discharge Temp\"</name>\n<value>79.8</value>\n<unit>°C</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Silding Valve\"</name>\n<value>100.0</value>\n<unit>%</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Suction Temp\"</name>\n<value>-24.5</value>\n<unit>°C</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Discharge Pressure\"</name>\n<value>13.69</value>\n<unit>bar</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Suction Pressure\"</name>\n<value>1.84</value>\n<unit>bar</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Precent of FLA\"</name>\n<value>80.1</value>\n<unit>%</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"Oil Pressure\"</name>\n<value>12.46</value>\n<unit>bar</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Diff Pressure\"</name>\n<value>0.93</value>\n<unit>bar</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Filter Pressure\"</name>\n<value>13.07</value>\n<unit>bar</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Discharge Superheat\"</name>\n<value>46.8</value>\n<unit>°C</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"Estimated KW\"</name>\n<value>275.8</value>\n<unit>kW</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Suction Superheat\"</name>\n<value>12.0</value>\n<unit>°C</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Motor Current\"</name>\n<value>429.5</value>\n<unit>A</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Oil Separator Temp\"</name>\n<value>74.7</value>\n<unit>°C</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"Oil Comp.Temp\"</name>\n<value>52.5</value>\n<unit>°C</unit>\n<index>10</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n</xwebEVO>",
        "output": "str",
        "x": 260,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "3d33a0b92c71076d",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Backup Function",
        "func": "output = [];\noutput2 = [];\n\nfor(let i = 0; i < msg.payload.length; i++){\n    for(let a of msg.payload[i].data){\n        output.push({\n            name : msg.payload[i].name,\n            address : msg.payload[i].adr.replace(/./g,\"_\"),\n            deviceName : msg.payload[i].name,\n            data : a.name.replace(/ /g,\"_\"),\n        });\n    }\n    output2.push({\n        deviceName : msg.payload[i].name,\n        address : msg.payload[i].adr,\n    });\n    if(Object.values(output2).length > 0 &&\n        Object.values(output).length > 0\n    ){\n        node.status({fill: 'green',shape: 'dot',text: 'Done'})\n    }\n}\nmsg.data = output2;\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "c3fd51f415b10a00",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "DROP COLUMN",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = 'Address'\n\t)\nBEGIN\n\tALTER TABLE [dbo].[{{{deviceName}}}]\n    DROP COLUMN Address;\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "32f47f902b947e61"
            ]
        ]
    },
    {
        "id": "c3c3599bf6e1bd1e",
        "type": "change",
        "z": "2e45288a104f3290",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 360,
        "wires": [
            [
                "69863b35755d19c8"
            ]
        ]
    },
    {
        "id": "d28f8c74a70560e2",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "",
        "func": "msg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\SuwinthawongDataXML.xml\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 160,
        "wires": [
            [
                "9ea78997c3b2699c"
            ]
        ]
    },
    {
        "id": "9ea78997c3b2699c",
        "type": "file",
        "z": "2e45288a104f3290",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 260,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7319193f2d721542",
        "type": "file in",
        "z": "2e45288a104f3290",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 260,
        "y": 320,
        "wires": [
            [
                "82ee1e4b1fbda983"
            ]
        ]
    },
    {
        "id": "6083f2aee414e046",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "",
        "func": "msg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\SuwinthawongDataXML.xml\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 360,
        "wires": [
            [
                "7319193f2d721542"
            ]
        ]
    },
    {
        "id": "9bb2b473cd9ba97a",
        "type": "delay",
        "z": "2e45288a104f3290",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1240,
        "y": 100,
        "wires": [
            [
                "0b4a4caf3e1b1631"
            ]
        ]
    },
    {
        "id": "52f97eb1f1302377",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE TABLES",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF OBJECT_ID (N'[Suwinthawong].[dbo].[{{{deviceName}}}]', N'U') IS NULL\nBEGIN\n    CREATE TABLE [Suwinthawong].[dbo].[{{{deviceName}}}] (\n        [ID] [int] IDENTITY(1,1) NOT NULL,\n        [TimeStamp] VARCHAR(20) NULL,\n        PRIMARY KEY ([ID])\n    )\nEND\nIF NOT EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = '{{{name}}}')\nBEGIN\n\tALTER TABLE [dbo].[{{{deviceName}}}]\n\tADD [{{{name}}}] VARCHAR(100) NULL\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 650,
        "y": 700,
        "wires": [
            [
                "7778f43facea19a7"
            ]
        ]
    },
    {
        "id": "7778f43facea19a7",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 870,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "0bb6bf5f8ae83fb7",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 870,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "88774126ebc50322",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "",
        "func": "var output = [];\nvar nextto = []\nfor(let [k,v] of Object.entries(msg.payload)){\n    for(let [a,b] of Object.entries(v)){\n        output.push({\n            deviceName : b.deviceName,\n            adr : b.adr,\n            data : {\n                [b.name] : b.value,\n            }\n        });\n        nextto.push({\n            deviceName : b.deviceName,\n            adr : b.adr,\n            name : b.name.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n            value : b.value,\n        });\n    }\n}\n// flow.set(\"dataInsert\",output);\nif(nextto.length > 0){\n    msg.payload = nextto;\n    node.status({fill: 'green', shape: 'dot',text:\"Amount :\" + nextto.length})\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 700,
        "wires": [
            [
                "52f97eb1f1302377",
                "ad62dfa95b144c99"
            ]
        ]
    },
    {
        "id": "e0eadb90801a5690",
        "type": "cronplus",
        "z": "2e45288a104f3290",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */10 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 300,
        "y": 940,
        "wires": [
            [
                "651303877abb6505"
            ]
        ]
    },
    {
        "id": "af57b56ea3cb4b0b",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 850,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "ad62dfa95b144c99",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE INDEX",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n)\nBEGIN\n\tIF EXISTS(\n\t\tSELECT * FROM SYS.INDEXES\n\t\tWHERE object_id = (SELECT object_id FROM SYS.OBJECTS WHERE name = '{{{deviceName}}}')\n\t)\n\tBEGIN\n\t\tCREATE INDEX db_TimeStamp\n\t\tON [Suwinthawong].[dbo].[{{{deviceName}}}] ([TimeStamp])\n\tEND\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 640,
        "y": 640,
        "wires": [
            [
                "af57b56ea3cb4b0b"
            ]
        ]
    },
    {
        "id": "714e43915c8f9bf6",
        "type": "catch",
        "z": "2e45288a104f3290",
        "name": "",
        "scope": [
            "af57b56ea3cb4b0b",
            "5cf3c54a3189a86c",
            "6aab946aeaf0a07b",
            "5b14eeb9ee9b0a74",
            "9122417229fdb682",
            "a0d08ce2d83d1cab",
            "7778f43facea19a7",
            "0bb6bf5f8ae83fb7",
            "bb4668ee58db74ba"
        ],
        "uncaught": false,
        "x": 830,
        "y": 840,
        "wires": [
            [
                "b744c559ec562d4b"
            ]
        ]
    },
    {
        "id": "b744c559ec562d4b",
        "type": "debug",
        "z": "2e45288a104f3290",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 840,
        "wires": []
    },
    {
        "id": "651303877abb6505",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Insert data",
        "func": "// data = JSON.parse(JSON.stringify(Object.assign(flow.get(\"dataXja\"),flow.get(\"touchScreen\"))));\n\n/*output = [];\nfor(var i = 0; i < data.length; i++){\n    if(i !== 'NaN'){\n        column = [];\n        value = [];\n        for(let [k,v] of Object.entries(data[i].data)){\n            // column.push(\"[\"+ k +\"]\");\n            column.push(k);\n            value.push(v);\n        }\n    }\n    // data[i].columns = column.join(\",\");\n    // data[i].data = value.join(\",\");\n    data[i].columns = column.join(\",\");\n    data[i].data = value.join(\",\");\n}*/\n/*if(!data){\n    node.status({fill:\"red\",shape:\"dot\",text:\"FAILED !!\"})\n}else{\n    node.status({fill:\"green\",shape:\"dot\",text:\"DONE\"})\n}*/\ndata = Object.assign(flow.get(\"dataXja\"),flow.get(\"touchScreen\"));\nvar output = [];\nfor(let [k,v] of Object.entries(data)){\n    for(let [a,b] of Object.entries(v.data)){\n        if(a.includes(\" \") || a.includes('-')){\n            let name = a.replace(/-/g,\"_\").replace(/ /g,\"_\")\n            output.push({\n                deviceName : v.deviceName,\n                name : name ,\n                value : b,\n            })\n        }\n    }\n}\nmsg.payload = output\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 940,
        "wires": [
            [
                "ca0bd988c99cf466",
                "cad4600a936e9871"
            ]
        ]
    },
    {
        "id": "4cae492f9b1e3bef",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Filter TouchScreen",
        "func": "var touch = global.get(\"TouchScreen\");\n\noutput = {};\noutput[\"Fan_Evap._Condenser_1\"] = {};\noutput[\"Fan_Evap._Condenser_2\"] = {};\noutput[\"Blast_Freezer_1\"] = {};\noutput[\"Blast_Freezer_2\"] = {};\noutput[\"Blast_Freezer_3\"] = {};\noutput[\"VESSEL_1\"] = {};\noutput[\"VESSEL_2\"] = {};\noutput[\"INTER\"] = {};\noutput[\"AirPurger\"] = {};\noutput[\"Compressor_No.1\"] = {};\noutput[\"Compressor_No.2\"] = {};\n\nfor(let [k,v] of Object.entries(touch.data)){\n    if(k.includes(\"Evap1\")){\n        output[\"Fan_Evap._Condenser_1\"][k] = {\n            deviceName : \"Fan_Evap._Condenser_1\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Evap2\")){\n        output[\"Fan_Evap._Condenser_2\"][k] = {\n            deviceName : \"Fan_Evap._Condenser_2\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Inter\")){\n        output[\"INTER\"][k] = {\n            deviceName : \"INTER\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Vessel1\")){\n        output[\"VESSEL_1\"][k] = {\n            deviceName : \"VESSEL_1\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Vessel2\")){\n        output[\"VESSEL_2\"][k] = {\n            deviceName : \"VESSEL_2\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Blast1\")){\n        let blastRun = k.includes(\"_Fan_\");\n        if(blastRun == false){\n            output[\"Blast_Freezer_1\"][k] = {\n                deviceName : \"Blast_Freezer_1\",\n                name : k,\n                value : v,\n            }\n        }\n    }else if(k.includes(\"Blast2\")){\n        let blastRun = k.includes(\"_Fan_\");\n        if(blastRun == false){\n            output[\"Blast_Freezer_2\"][k] = {\n                deviceName : \"Blast_Freezer_2\",\n                name : k,\n                value : v,\n            }\n        }\n    }else if(k.includes(\"Blast3\")){\n        let blastRun = k.includes(\"_Fan_\");\n        if(blastRun == false){\n            output[\"Blast_Freezer_3\"][k] = {\n                deviceName : \"Blast_Freezer_3\",\n                name : k,\n                value : v,\n            }\n        }\n    }else if(k.includes(\"AirPurger\")){\n        output[\"AirPurger\"][k] = {\n            deviceName : \"AirPurger\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Comp1\")){\n        output[\"Compressor_No.1\"][k] = {\n            deviceName : \"Compressor_No.1\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Comp2\")){\n        output[\"Compressor_No.2\"][k] = {\n            deviceName : \"Compressor_No.2\",\n            name : k,\n            value : v,\n        }\n    }\n}\nmsg.payload = output;\nmsg.test = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 800,
        "wires": [
            [
                "31d95f9005d54233",
                "27c535dcd5778ec8"
            ]
        ]
    },
    {
        "id": "31d95f9005d54233",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "",
        "func": "var output = [];\nvar test = {};\nfor(let [k,v] of Object.entries(msg.payload)){\n    for(let [a,b] of Object.entries(v)){\n        output.push({\n            deviceName : b.deviceName,\n            name : b.name.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n            value : b.value,\n        });\n    }\n}\nif(output.length > 0){\n    msg.payload = output;\n    node.status({fill:\"green\",shape:\"dot\",text: \"Amount : \" + output.length})\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 800,
        "wires": [
            [
                "3e3015beea05a922",
                "87be2ccf7da455e0"
            ]
        ]
    },
    {
        "id": "3e3015beea05a922",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE TABLES",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF OBJECT_ID (N'[Suwinthawong].[dbo].[{{{deviceName}}}]', N'U') IS NULL\nBEGIN\n    CREATE TABLE [Suwinthawong].[dbo].[{{{deviceName}}}] (\n        [ID] [int] IDENTITY(1,1) NOT NULL,\n        [TimeStamp] VARCHAR(20) NULL,\n        PRIMARY KEY ([ID])\n    )\nEND\nIF NOT EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = '{{{name}}}')\nBEGIN\n\tALTER TABLE [dbo].[{{{deviceName}}}]\n\tADD [{{{name}}}] VARCHAR(100) NULL\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 670,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "27c535dcd5778ec8",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "",
        "func": "// var fanEvap1 = {};\n// fanEvap1[\"data\"] = {};\n// var fanEvap2 = {};\n// fanEvap2[\"data\"] = {};\nvar blast1 = {};\nblast1[\"data\"] = {};\nvar blast2 = {};\nblast2[\"data\"] = {};\nvar blast3 = {};\nblast3[\"data\"] = {};\nvar vessel1 = {};\nvessel1[\"data\"] = {};\nvar vessel2 = {};\nvessel2[\"data\"] = {};\nvar inter = {};\ninter[\"data\"] = {};\nvar airpurger = {};\nairpurger[\"data\"] = {};\nvar compress1 = {};\ncompress1[\"data\"] = {};\nvar compress2 = {};\ncompress2[\"data\"] = {};\nvar datetime = flow.get(\"mili\") / 1000;\nvar timestamp = parseInt(datetime);\n\nfor(let i in msg.payload){\n    for(let [k,v] of Object.entries(msg.payload[i])){\n        if(v.deviceName == \"Blast_Freezer_1\"){\n            blast1[\"deviceName\"] = v.deviceName;\n            blast1[\"data\"][v.name] = v.value;\n            blast1[\"timestamp\"] = timestamp;\n        }else if(v.deviceName == \"Blast_Freezer_2\"){\n            blast2[\"deviceName\"] = v.deviceName;\n            blast2[\"data\"][v.name] = v.value;\n            blast2[\"timestamp\"] = timestamp;\n        }else if(v.deviceName == \"Blast_Freezer_3\"){\n            blast3[\"deviceName\"] = v.deviceName;\n            blast3[\"data\"][v.name] = v.value;\n            blast3[\"timestamp\"] = timestamp;\n        }else if(v.deviceName == \"VESSEL_1\"){\n            vessel1[\"deviceName\"] = v.deviceName;\n            vessel1[\"data\"][v.name] = v.value;\n            vessel1[\"timestamp\"] = timestamp;\n        }else if(v.deviceName == \"VESSEL_2\"){\n            vessel2[\"deviceName\"] = v.deviceName;\n            vessel2[\"data\"][v.name] = v.value;\n            vessel2[\"timestamp\"] = timestamp;\n        }else if(v.deviceName == \"INTER\"){\n            inter[\"deviceName\"] = v.deviceName;\n            inter[\"data\"][v.name] = v.value;\n            inter[\"timestamp\"] = timestamp;\n        }else if(v.deviceName == \"AirPurger\"){\n            airpurger[\"deviceName\"] = v.deviceName;\n            airpurger[\"data\"][v.name] = v.value;\n            airpurger[\"timestamp\"] = timestamp;\n        }else if(v.name.includes(\"Comp1\")){\n            compress1[\"deviceName\"] = \"Compressor_No.1\";\n            compress1[\"data\"][v.name] = v.value;\n            compress1[\"timestamp\"] = timestamp;\n        }else if(v.name.includes(\"Comp2\")){\n            compress2[\"deviceName\"] = \"Compressor_No.2\";\n            compress2[\"data\"][v.name] = v.value;\n            compress2[\"timestamp\"] = timestamp;\n        }\n    }\n}\nvar data = global.get(\"Data\");\n\nvar output = {};\n// output[\"fanEvap1\"] = {};\n// output[\"fanEvap2\"] = {};\noutput[\"blast1\"] = {};\noutput[\"blast2\"] = {};\noutput[\"blast3\"] = {};\noutput[\"vessel1\"] = {};\noutput[\"vessel2\"] = {};\noutput[\"inter\"] = {};\noutput[\"compress1\"] = {};\noutput[\"compress2\"] = {};\n// output[\"airpurger\"] = {};\n\nfor(let index in data){\n    if(data[index].name == blast1.deviceName){\n        let obj = {};\n        for(let [key,value] of Object.entries(data[index].data)){\n            let name = key.includes(\"Blast1_Fan_\");\n            if(name == false){\n                if(key !== \"Blast1_suction_SV\" && key !== \"Blast1_Liquid_SV\"){\n                    obj[key] = value;\n                }\n            }\n        }\n        if(Object.keys(data[index].data) !== blast1.data){\n            output[\"blast1\"][\"deviceName\"] = blast1.deviceName;\n            output[\"blast1\"][\"data\"] = Object.assign(obj,blast1.data);\n            output[\"blast1\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == blast2.deviceName){\n        let obj = {};\n        for(let [key,value] of Object.entries(data[index].data)){\n            let name = key.includes(\"Blast2_Fan_\");\n            if(name == false){\n                if(key !== \"Blast2_suction_SV\" && key !== \"Blast2_Liquid_SV\"){\n                    obj[key] = value;\n                }\n            }\n        }\n        if(Object.keys(data[index].data) !== blast2.data){\n            output[\"blast2\"][\"deviceName\"] = blast2.deviceName;\n            output[\"blast2\"][\"data\"] = Object.assign(obj,blast2.data);\n            output[\"blast2\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == blast3.deviceName){\n        let obj = {};\n        for(let [key,value] of Object.entries(data[index].data)){\n            let name = key.includes(\"Blast3_Fan_\");\n            if(name == false){\n                if(key !== \"Blast3_suction_SV\" && key !== \"Blast3_Liquid_SV\"){\n                    obj[key] = value;\n                }\n            }\n        }\n        if(Object.keys(data[index].data) !== blast3.data){\n            output[\"blast3\"][\"deviceName\"] = blast3.deviceName;\n            output[\"blast3\"][\"data\"] = Object.assign(obj,blast3.data);\n            output[\"blast3\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == vessel1.deviceName){\n        let obj = {};\n        for(let [key,value] of Object.entries(data[index].data)){\n            let name = key.includes(\"Vessel1_Pump_\");\n            if(name == false){\n                if(key !== \"Vessel1_Diff_Pressure\" && key !== \"Vessel1_Liquid_SV\"){\n                    obj[key] = value;\n                }\n            }\n        }\n        if(Object.keys(data[index].data) !== vessel1.data){\n            output[\"vessel1\"][\"deviceName\"] = vessel1.deviceName;\n            output[\"vessel1\"][\"data\"] = Object.assign(obj,vessel1.data);\n            output[\"vessel1\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == vessel2.deviceName){\n        let obj = {};\n        for(let [key,value] of Object.entries(data[index].data)){\n            let name = key.includes(\"Vessel2_Pump_\");\n            if(name == false){\n                if(key !== \"Vessel2_Diff_Pressure\" && key !== \"Vessel2_Liquid_SV\"){\n                    obj[key] = value;\n                }\n            }\n        }\n        if(Object.keys(data[index].data) !== vessel2.data){\n            output[\"vessel2\"][\"deviceName\"] = vessel2.deviceName;\n            output[\"vessel2\"][\"data\"] = Object.assign(obj,vessel2.data);\n            output[\"vessel2\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == inter.deviceName){\n        let obj = {};\n        for(let [key,value] of Object.entries(data[index].data)){\n            let name = key.includes(\"INTER_\");\n            if(name == false){\n                obj[key] = value;\n            }\n        }\n        if(Object.keys(data[index].data) !== inter.data){\n            output[\"inter\"][\"deviceName\"] = inter.deviceName;\n            output[\"inter\"][\"data\"] = Object.assign(obj,inter.data);\n            output[\"inter\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == compress1.deviceName){\n        if(Object.keys(data[index].data) !== compress1.data){\n            output[\"compress1\"][\"deviceName\"] = compress1.deviceName;\n            output[\"compress1\"][\"data\"] = Object.assign(data[index].data,compress1.data);\n            output[\"compress1\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == compress2.deviceName){\n        if(Object.keys(data[index].data) !== compress2.data){\n            output[\"compress2\"][\"deviceName\"] = compress2.deviceName;\n            output[\"compress2\"][\"data\"] = Object.assign(data[index].data,compress2.data);\n            output[\"compress2\"][\"timestamp\"] = timestamp;\n        }\n    }else{\n    \tif(data[index].name !== \"Blast_Freezer_1\" || data[index].name !== \"Blast_Freezer_2\" || \n    \t    data[index].name !== \"Blast_Freezer_3\"\n    \t){\n    \t    output[index] = {};\n            output[index][\"deviceName\"] = data[index].name;\n            output[index][\"data\"] = data[index].data;\n            output[index][\"timestamp\"] = timestamp;\n    \t}\n    }\n}\nif(Object.keys(output).length > 0){\n    flow.set(\"touchScreen\",Object.values(output));\n    global.set(\"touchScreen\",Object.values(output));\n    msg.payload = Object.values(output);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 760,
        "wires": [
            [
                "1f97dbea6ca5ef34"
            ]
        ]
    },
    {
        "id": "bb4668ee58db74ba",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 850,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "ca0bd988c99cf466",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE TABLES",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF OBJECT_ID (N'[Suwinthawong].[dbo].[{{{deviceName}}}]', N'U') IS NULL\nBEGIN\n    CREATE TABLE [Suwinthawong].[dbo].[{{{deviceName}}}] (\n        [ID] [int] IDENTITY(1,1) NOT NULL,\n        [TimeStamp] VARCHAR(20) NULL,\n        PRIMARY KEY ([ID])\n    )\nEND\nIF NOT EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = '{{{name}}}')\nBEGIN\n\tALTER TABLE [dbo].[{{{deviceName}}}]\n\tADD [{{{name}}}] VARCHAR(100) NULL\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 670,
        "y": 860,
        "wires": [
            [
                "bb4668ee58db74ba"
            ]
        ]
    },
    {
        "id": "cad4600a936e9871",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "DROP COLUMN",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = 'Cold_Storage_11_2_Fan_2_Run'\n\t)\nBEGIN\n\tALTER TABLE [dbo].[{{{deviceName}}}]\n    DROP COLUMN [Cold_Storage_11_2_Fan_2_Run];\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 670,
        "y": 1020,
        "wires": [
            [
                "bb4668ee58db74ba"
            ]
        ]
    },
    {
        "id": "9122417229fdb682",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 870,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "87be2ccf7da455e0",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE INDEX",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n)\nBEGIN\n\tIF EXISTS(\n\t\tSELECT * FROM SYS.INDEXES\n\t\tWHERE object_id = (SELECT object_id FROM SYS.OBJECTS WHERE name = '{{{deviceName}}}')\n\t)\n\tBEGIN\n\t\tCREATE INDEX db_TimeStamp\n\t\tON [Suwinthawong].[dbo].[{{{deviceName}}}] ([TimeStamp])\n\tEND\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 660,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d491f88210424232",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Filter Data",
        "func": "var data = global.get(\"xjaData\");\n\nconst finded = (name) =>{\n    for(let i in data){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k == name){\n                return {\n                    name : k,\n                    value : v,\n                };\n            }\n        }\n    }\n}\nvar xja = {};\nxja[\"Blast_Freezer_4\"] = {};\nxja[\"Blast_Freezer_5\"] = {};\nxja[\"Blast_Freezer_6\"] = {};\nxja[\"Cold_Storage_9-1\"] = {};\nxja[\"Cold_Storage_9-2\"] = {};\nxja[\"Cold_Storage_9-3\"] = {};\nxja[\"Cold_Storage_10\"] = {};\nxja[\"Cold_Storage_11-1\"] = {};\nxja[\"Cold_Storage_11-2\"] = {};\nxja[\"Cold_Storage_11-3\"] = {};\nxja[\"Cold_Storage_11-4\"] = {};\nxja[\"Cold_Storage_11-5\"] = {};\nxja[\"Cold_Storage_8\"] = {};\nxja[\"Compressor_No.3\"] = {};\nxja[\"Compressor_No.4\"] = {};\nxja[\"Loading_3\"] = {};\nxja[\"Loading_4\"] = {};\nxja[\"VESSEL_3\"] = {};\nxja[\"Fan_Evap._Condenser_3\"] = {};\nxja[\"Fan_Evap._Condenser_4\"] = {};\nxja[\"Ante_Room_3\"] = {};\n\nfor(let i = 0; i < data.length; i++){\n    if(data[i].adr == \"192.168.50.155:502:51\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k !== \"On\" && \n                k !== \"Alarm\" &&\n                k !== \"No-Link\"\n            ){\n                xja[\"Compressor_No.3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Compressor_No.3\",\n                    adr : data[i].adr,\n                    name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    value : v,\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:52\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            xja[\"Fan_Evap._Condenser_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                deviceName : \"Fan_Evap._Condenser_3\",\n                adr : data[i].adr,\n                name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                value : v,\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:53\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast4 = k.includes(\"Freezer_4\");\n                if(blast4 == false){\n                    if(k !== \"On\" && k !== \"No-Link\"){\n                        xja[\"VESSEL_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"VESSEL_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:54\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer_4\")){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:55\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let has = k.includes(\"Freezer_4\");\n                let blast5 = k.includes(\"Freezer_5\");\n                if(has == true){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    \tdeviceName : \"Blast_Freezer_4\",\n                    \tadr : data[i].adr,\n                    \tname : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    \tvalue : v\n                    }\n                }\n                if(blast5 == true){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:56\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer_6\");\n                if(k.includes(\"Freezer 5\")){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Freezer_6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:57\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer_6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:58\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer_6\");\n                if(blast6 == true){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:59\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold91 = k.includes(\"Storage_9-1\");\n                let Cold92 = k.includes(\"Storage_9-2\");\n                if(Cold91 == false && Cold92 == false){\n                    xja[\"Compressor_No.4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Compressor_No.4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else{\n                    if(Cold91 == true){\n                        xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-1\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }else if(Cold92 == true){\n                        xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-2\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:60\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold92 = k.includes(\"Storage_9-2\");\n                if(Cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_9-3\")){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:61\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:62\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-3\")){\n                    xja[\"Cold_Storage_11-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:63\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:64\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:65\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Loading_3\")){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_4\")){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Ante_Room_3\")){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:66\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold9 = k.includes(\"Storage_9\");\n                let cold91 = k.includes(\"Storage_9-1\");\n                let cold92 = k.includes(\"Storage_9-2\");\n                if(cold9 == false){\n                    if(k !== \"On\" && k !== \"No-Link\"){\n                        xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Ante_Room_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n                if(cold91 == true){\n                    xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:67\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold93 = k.includes(\"Storage_9-3\");\n                let cold11 = k.includes(\"Storage_11\");\n                if(cold93 == true){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n                if(k.includes(\"Storage_11-1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-3\")){\n                    xja[\"Cold_Storage_11-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:68\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_3\")){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_4\")){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:69\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let ante3 = k.includes(\"Ante_Room_3\");\n                if(ante3 == true){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"156\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let fan = k.includes(\"Fan\");\n                if(fan == true){\n                    xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Fan_Evap._Condenser_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }else if(data[i].adr == \"157\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Fan_Evap._Condenser_4\",\n                    adr : data[i].adr,\n                    name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    value : v,\n                }\n            }\n        }\n    }\n}\nmsg.payload = xja;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 700,
        "wires": [
            [
                "88774126ebc50322",
                "547fd7226eef9dfc"
            ]
        ]
    },
    {
        "id": "547fd7226eef9dfc",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Set Flow Insert",
        "func": "var output = {};\nvar blast4 = {};\nblast4[\"data\"] = {};\nvar blast5 = {};\nblast5[\"data\"] = {};\nvar blast6 = {};\nblast6[\"data\"] = {};\nvar cold91 = {};\ncold91[\"data\"] = {};\nvar cold92 = {};\ncold92[\"data\"] = {};\nvar cold93 = {};\ncold93[\"data\"] = {};\nvar cold8 = {};\ncold8[\"data\"] = {};\nvar cold10 = {};\ncold10[\"data\"] = {};\nvar cold11 = {};\ncold11[\"data\"] = {};\nvar cold12 = {};\ncold12[\"data\"] = {};\nvar cold13 = {};\ncold13[\"data\"] = {};\nvar cold14 = {};\ncold14[\"data\"] = {};\nvar cold15 = {};\ncold15[\"data\"] = {};\nvar ante3 = {};\nante3[\"data\"] = {};\nvar loading3 = {};\nloading3[\"data\"] = {};\nvar loading4 = {};\nloading4[\"data\"] = {};\nvar myCompressor = {};\nmyCompressor[\"data\"] = {};\nvar evap2000 = {};\nevap2000[\"data\"] = {};\nvar evapsec = {};\nevapsec[\"data\"] = {};\nvar myCom355 = {};\nmyCom355[\"data\"] = {};\nvar vessel = {};\nvessel[\"data\"] = {};\nvar datetime = new Date().getTime();\nvar timestamp = parseInt(datetime / 1000);\nfor(let i in msg.payload){\n    for(let [k,v] of Object.entries(msg.payload[i])){\n        if(v.deviceName == \"Blast_Freezer_4\"){\n            blast4[\"deviceName\"] = v.deviceName;\n            blast4[\"timestamp\"] = timestamp;\n            blast4[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Blast_Freezer_5\"){\n            blast5[\"deviceName\"] = v.deviceName;\n            blast5[\"timestamp\"] = timestamp;\n            blast5[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Blast_Freezer_6\"){\n            blast6[\"deviceName\"] = v.deviceName;\n            blast6[\"timestamp\"] = timestamp;\n            blast6[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_9-1\"){\n            cold91[\"deviceName\"] = v.deviceName;\n            cold91[\"timestamp\"] = timestamp;\n            cold91[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_9-2\"){\n            cold92[\"deviceName\"] = v.deviceName;\n            cold92[\"timestamp\"] = timestamp;\n            cold92[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_9-3\"){\n            cold93[\"deviceName\"] = v.deviceName;\n            cold93[\"timestamp\"] = timestamp;\n            cold93[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_8\"){\n            cold8[\"deviceName\"] = v.deviceName;\n            cold8[\"timestamp\"] = timestamp;\n            cold8[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_10\"){\n            cold10[\"deviceName\"] = v.deviceName;\n            cold10[\"timestamp\"] = timestamp;\n            cold10[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-1\"){\n            cold11[\"deviceName\"] = v.deviceName;\n            cold11[\"timestamp\"] = timestamp;\n            cold11[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-2\"){\n            cold12[\"deviceName\"] = v.deviceName;\n            cold12[\"timestamp\"] = timestamp;\n            cold12[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-3\"){\n            cold13[\"deviceName\"] = v.deviceName;\n            cold13[\"timestamp\"] = timestamp;\n            cold13[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-4\"){\n            cold14[\"deviceName\"] = v.deviceName;\n            cold14[\"timestamp\"] = timestamp;\n            cold14[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-5\"){\n            cold15[\"deviceName\"] = v.deviceName;\n            cold15[\"timestamp\"] = timestamp;\n            cold15[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Ante_Room_3\"){\n            ante3[\"deviceName\"] = v.deviceName;\n            ante3[\"timestamp\"] = timestamp;\n            ante3[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Loading_3\"){\n            loading3[\"deviceName\"] = v.deviceName;\n            loading3[\"timestamp\"] = timestamp;\n            loading3[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Loading_4\"){\n            loading4[\"deviceName\"] = v.deviceName;\n            loading4[\"timestamp\"] = timestamp;\n            loading4[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Compressor_No.4\"){\n            myCompressor[\"deviceName\"] = v.deviceName;\n            myCompressor[\"timestamp\"] = timestamp;\n            myCompressor[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Fan_Evap._Condenser_3\"){\n            evap2000[\"deviceName\"] = v.deviceName;\n            evap2000[\"timestamp\"] = timestamp;\n            evap2000[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Fan_Evap._Condenser_4\"){\n            evapsec[\"deviceName\"] = v.deviceName;\n            evapsec[\"timestamp\"] = timestamp;\n            evapsec[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Compressor_No.3\"){\n            myCom355[\"deviceName\"] = v.deviceName;\n            myCom355[\"timestamp\"] = timestamp;\n            myCom355[\"data\"][v.name] = v.value;\n        }else{\n            vessel[\"deviceName\"] = v.deviceName;\n            vessel[\"timestamp\"] = timestamp;\n            vessel[\"data\"][v.name] = v.value;\n        }\n    }\n}\n// output = [blast4,blast5,blast6,cold91,cold92,cold93,cold8,cold10,cold11,cold12,cold13,cold14,cold15,ante3,loading3,loading4,myCompressor,evap2000,evapsec,myCom355,vessel];\nglobal.set('Fan.Evap3',evap2000);\nglobal.set(\"Fan.Evap4\",evapsec);\nglobal.set(\"Comp.3\",myCom355);\nglobal.set(\"Comp.4\",myCompressor);\nglobal.set(\"vessel3\",vessel);\n\nvar data = global.get('Data');\n\noutput[\"blast4\"] = {};\noutput[\"blast5\"] = {};\noutput[\"blast6\"] = {};\noutput[\"cold9_1\"] = {};\noutput[\"cold9_2\"] = {};\noutput[\"cold9_3\"] = {};\noutput[\"cold8\"] = {};\noutput[\"cold10\"] = {};\noutput[\"cold11\"] = {};\noutput[\"cold12\"] = {};\noutput[\"cold13\"] = {};\noutput[\"cold14\"] = {};\noutput[\"cold15\"] = {};\noutput[\"ante3\"] = {};\noutput[\"loading3\"] = {};\noutput[\"loading4\"] = {};\noutput[\"comp4\"] = {};\noutput[\"comp3\"] = {};\n\n\nfor(let index in data){\n    if(data[index].name == blast4.deviceName){\n        if(Object.keys(data[index].data) !== blast4.data){\n            output[\"blast4\"][\"deviceName\"] = blast4.deviceName;\n            output[\"blast4\"][\"adr\"] = data[index].adr;\n            output[\"blast4\"][\"data\"] = Object.assign(data[index].data,blast4.data);\n            output[\"blast4\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == blast5.deviceName){\n        if(Object.keys(data[index].data) !== blast5.data){\n            output[\"blast5\"][\"deviceName\"] = blast5.deviceName;\n            output[\"blast5\"][\"data\"] = Object.assign(data[index].data,blast5.data);\n            output[\"blast5\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == blast6.deviceName){\n        if(Object.keys(data[index].data) !== blast6.data){\n            output[\"blast6\"][\"deviceName\"] = blast6.deviceName;\n            output[\"blast6\"][\"adr\"] = data[index].adr;\n            output[\"blast6\"][\"data\"] = Object.assign(data[index].data,blast6.data);\n            output[\"blast6\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold91.deviceName){\n        if(Object.keys(data[index].data) !== cold91.data){\n            output[\"cold9_1\"][\"deviceName\"] = cold91.deviceName;\n            output[\"cold9_1\"][\"adr\"] = data[index].adr;\n            output[\"cold9_1\"][\"data\"] = Object.assign(data[index].data,cold91.data);\n            output[\"cold9_1\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold92.deviceName){\n        if(Object.keys(data[index].data) !== cold92.data){\n            output[\"cold9_2\"][\"deviceName\"] = cold92.deviceName;\n            output[\"cold9_2\"][\"adr\"] = data[index].adr;\n            output[\"cold9_2\"][\"data\"] = Object.assign(data[index].data,cold92.data);\n            output[\"cold9_2\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold93.deviceName){\n        if(Object.keys(data[index].data) !== cold93.data){\n            output[\"cold9_3\"][\"deviceName\"] = cold93.deviceName;\n            output[\"cold9_3\"][\"adr\"] = data[index].adr;\n            output[\"cold9_3\"][\"data\"] = Object.assign(data[index].data,cold93.data);\n            output[\"cold9_3\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold8.deviceName){\n        if(Object.keys(data[index].data) !== cold8.data){\n            output[\"cold8\"][\"deviceName\"] = cold8.deviceName;\n            output[\"cold8\"][\"adr\"] = data[index].adr;\n            output[\"cold8\"][\"data\"] = Object.assign(data[index].data,cold8.data);\n            output[\"cold8\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold10.deviceName){\n        if(Object.keys(data[index].data) !== cold10.data){\n            output[\"cold10\"][\"deviceName\"] = cold10.deviceName;\n            output[\"cold10\"][\"adr\"] = data[index].adr;\n            output[\"cold10\"][\"data\"] = Object.assign(data[index].data,cold10.data);\n            output[\"cold10\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold11.deviceName){\n        if(Object.keys(data[index].data) !== cold11.data){\n            output[\"cold11\"][\"deviceName\"] = cold11.deviceName;\n            output[\"cold11\"][\"adr\"] = data[index].adr;\n            output[\"cold11\"][\"data\"] = Object.assign(data[index].data,cold11.data);\n            output[\"cold11\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold12.deviceName){\n        if(Object.keys(data[index].data) !== cold12.deviceName){\n            output[\"cold12\"][\"deviceName\"] = cold12.deviceName;\n            output[\"cold12\"][\"adr\"] = data[index].adr;\n            output[\"cold12\"][\"data\"] = Object.assign(data[index].data,cold12.data);\n            output[\"cold12\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold13.deviceName){\n        if(Object.keys(data[index].data) !== cold13.deviceName){\n            output[\"cold13\"][\"deviceName\"] = cold13.deviceName;\n            output[\"cold13\"][\"adr\"] = data[index].adr;\n            output[\"cold13\"][\"data\"] = Object.assign(data[index].data,cold13.data);\n            output[\"cold13\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold14.deviceName){\n        if(Object.keys(data[index].data) !== cold14.data){\n            output[\"cold14\"][\"deviceName\"] = cold14.deviceName;\n            output[\"cold14\"][\"adr\"] = data[index].adr;\n            output[\"cold14\"][\"data\"] = Object.assign(data[index].data,cold14.data);\n            output[\"cold14\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold15.deviceName){\n        if(Object.keys(data[index].data) !== cold15.data){\n            output[\"cold15\"][\"deviceName\"] = cold15.deviceName;\n            output[\"cold15\"][\"adr\"] = data[index].adr;\n            output[\"cold15\"][\"data\"] = Object.assign(data[index].data,cold15.data);\n            output[\"cold15\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == ante3.deviceName){\n        if(Object.keys(data[index].data) !== ante3.data){\n            output[\"ante3\"][\"deviceName\"] = ante3.deviceName;\n            output[\"ante3\"][\"adr\"] = data[index].adr;\n            output[\"ante3\"][\"data\"] = Object.assign(data[index].data,ante3.data);\n            output[\"ante3\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == loading3.deviceName){\n        if(Object.keys(data[index].data) !== loading3.data){\n            output[\"loading3\"][\"deviceName\"] = loading3.deviceName;\n            output[\"loading3\"][\"adr\"] = data[index].adr;\n            output[\"loading3\"][\"data\"] = Object.assign(data[index].data,loading3.data);\n            output[\"loading3\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == loading4.deviceName){\n        if(Object.keys(data[index].data) !== loading4.data){\n            output[\"loading4\"][\"deviceName\"] = loading4.deviceName;\n            output[\"loading4\"][\"adr\"] = data[index].adr;\n            output[\"loading4\"][\"data\"] = Object.assign(data[index].data,loading4.data);\n            output[\"loading4\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == myCompressor.deviceName){\n        if(Object.keys(data[index].data) !== myCompressor.data){\n            output[\"comp4\"][\"deviceName\"] = data[index].name;\n            output[\"comp4\"][\"adr\"] = data[index].adr;\n            output[\"comp4\"][\"data\"] = Object.assign(data[index].data,myCompressor.data);\n            output[\"comp4\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == myCom355.deviceName){\n        if(Object.keys(data[index].data) !== myCom355.data){\n            output[\"comp3\"][\"deviceName\"] = data[index].name;\n            output[\"comp3\"][\"adr\"] = data[index].adr;\n            output[\"comp3\"][\"data\"] = Object.assign(data[index].data,myCom355.data);\n            output[\"comp3\"][\"timestamp\"] = timestamp;\n        }\n    }else{\n        output[index] = {};\n        output[index][\"deviceName\"] = data[index].name;\n        output[index][\"adr\"] = data[index].adr;\n        output[index][\"data\"] = data[index].data;\n        output[index][\"timestamp\"] = timestamp;\n    }\n}\nflow.set(\"dataXja\",Object.values(output));\nglobal.set(\"dataXja\",Object.values(output));\nmsg.payload = Object.values(output);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "827e39a1c6477190"
            ]
        ]
    },
    {
        "id": "fa33656ea4a1f85d",
        "type": "cronplus",
        "z": "2e45288a104f3290",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 700,
        "wires": [
            [
                "d491f88210424232"
            ]
        ]
    },
    {
        "id": "8418d42ce9e24891",
        "type": "cronplus",
        "z": "2e45288a104f3290",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 800,
        "wires": [
            [
                "4cae492f9b1e3bef"
            ]
        ]
    },
    {
        "id": "1f97dbea6ca5ef34",
        "type": "debug",
        "z": "2e45288a104f3290",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 860,
        "wires": []
    },
    {
        "id": "14c8d5b5030d8494",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Insert data",
        "func": "let data = JSON.parse(JSON.stringify(Object.assign(global.get(\"dataXja\"),global.get(\"touchScreen\"))));\nlet output = {};\nfor(var i = 0; i < data.length; i++){\n    if(i !== 'NaN'){\n        column = [];\n        value = [];\n        for(let [k,v] of Object.entries(data[i].data)){\n            column.push(\"[\"+ k.replace(/ /g,\"_\").replace(/-/g,\"_\") +\"]\");\n            value.push(v);\n        }\n    }\n    data[i].columns = column.join(\",\");\n    data[i].value = value.join(\",\");\n    data[i].timestamp = parseInt(msg.payload.triggerTimestamp/1000);\n}\nif(!data){\n    node.status({fill:\"red\",shape:\"dot\",text:\"FAILED !!\"})\n}else{\n    node.status({fill:\"green\",shape:\"dot\",text:\"DONE\"})\n}\n\nmsg.payload = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1240,
        "wires": [
            [
                "3cc35cde0266a953"
            ]
        ]
    },
    {
        "id": "3cc35cde0266a953",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "Data log",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n    SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE TABLE_NAME = '{{{deviceName}}}'\n)\nBEGIN\n    INSERT INTO [Suwinthawong].[dbo].[{{{deviceName}}}]([TimeStamp],{{{columns}}}) VALUES({{{timestamp}}},{{{value}}})\nEND\n{{/payload}}",
        "output": "str",
        "x": 520,
        "y": 1240,
        "wires": [
            [
                "465cf1281dd2e8a2"
            ]
        ]
    },
    {
        "id": "465cf1281dd2e8a2",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 710,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "2207284ec207cd3e",
        "type": "cronplus",
        "z": "2e45288a104f3290",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 200,
        "y": 1260,
        "wires": [
            [
                "14c8d5b5030d8494"
            ]
        ]
    },
    {
        "id": "284f8f902ef139ee",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "AirPurger",
        "func": "// var data = JSON.parse(JSON.stringify(Object.assign(flow.get(\"dataXja\"),flow.get(\"touchScreen\"))));\nvar data = JSON.parse(JSON.stringify(global.get(\"TouchScreen\")));\nvar timestamp = parseInt(flow.get(\"mili\") / 1000);\nvar output = [];\nfor(let [k,v] of Object.entries(data)){\n    var obj = {};\n    if(k == \"data\"){\n        for(let [a,b] of Object.entries(v)){\n            if(a.includes(\"AirPurger\")){\n                obj[a.replace(/ /g,\"_\").replace(/-/g,\"_\")] = b;\n            }\n        }\n        output.push({\n            deviceName : \"AirPurger\",\n            data : obj\n        })\n    }\n}\nfor(let i in output){\n    let column = [];\n    let value = [];\n    if(i !== \"NaN\"){\n        for(let [k,v] of Object.entries(output[i].data)){\n            column.push(\"[\" + k + \"]\");\n            value.push(v);\n        }\n    }\n    output[i].columns = column.join(\",\");\n    output[i].value = value.join(\",\");\n    output[i].timestamp = parseInt(msg.payload.triggerTimestamp/1000);\n}\nif(Object.keys(output).length > 0){\n    node.status({fill:\"green\",shape:\"dot\",text: \"DONE\"})\n}else{\n    node.status({fill:\"red\",shape:\"dot\",text:\"FAILED!!\"})\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1320,
        "wires": [
            [
                "b0ab906de0a29089"
            ]
        ]
    },
    {
        "id": "b0ab906de0a29089",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "Data log",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n    SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE TABLE_NAME = '{{{deviceName}}}'\n)\nBEGIN\n    INSERT INTO [Suwinthawong].[dbo].[{{{deviceName}}}]([TimeStamp],{{{columns}}}) VALUES({{{timestamp}}},{{{value}}})\nEND\n{{/payload}}",
        "output": "str",
        "x": 520,
        "y": 1320,
        "wires": [
            [
                "d9ad7fc7470083be"
            ]
        ]
    },
    {
        "id": "d9ad7fc7470083be",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 710,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "53fb4a6ed3178043",
        "type": "cronplus",
        "z": "2e45288a104f3290",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 200,
        "y": 1340,
        "wires": [
            [
                "284f8f902ef139ee"
            ]
        ]
    },
    {
        "id": "0d1d391724094e38",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Vessel3",
        "func": "var data = JSON.parse(JSON.stringify(global.get(\"vessel3\")));\nvar timestamp = parseInt(flow.get(\"mili\") / 1000);\nvar output = [];\n\nfor(let [k,v] of Object.entries(data)){\n    var obj = {};\n    if(k == \"data\"){\n        for(let [a,b] of Object.entries(v)){\n            obj[a] = b;\n        }\n        output.push({\n            deviceName : data.deviceName,\n            data : obj,\n        })\n    }\n}\nfor(let i in output){\n    let column = [];\n    let value = [];\n    if(i !== \"NaN\"){\n        for(let [k,v] of Object.entries(output[i].data)){\n            column.push(k);\n            value.push(v);\n        }\n    }\n    output[i].columns = column.join(\",\");\n    output[i].value = value.join(\",\");\n    output[i].timestamp = parseInt(msg.payload.triggerTimestamp/1000);\n}\nif(Object.keys(output).length > 0){\n    node.status({fill:\"green\",shape:\"dot\",text:\"DONE\"})\n}else{\n    node.status({fill:\"red\",shape:\"dot\",text:\"FAILED!!\"})\n}\nmsg.payload = output\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1420,
        "wires": [
            [
                "ee695f575e71ecea"
            ]
        ]
    },
    {
        "id": "ee695f575e71ecea",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "Data log",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n    SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE TABLE_NAME = '{{{deviceName}}}'\n)\nBEGIN\n    INSERT INTO [Suwinthawong].[dbo].[{{{deviceName}}}]([TimeStamp],{{{columns}}}) VALUES({{{timestamp}}},{{{value}}})\nEND\n{{/payload}}",
        "output": "str",
        "x": 520,
        "y": 1420,
        "wires": [
            [
                "ade7777a417e58ce"
            ]
        ]
    },
    {
        "id": "ade7777a417e58ce",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 690,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "079b0495f653d163",
        "type": "cronplus",
        "z": "2e45288a104f3290",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */5 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 200,
        "y": 1440,
        "wires": [
            [
                "0d1d391724094e38"
            ]
        ]
    },
    {
        "id": "2bcc05e6fd5df477",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "FanEvap.3-4",
        "func": "var data = JSON.parse(JSON.stringify(global.get(\"Fan\")));\nvar timestamp = parseInt(flow.get(\"mili\") / 1000);\nvar output = [];\n\nfor(let [k,v] of Object.entries(data)){\n    var obj = {};\n    for(let [a,b] of Object.entries(v)){\n        if(a == \"data\"){\n            for(let [c,d] of Object.entries(b)){\n                obj[c] = d;\n            }\n        }\n    }\n    output.push({\n        deviceName : v.deviceName,\n        data : obj,\n    })\n}\nfor(let i in output){\n    let column = [];\n    let value = [];\n    if(i !== \"NaN\"){\n        for(let [k,v] of Object.entries(output[i].data)){\n            column.push(\"[\" + k + \"]\");\n            value.push(v);\n        }\n    }\n    output[i].columns = column.join(\",\");\n    output[i].values = value.join(\",\");\n    output[i].timestamp = parseInt(msg.payload.triggerTimestamp/1000);\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1600,
        "wires": [
            [
                "b6f0bbd752d3cde6",
                "fea174614cbf8ed9"
            ]
        ]
    },
    {
        "id": "b6f0bbd752d3cde6",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "Data log",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n    SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE TABLE_NAME = '{{{deviceName}}}'\n)\nBEGIN\n    INSERT INTO [Suwinthawong].[dbo].[{{{deviceName}}}]([TimeStamp],{{{columns}}}) VALUES({{{timestamp}}},{{{values}}})\nEND\n{{/payload}}",
        "output": "str",
        "x": 520,
        "y": 1600,
        "wires": [
            [
                "775cd6cbaef2f982"
            ]
        ]
    },
    {
        "id": "775cd6cbaef2f982",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 890,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "fea174614cbf8ed9",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Create Table",
        "func": "var data = JSON.parse(JSON.stringify(global.get(\"Fan\")));\nvar output = [];\n\nfor(let [k,v] of Object.entries(data)){\n    for(let [a,b] of Object.entries(v.data)){\n        output.push({\n            deviceName : v.deviceName,\n            name : a,\n            value : b,\n        })\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1680,
        "wires": [
            [
                "e7803dd0050ea6ba"
            ]
        ]
    },
    {
        "id": "e7803dd0050ea6ba",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE TABLES",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF OBJECT_ID (N'[Suwinthawong].[dbo].[{{{deviceName}}}]', N'U') IS NULL\nBEGIN\n    CREATE TABLE [Suwinthawong].[dbo].[{{{deviceName}}}] (\n        [ID] [int] IDENTITY(1,1) NOT NULL,\n        [TimeStamp] VARCHAR(20) NULL,\n        PRIMARY KEY ([ID])\n    )\nEND\nIF NOT EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = '{{{name}}}')\nBEGIN\n\tALTER TABLE [dbo].[{{{deviceName}}}]\n\tADD [{{{name}}}] VARCHAR(max) NULL\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 570,
        "y": 1680,
        "wires": [
            [
                "0f277bf1e20c919f"
            ]
        ]
    },
    {
        "id": "0f277bf1e20c919f",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 890,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "b9eb681d7157d987",
        "type": "cronplus",
        "z": "2e45288a104f3290",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 1600,
        "wires": [
            [
                "2bcc05e6fd5df477"
            ]
        ]
    },
    {
        "id": "6429c6909214e91a",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Compressor 3-4",
        "func": "var data = JSON.parse(JSON.stringify(global.get(\"Comp\")));\nvar timestamp = parseInt(flow.get(\"mili\") / 1000);\nvar output = [];\n\nfor(let [k,v] of Object.entries(data)){\n    var obj = {};\n    for(let [a,b] of Object.entries(v)){\n        if(a == \"data\"){\n            for(let [c,d] of Object.entries(b)){\n                obj[c] = d;\n            }\n        }\n    }\n    output.push({\n        deviceName : v.deviceName,\n        data : obj,\n    })\n}\nfor(let i in output){\n    let column = [];\n    let value = [];\n    if(i !== \"NaN\"){\n        for(let [k,v] of Object.entries(output[i].data)){\n            column.push(\"[\" + k + \"]\");\n            value.push(v);\n        }\n    }\n    output[i].columns = column.join(\",\");\n    output[i].values = value.join(\",\");\n    output[i].timestamp = parseInt(msg.payload.triggerTimestamp/1000);\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1780,
        "wires": [
            [
                "2278d541c8a0eda9",
                "592bd4adcf90d11f"
            ]
        ]
    },
    {
        "id": "2278d541c8a0eda9",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "Data log",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n    SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE TABLE_NAME = '{{{deviceName}}}'\n)\nBEGIN\n    INSERT INTO [Suwinthawong].[dbo].[{{{deviceName}}}]([TimeStamp],{{{columns}}}) VALUES({{{timestamp}}},{{{values}}})\nEND\n{{/payload}}",
        "output": "str",
        "x": 520,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "49b04a116ceb713a",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 890,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "592bd4adcf90d11f",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Create Table",
        "func": "var data = JSON.parse(JSON.stringify(global.get(\"Fan\")));\nvar output = [];\n\nfor(let [k,v] of Object.entries(data)){\n    for(let [a,b] of Object.entries(v.data)){\n        output.push({\n            deviceName : v.deviceName,\n            name : a,\n            value : b,\n        })\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1860,
        "wires": [
            [
                "f1a79df74cbbd2fc"
            ]
        ]
    },
    {
        "id": "f1a79df74cbbd2fc",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE TABLES",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF OBJECT_ID (N'[Suwinthawong].[dbo].[{{{deviceName}}}]', N'U') IS NULL\nBEGIN\n    CREATE TABLE [Suwinthawong].[dbo].[{{{deviceName}}}] (\n        [ID] [int] IDENTITY(1,1) NOT NULL,\n        [TimeStamp] VARCHAR(20) NULL,\n        PRIMARY KEY ([ID])\n    )\nEND\nIF NOT EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = '{{{name}}}')\nBEGIN\n\tALTER TABLE [dbo].[{{{deviceName}}}]\n\tADD [{{{name}}}] VARCHAR(max) NULL\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 570,
        "y": 1860,
        "wires": [
            [
                "484e137b7222fa74"
            ]
        ]
    },
    {
        "id": "484e137b7222fa74",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 890,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "cc3899bb2cb5c255",
        "type": "cronplus",
        "z": "2e45288a104f3290",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 1780,
        "wires": [
            [
                "6429c6909214e91a"
            ]
        ]
    },
    {
        "id": "ad27f2c133a25d29",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "FanEvap.1-2",
        "func": "var data = JSON.parse(JSON.stringify(global.get(\"TouchScreen\")));\nvar output = [];\nvar fan1 = {};\nfan1[\"data\"] = {};\nvar fan2 = {};\nfan2[\"data\"] = {};\nfor(let [k,v] of Object.entries(data)){\n    if(k == \"data\"){\n        for(let [a,b] of Object.entries(v)){\n            if(a.includes(\"Evap1\")){\n                fan1[\"deviceName\"] = \"Fan_Evap._Condenser_1\";\n                fan1[\"data\"][a] = b;\n                fan1[\"timestamp\"] = parseInt(msg.payload.triggerTimestamp/1000);\n            }else if(a.includes(\"Evap2\")){\n                fan2[\"deviceName\"] = \"Fan_Evap._Condenser_2\";\n                fan2[\"data\"][a] = b;\n                fan2[\"timestamp\"] = parseInt(msg.payload.triggerTimestamp/1000);\n            }\n        }\n    }\n}\noutput.push(fan1,fan2);\nglobal.set(\"data.6\",output);\nglobal.set(\"fanEvap\",output);\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1940,
        "wires": [
            [
                "5f23bd8f4ddeba48",
                "72bbeceb7ac0f537"
            ]
        ]
    },
    {
        "id": "5f23bd8f4ddeba48",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Create Table",
        "func": "var output = [];\n\nfor(let [k,v] of Object.entries(msg.payload)){\n    for(let [a,b] of Object.entries(v.data)){\n        output.push({\n            deviceName : v.deviceName,\n            name : a,\n            value : b,\n        })\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2020,
        "wires": [
            [
                "baa52ac18225dc5c"
            ]
        ]
    },
    {
        "id": "baa52ac18225dc5c",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "CREATE TABLES",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF OBJECT_ID (N'[Suwinthawong].[dbo].[{{{deviceName}}}]', N'U') IS NULL\nBEGIN\n    CREATE TABLE [Suwinthawong].[dbo].[{{{deviceName}}}] (\n        [ID] [int] IDENTITY(1,1) NOT NULL,\n        [TimeStamp] VARCHAR(20) NULL,\n        PRIMARY KEY ([ID])\n    )\nEND\nIF NOT EXISTS(\n\tSELECT TOP 1 1\n\tFROM INFORMATION_SCHEMA.COLUMNS\n\tWHERE \n\t[TABLE_NAME] = '{{{deviceName}}}'\n\tAND [COLUMN_NAME] = '{{{name}}}')\nBEGIN\n\tALTER TABLE [dbo].[{{{deviceName}}}]\n\tADD [{{{name}}}] VARCHAR(max) NULL\nEND\n{{/payload}}\n",
        "output": "str",
        "x": 590,
        "y": 2020,
        "wires": [
            [
                "65af13eea4f5fbd4"
            ]
        ]
    },
    {
        "id": "65af13eea4f5fbd4",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 910,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "72bbeceb7ac0f537",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "Insert FanEvap. 1-2",
        "func": "var output = [];\nfor(let i = 0; i < msg.payload.length; i++){\n    let column = [];\n    let value = [];\n    if(i !== \"NaN\"){\n        for(let [k,v] of Object.entries(msg.payload[i].data)){\n            column.push(\"[\" + k + \"]\");\n            value.push(v);\n        }\n    }\n    output[i] = {};\n    output[i].deviceName = msg.payload[i].deviceName;\n    output[i].columns = column.join(\",\");\n    output[i].values = value.join(\",\");\n    output[i].timestamp = msg.payload[i].timestamp;\n}\nif(Object.keys(output).length > 0){\n    node.status({fill:\"green\",shape:\"dot\",text:\"DONE\"});\n}else{\n    node.status({fill:\"red\",shape:\"dot\",text:\"FAILED!!\"})\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1940,
        "wires": [
            [
                "66d65e929f5974aa"
            ]
        ]
    },
    {
        "id": "66d65e929f5974aa",
        "type": "template",
        "z": "2e45288a104f3290",
        "name": "Data log",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\nIF EXISTS(\n    SELECT TOP 1 1 FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE TABLE_NAME = '{{{deviceName}}}'\n)\nBEGIN\n    INSERT INTO [Suwinthawong].[dbo].[{{{deviceName}}}]([TimeStamp],{{{columns}}}) VALUES({{{timestamp}}},{{{values}}})\nEND\n{{/payload}}",
        "output": "str",
        "x": 720,
        "y": 1940,
        "wires": [
            [
                "1c530c5e47f3a2d8"
            ]
        ]
    },
    {
        "id": "1c530c5e47f3a2d8",
        "type": "MSSQL-UCGv2",
        "z": "2e45288a104f3290",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 910,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "09f347de1dbe2278",
        "type": "cronplus",
        "z": "2e45288a104f3290",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 180,
        "y": 1940,
        "wires": [
            [
                "ad27f2c133a25d29"
            ]
        ]
    },
    {
        "id": "848132c6eed8d805",
        "type": "function",
        "z": "2e45288a104f3290",
        "name": "set flow FanEvap.1-2",
        "func": "var data = JSON.parse(JSON.stringify(global.get(\"Screens\")));\nvar timestamp = parseInt(flow.get(\"mili\") / 1000);\nvar output = [];\nvar fan1 = {};\nfan1[\"data\"] = {};\nvar fan2 = {};\nfan2[\"data\"] = {};\nfor(let [k,v] of Object.entries(data)){\n    if(k == \"data\"){\n        for(let [a,b] of Object.entries(v)){\n            if(a.includes(\"Evap1\")){\n                fan1[\"deviceName\"] = \"Fan_Evap._Condenser_1\";\n                fan1[\"data\"][a] = b;\n                fan1[\"timestamp\"] = timestamp;\n            }else if(a.includes(\"Evap2\")){\n                fan2[\"deviceName\"] = \"Fan_Evap._Condenser_2\";\n                fan2[\"data\"][a] = b;\n                fan2[\"timestamp\"] = timestamp;\n            }\n        }\n    }\n}\nglobal.set('fanEvap',output);\noutput.push(fan1,fan2);\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "15620250782b07a2",
        "type": "catch",
        "z": "2e45288a104f3290",
        "name": "",
        "scope": [
            "465cf1281dd2e8a2"
        ],
        "uncaught": false,
        "x": 130,
        "y": 1180,
        "wires": [
            [
                "2207284ec207cd3e",
                "e1b1fae07f366c02"
            ]
        ]
    },
    {
        "id": "e1b1fae07f366c02",
        "type": "debug",
        "z": "2e45288a104f3290",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "0a9ea9368b90799f",
        "type": "comment",
        "z": "2e45288a104f3290",
        "name": "INSERT DATA",
        "info": "",
        "x": 530,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8ad314a87a1d4a7f",
        "type": "debug",
        "z": "2e45288a104f3290",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 240,
        "wires": []
    },
    {
        "id": "a3f6b4666975b6f0",
        "type": "debug",
        "z": "2e45288a104f3290",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 320,
        "wires": []
    },
    {
        "id": "98d6f03b5aaded5f",
        "type": "inject",
        "z": "2e45288a104f3290",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "6083f2aee414e046"
            ]
        ]
    },
    {
        "id": "9da12a240b96e504",
        "type": "switch",
        "z": "2e45288a104f3290",
        "name": "Check On/Off",
        "property": "payload.xwebEVO.$.on",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 540,
        "y": 320,
        "wires": [
            [
                "fcce2ca19294c465",
                "8ad314a87a1d4a7f"
            ]
        ]
    },
    {
        "id": "827e39a1c6477190",
        "type": "debug",
        "z": "2e45288a104f3290",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 560,
        "wires": []
    },
    {
        "id": "194bfb799ca274d8",
        "type": "modbus-flex-getter",
        "z": "56194313af156269",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "logIOActivities": false,
        "server": "a15101d814bae221",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "f1f586a5fae31d8c",
                "0a9485616dcffe55"
            ],
            []
        ]
    },
    {
        "id": "8d588592b431b247",
        "type": "function",
        "z": "56194313af156269",
        "name": "read touch",
        "func": "msg.payload = { \n    'fc': 1, \n    'unitid': 1, \n    'address': 1 , \n    'quantity': 90,\n} \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 120,
        "wires": [
            [
                "194bfb799ca274d8"
            ]
        ]
    },
    {
        "id": "7ba2442dfe8a8963",
        "type": "inject",
        "z": "56194313af156269",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "99a52b1986c4f4e7"
            ]
        ]
    },
    {
        "id": "99a52b1986c4f4e7",
        "type": "function",
        "z": "56194313af156269",
        "name": "setTime",
        "func": "var timestamp = new Date().getTime();\nvar datetime = parseInt(timestamp / 1000);\nflow.set(\"timestamp\",datetime);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ea740a56b2ed7fe1",
        "type": "debug",
        "z": "56194313af156269",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 120,
        "wires": []
    },
    {
        "id": "f1f586a5fae31d8c",
        "type": "modbus-response",
        "z": "56194313af156269",
        "name": "",
        "registerShowMax": "90",
        "x": 690,
        "y": 60,
        "wires": []
    },
    {
        "id": "af9cbcddf3f707db",
        "type": "inject",
        "z": "56194313af156269",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0.1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "8d588592b431b247"
            ]
        ]
    },
    {
        "id": "ca151b2f1ccfea8a",
        "type": "catch",
        "z": "56194313af156269",
        "name": "",
        "scope": [
            "194bfb799ca274d8"
        ],
        "uncaught": false,
        "x": 530,
        "y": 200,
        "wires": [
            [
                "8120e9dfa4309ad9"
            ]
        ]
    },
    {
        "id": "8120e9dfa4309ad9",
        "type": "debug",
        "z": "56194313af156269",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 200,
        "wires": []
    },
    {
        "id": "dd8270414184f40b",
        "type": "function",
        "z": "56194313af156269",
        "name": "Filter Touch",
        "func": "var touch = global.get(\"dataScreen\");\n\noutput = {};\noutput[\"Fan_Evap._Condenser_1\"] = {};\noutput[\"Fan_Evap._Condenser_2\"] = {};\noutput[\"Blast_Freezer_1\"] = {};\noutput[\"Blast_Freezer_2\"] = {};\noutput[\"Blast_Freezer_3\"] = {};\noutput[\"VESSEL_1\"] = {};\noutput[\"VESSEL_2\"] = {};\noutput[\"INTER\"] = {};\noutput[\"AirPurger\"] = {};\nlet obj = {};\n\nfor(let [k,v] of Object.entries(touch.data)){\n    if(k.includes(\"Evap1\")){\n        output[\"Fan_Evap._Condenser_1\"][k] = {\n            deviceName : \"Fan_Evap._Condenser_1\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Evap2\")){\n        output[\"Fan_Evap._Condenser_2\"][k] = {\n            deviceName : \"Fan_Evap._Condenser_2\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"INTER\")){\n        output[\"INTER\"][k] = {\n            deviceName : \"INTER\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Vessel1\")){\n        output[\"VESSEL_1\"][k] = {\n            deviceName : \"VESSEL_1\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Vessel2\")){\n        output[\"VESSEL_2\"][k] = {\n            deviceName : \"VESSEL_2\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Blast1\")){\n        output[\"Blast_Freezer_1\"][k] = {\n            deviceName : \"Blast_Freezer_1\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Blast2\")){\n        output[\"Blast_Freezer_2\"][k] = {\n            deviceName : \"Blast_Freezer_2\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"Blast3\")){\n        output[\"Blast_Freezer_3\"][k] = {\n            deviceName : \"Blast_Freezer_3\",\n            name : k,\n            value : v,\n        }\n    }else if(k.includes(\"AirPurger\")){\n        output[\"AirPurger\"][k] = {\n            deviceName : \"AirPurger\",\n            name : k,\n            value : v,\n        }\n    }else{\n        if(!k.includes(\"SPARE\")){\n            obj[k] = {\n                name : k,\n                value : v,\n            }\n        }\n    }\n}\nglobal.set(\"Comp1-2\",obj);\nmsg.payload = output;\nmsg.test = touch;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 280,
        "wires": [
            [
                "e3e95adce45dd8cd"
            ]
        ]
    },
    {
        "id": "8fa2876fd0f2f857",
        "type": "function",
        "z": "56194313af156269",
        "name": "set flow FanEvap.1-2",
        "func": "var data = global.get(\"dataScreen\")\nvar timestamp = parseInt(new Date().getTime() / 1000);\nvar output = [];\nvar fan1 = {};\nfan1[\"data\"] = {};\nvar fan2 = {};\nfan2[\"data\"] = {};\nfor(let [k,v] of Object.entries(data)){\n    if(k == \"data\"){\n        for(let [a,b] of Object.entries(v)){\n            if(a.includes(\"Evap1\")){\n                fan1[\"deviceName\"] = \"Fan_Evap._Condenser_1\";\n                fan1[\"data\"][a] = b;\n                fan1[\"timestamp\"] = timestamp;\n            }else if(a.includes(\"Evap2\")){\n                fan2[\"deviceName\"] = \"Fan_Evap._Condenser_2\";\n                fan2[\"data\"][a] = b;\n                fan2[\"timestamp\"] = timestamp;\n            }\n        }\n    }\n}\noutput.push(fan1,fan2);\nglobal.set('Evap',output);\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "e3e95adce45dd8cd",
        "type": "function",
        "z": "56194313af156269",
        "name": "set flow",
        "func": "\nvar blast1 = {};\nblast1[\"data\"] = {};\nvar blast2 = {};\nblast2[\"data\"] = {};\nvar blast3 = {};\nblast3[\"data\"] = {};\nvar vessel1 = {};\nvessel1[\"data\"] = {};\nvar vessel2 = {};\nvessel2[\"data\"] = {};\nvar inter = {};\ninter[\"data\"] = {};\nvar airpurger = {};\nairpurger[\"data\"] = {};\nvar datetime = parseInt(new Date().getTime() / 1000);\nvar timestamp = parseInt(datetime);\n\nfor(let [k,v] of Object.entries(msg.payload)){\n    for(let [a,b] of Object.entries(v)){\n        switch(b.deviceName){\n            case \"Blast_Freezer_1\":\n                blast1[\"deviceName\"] = b.deviceName;\n                blast1[\"data\"][b.name] = b.value;\n                blast1[\"timestamp\"] = timestamp;\n            break;\n            case \"Blast_Freezer_2\":\n                blast2[\"deviceName\"] = b.deviceName;\n                blast2[\"data\"][b.name] = b.value;\n                blast2[\"timestamp\"] = timestamp;\n            break;\n            case \"Blast_Freezer_3\":\n                blast3[\"deviceName\"] = b.deviceName;\n                blast3[\"data\"][b.name] = b.value;\n                blast3[\"timestamp\"] = timestamp;\n            break;\n            case \"VESSEL_1\":\n                vessel1[\"deviceName\"] = b.deviceName;\n                vessel1[\"data\"][b.name] = b.value;\n                vessel1[\"timestamp\"] = timestamp;\n            break;\n            case \"VESSEL_2\":\n                vessel2[\"deviceName\"] = b.deviceName;\n                vessel2[\"data\"][b.name] = b.value;\n                vessel2[\"timestamp\"] = timestamp;\n            break;\n            case \"INTER\":\n                inter[\"deviceName\"] = b.deviceName;\n                inter[\"data\"][b.name] = b.value;\n                inter[\"timestamp\"] = timestamp;\n            break;\n            case \"AirPurger\":\n                airpurger[\"deviceName\"] = b.deviceName;\n                airpurger[\"data\"][b.name] = b.value;\n                airpurger[\"timestamp\"] = timestamp;\n            break;\n            default:\n            break;\n        }\n    }\n}\nvar data = global.get(\"Data\");\n\nvar output = {};\noutput[\"blast1\"] = {};\noutput[\"blast2\"] = {};\noutput[\"blast3\"] = {};\noutput[\"vessel1\"] = {};\noutput[\"vessel2\"] = {};\noutput[\"inter\"] = {};\n\nfor(let index in data){\n    if(data[index].name == blast1.deviceName){\n        if(Object.keys(data[index].data) !== blast1.data){\n            output[\"blast1\"][\"deviceName\"] = blast1.deviceName;\n            output[\"blast1\"][\"data\"] = Object.assign(data[index].data,blast1.data);\n            output[\"blast1\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == blast2.deviceName){\n        if(Object.keys(data[index].data) !== blast2.data){\n            output[\"blast2\"][\"deviceName\"] = blast2.deviceName;\n            output[\"blast2\"][\"data\"] = Object.assign(data[index].data,blast2.data);\n            output[\"blast2\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == blast3.deviceName){\n        if(Object.keys(data[index].data) !== blast3.data){\n            output[\"blast3\"][\"deviceName\"] = blast3.deviceName;\n            output[\"blast3\"][\"data\"] = Object.assign(data[index].data,blast3.data);\n            output[\"blast3\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == vessel1.deviceName){\n        if(Object.keys(data[index].data) !== vessel1.data){\n            output[\"vessel1\"][\"deviceName\"] = vessel1.deviceName;\n            output[\"vessel1\"][\"data\"] = Object.assign(data[index].data,vessel1.data);\n            output[\"vessel1\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == vessel2.deviceName){\n        if(Object.keys(data[index].data) !== vessel2.data){\n            output[\"vessel2\"][\"deviceName\"] = vessel2.deviceName;\n            output[\"vessel2\"][\"data\"] = Object.assign(data[index].data,vessel2.data);\n            output[\"vessel2\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == inter.deviceName){\n        if(Object.keys(data[index].data) !== inter.data){\n            output[\"inter\"][\"deviceName\"] = inter.deviceName;\n            output[\"inter\"][\"data\"] = Object.assign(data[index].data,inter.data);\n            output[\"inter\"][\"timestamp\"] = timestamp;\n        }\n    }else{\n        output[index] = {};\n        output[index][\"deviceName\"] = data[index].name;\n        output[index][\"data\"] = data[index].data;\n        output[index][\"timestamp\"] = timestamp;\n    }\n}\nglobal.set(\"dataScreens\",Object.values(output))\nmsg.payload = Object.values(output);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "8fa2876fd0f2f857"
            ]
        ]
    },
    {
        "id": "0a9485616dcffe55",
        "type": "function",
        "z": "56194313af156269",
        "name": "Do not Edit",
        "func": "let mapsData = {};\nlet mapsData1 = {};\nlet output = {};\nif(msg.payload.length > 0){\n    for(let i = 0; i < 90; i++){\n        mapsData = {\n            \"RunComp1\" : msg.payload[0] == true ? 1 : 0,\n            \"OlComp1\" : msg.payload[1] == true ? 1 : 0,\n            \"RunComp2\" : msg.payload[2] == true ? 1 : 0,\n            \"OlComp2\" : msg.payload[3] == true ? 1 : 0,\n            \"Evap1WaterPump\" : msg.payload[4] == true ? 1 : 0,\n            \"Evap1PumpOL\" : msg.payload[5] == true ? 1 : 0,\n            \"Evap1Fan_1\" : msg.payload[6] == true ? 1 : 0,\n            \"Evap1Fan_2\" : msg.payload[7] == true ? 1 : 0,\n            \"Evap1Fan_3\" : msg.payload[8] == true ? 1 : 0,\n            \"Evap1Fan_4\" : msg.payload[9] == true ? 1 : 0,\n            \"Evap1Fan_5\" : msg.payload[10] == true ? 1 : 0,\n            \"Evap1Fan_6\" : msg.payload[11] == true ? 1 : 0,\n            \"Evap1Fan_7\" : msg.payload[12] == true ? 1 : 0,\n            \"Evap1Fan_8\" : msg.payload[13] == true ? 1 : 0,\n            \"Evap1Fan_9\" : msg.payload[14] == true ? 1 : 0,\n            \"Evap1Fan_10\" : msg.payload[15] == true ? 1 : 0,\n            \"Evap1FanOL\" : msg.payload[16] == true ? 1 : 0,\n            \"Evap2WaterPump\" : msg.payload[17] == true ? 1 : 0,\n            \"Evap2PumpOL\" : msg.payload[18] == true ? 1 : 0,\n            \"Evap2Fan_1\" : msg.payload[19] == true ? 1 : 0,\n            \"Evap2Fan_2\" : msg.payload[20] == true ? 1 : 0,\n            \"Evap2Fan_3\" : msg.payload[21] == true ? 1 : 0,\n            \"Evap2Fan_4\" : msg.payload[22] == true ? 1 : 0,\n            \"Evap2Fan_5\" : msg.payload[23] == true ? 1 : 0,\n            \"Evap2Fan_6\" : msg.payload[24] == true ? 1 : 0,\n            \"Evap2Fan_7\" : msg.payload[25] == true ? 1 : 0,\n            \"Evap2Fan_8\" : msg.payload[26] == true ? 1 : 0,\n            \"Evap2Fan_9\" : msg.payload[27] == true ? 1 : 0,\n            \"Evap2Fan_10\" : msg.payload[28] == true ? 1 : 0,\n            \"Evap2FanOL\" : msg.payload[29] == true ? 1 : 0,\n            \"AirPurgerMainLqSV\" : msg.payload[30] == true ? 1 : 0,\n            \"AirPurgerBypassSV\" : msg.payload[31] == true ? 1 : 0,\n            \"Vessel1_DiffPs\" : msg.payload[32] == true ? 1 : 0,\n            \"Vessel1_Pump1Run\" : msg.payload[33] == true ? 1 : 0,\n            \"Vessel1_Pump1OL\" : msg.payload[34] == true ? 1 : 0,\n            \"Vessel1_Pump2Run\" : msg.payload[35] == true ? 1 : 0,\n            \"Vessel1_Pump2OL\" : msg.payload[36] == true ? 1 : 0,\n            \"Vessel1_Pump3Run\" : msg.payload[37] == true ? 1 : 0,\n            \"Vessel1_Pump3OL\" : msg.payload[38] == true ? 1 : 0,\n            \"Vessel1_LqSV\" : msg.payload[39] == true ? 1 : 0,\n            \"Vessel1_HiLvCutOff\" : msg.payload[40] == true ? 1 : 0,\n            \"InterLqSv\" : msg.payload[41] == true ? 1 : 0,\n            \"InterHiLvCutOff\" : msg.payload[42] == true ? 1 : 0,\n            \"SPARE_1\" : msg.payload[43] == true ? 1 : 0,\n            \"SPARE_2\" : msg.payload[44] == true ? 1 : 0,\n            \"Vessel2_DiffPs\" : msg.payload[45] == true ? 1 : 0,\n            \"Vessel2_Pump1Run\" : msg.payload[46] == true ? 1 : 0,\n            \"Vessel2_Pump1OL\" : msg.payload[47] == true ? 1 : 0,\n            \"Vessel2_Pump2Run\" : msg.payload[48] == true ? 1 : 0,\n            \"Vessel2_Pump2OL\" : msg.payload[49] == true ? 1 : 0,\n            \"Vessel2_Pump3Run\" : msg.payload[50] == true ? 1 : 0,\n            \"Vessel2_Pump3OL\" : msg.payload[51] == true ? 1 : 0,\n            \"Vessel2_LQSV\" : msg.payload[52] == true ? 1 : 0,\n            \"Vessel2_HiLVcutOff\" : msg.payload[53] == true ? 1 : 0,\n            \"Blast1_Defrost\" : msg.payload[54] == true ? 1 : 0,\n            \"Blast1_suction\" : msg.payload[55] == true ? 1 : 0,\n            \"Blast1_Lqsv\" : msg.payload[56] == true ? 1 : 0,\n            \"Blast1_Fan1\" : msg.payload[57] == true ? 1 : 0,\n            \"Blast1_Fan2\" : msg.payload[58] == true ? 1 : 0,\n            \"Blast1_Fan3\" : msg.payload[59] == true ? 1 : 0,\n            \"Blast1_Fan4\" : msg.payload[60] == true ? 1 : 0,\n            \"Blast1_Fan5\" : msg.payload[61] == true ? 1 : 0,\n            \"Blast1_Fan6\" : msg.payload[62] == true ? 1 : 0,\n            \"Blast1_Fan13OL\" : msg.payload[63] == true ? 1 : 0,\n            \"Blast1_Fan46OL\" : msg.payload[64] == true ? 1 : 0,\n            \"Blast2_Defrost\" : msg.payload[65] == true ? 1 : 0,\n            \"Blast2_suction\" : msg.payload[66] == true ? 1 : 0,\n            \"Blast2_Lqsv\" : msg.payload[67] == true ? 1 : 0,\n            \"Blast2_Fan1\" : msg.payload[68] == true ? 1 : 0,\n            \"Blast2_Fan2\" : msg.payload[69] == true ? 1 : 0,\n            \"Blast2_Fan3\" : msg.payload[70] == true ? 1 : 0,\n            \"Blast2_Fan4\" : msg.payload[71] == true ? 1 : 0,\n            \"Blast2_Fan5\" : msg.payload[72] == true ? 1 : 0,\n            \"Blast2_Fan6\" : msg.payload[73] == true ? 1 : 0,\n            \"Blast2_Fan13OL\" : msg.payload[74] == true ? 1 : 0,\n            \"Blast2_Fan46OL\" : msg.payload[75] == true ? 1 : 0,\n            \"Blast3_Defrost\" : msg.payload[76] == true ? 1 : 0,\n            \"Blast3_suction\" : msg.payload[77] == true ? 1 : 0,\n            \"Blast3_Lqsv\" : msg.payload[78] == true ? 1 : 0,\n            \"Blast3_Fan1\" : msg.payload[79] == true ? 1 : 0,\n            \"Blast3_Fan2\" : msg.payload[80] == true ? 1 : 0,\n            \"Blast3_Fan3\" : msg.payload[81] == true ? 1 : 0,\n            \"Blast3_Fan4\" : msg.payload[82] == true ? 1 : 0,\n            \"Blast3_Fan5\" : msg.payload[83] == true ? 1 : 0,\n            \"Blast3_Fan6\" : msg.payload[84] == true ? 1 : 0,\n            \"Blast3_Fan13OL\" : msg.payload[85] == true ? 1 : 0,\n            \"Blast3_Fan46OL\" : msg.payload[86] == true ? 1 : 0,\n            \"SPARE_3\" : msg.payload[87] == true ? 1 : 0,\n            \"SPARE_4\" : msg.payload[88] == true ? 1 : 0,\n            \"SPARE_5\" : msg.payload[89] == true ? 1 : 0,\n        }\n        mapsData1 = {\n            \"RunComp1\" : msg.payload[0] == true ? 1 : 0,\n            \"OlComp1\" : msg.payload[1] == true ? 1 : 0,\n            \"RunComp2\" : msg.payload[2] == true ? 1 : 0,\n            \"OlComp2\" : msg.payload[3] == true ? 1 : 0,\n            \"Evap1Water_Pump_Run\" : msg.payload[4] == true ? 1 : 0,\n            \"Evap1Pump_Overload\" : msg.payload[5] == true ? 1 : 0,\n            \"Evap1Fan_1_Run\" : msg.payload[6] == true ? 1 : 0,\n            \"Evap1Fan_2_Run\" : msg.payload[7] == true ? 1 : 0,\n            \"Evap1Fan_3_Run\" : msg.payload[8] == true ? 1 : 0,\n            \"Evap1Fan_4_Run\" : msg.payload[9] == true ? 1 : 0,\n            \"Evap1Fan_5_Run\" : msg.payload[10] == true ? 1 : 0,\n            \"Evap1Fan_6_Run\" : msg.payload[11] == true ? 1 : 0,\n            \"Evap1Fan_7_Run\" : msg.payload[12] == true ? 1 : 0,\n            \"Evap1Fan_8_Run\" : msg.payload[13] == true ? 1 : 0,\n            \"Evap1Fan_9_Run\" : msg.payload[14] == true ? 1 : 0,\n            \"Evap1Fan_10_Run\" : msg.payload[15] == true ? 1 : 0,\n            \"Evap1Fan_Overload\" : msg.payload[16] == true ? 1 : 0,\n            \"Evap2Water_Pump_Run\" : msg.payload[17] == true ? 1 : 0,\n            \"Evap2Pump_Overload\" : msg.payload[18] == true ? 1 : 0,\n            \"Evap2Fan_1_Run\" : msg.payload[19] == true ? 1 : 0,\n            \"Evap2Fan_2_Run\" : msg.payload[20] == true ? 1 : 0,\n            \"Evap2Fan_3_Run\" : msg.payload[21] == true ? 1 : 0,\n            \"Evap2Fan_4_Run\" : msg.payload[22] == true ? 1 : 0,\n            \"Evap2Fan_5_Run\" : msg.payload[23] == true ? 1 : 0,\n            \"Evap2Fan_6_Run\" : msg.payload[24] == true ? 1 : 0,\n            \"Evap2Fan_7_Run\" : msg.payload[25] == true ? 1 : 0,\n            \"Evap2Fan_8_Run\" : msg.payload[26] == true ? 1 : 0,\n            \"Evap2Fan_9_Run\" : msg.payload[27] == true ? 1 : 0,\n            \"Evap2Fan_10_Run\" : msg.payload[28] == true ? 1 : 0,\n            \"Evap2Fan_Overload\" : msg.payload[29] == true ? 1 : 0,\n            \"AirPurger_MainLiquid_SV\" : msg.payload[30] == true ? 1 : 0,\n            \"AirPurger_Bypass_SV\" : msg.payload[31] == true ? 1 : 0,\n            \"Vessel1_Diff_Pressure\" : msg.payload[32] == true ? 1 : 0,\n            \"Vessel1_Pump_1_Run\" : msg.payload[33] == true ? 1 : 0,\n            \"Vessel1_Pump_1_Overload\" : msg.payload[34] == true ? 1 : 0,\n            \"Vessel1_Pump_2_Run\" : msg.payload[35] == true ? 1 : 0,\n            \"Vessel1_Pump_2_Overload\" : msg.payload[36] == true ? 1 : 0,\n            \"Vessel1_Pump_3_Run\" : msg.payload[37] == true ? 1 : 0,\n            \"Vessel1_Pump_3_Overload\" : msg.payload[38] == true ? 1 : 0,\n            \"Vessel1_Liquid_SV\" : msg.payload[39] == true ? 1 : 0,\n            \"Vessel1_HiLvCutOff\" : msg.payload[40] == true ? 1 : 0,\n            \"INTER_Liquid_SV\" : msg.payload[41] == true ? 1 : 0,\n            \"INTER_HiLvCutOff\" : msg.payload[42] == true ? 1 : 0,\n            \"SPARE_1\" : msg.payload[43] == true ? 1 : 0,\n            \"SPARE_2\" : msg.payload[44] == true ? 1 : 0,\n            \"Vessel2_Diff_Pressure\" : msg.payload[45] == true ? 1 : 0,\n            \"Vessel2_Pump_1_Run\" : msg.payload[46] == true ? 1 : 0,\n            \"Vessel2_Pump_1_Overload\" : msg.payload[47] == true ? 1 : 0,\n            \"Vessel2_Pump_2_Run\" : msg.payload[48] == true ? 1 : 0,\n            \"Vessel2_Pump_2_Overload\" : msg.payload[49] == true ? 1 : 0,\n            \"Vessel2_Pump_3_Run\" : msg.payload[50] == true ? 1 : 0,\n            \"Vessel2_Pump_3_Overload\" : msg.payload[51] == true ? 1 : 0,\n            \"Vessel2_Liquid_SV\" : msg.payload[52] == true ? 1 : 0,\n            \"Vessel2_HiLVcutOff\" : msg.payload[53] == true ? 1 : 0,\n            \"Blast1_Defrost\" : msg.payload[54] == true ? 1 : 0,\n            \"Blast1_suction_SV\" : msg.payload[55] == true ? 1 : 0,\n            \"Blast1_Liquid_SV\" : msg.payload[56] == true ? 1 : 0,\n            \"Blast1_Fan_1_Run\" : msg.payload[57] == true ? 1 : 0,\n            \"Blast1_Fan_2_Run\" : msg.payload[58] == true ? 1 : 0,\n            \"Blast1_Fan_3_Run\" : msg.payload[59] == true ? 1 : 0,\n            \"Blast1_Fan_4_Run\" : msg.payload[60] == true ? 1 : 0,\n            \"Blast1_Fan_5_Run\" : msg.payload[61] == true ? 1 : 0,\n            \"Blast1_Fan_6_Run\" : msg.payload[62] == true ? 1 : 0,\n            \"Blast1_Fan_13_Overload\" : msg.payload[63] == true ? 1 : 0,\n            \"Blast1_Fan_46_Overload\" : msg.payload[64] == true ? 1 : 0,\n            \"Blast2_Defrost\" : msg.payload[65] == true ? 1 : 0,\n            \"Blast2_suction_SV\" : msg.payload[66] == true ? 1 : 0,\n            \"Blast2_Liquid_SV\" : msg.payload[67] == true ? 1 : 0,\n            \"Blast2_Fan_1_Run\" : msg.payload[68] == true ? 1 : 0,\n            \"Blast2_Fan_2_Run\" : msg.payload[69] == true ? 1 : 0,\n            \"Blast2_Fan_3_Run\" : msg.payload[70] == true ? 1 : 0,\n            \"Blast2_Fan_4_Run\" : msg.payload[71] == true ? 1 : 0,\n            \"Blast2_Fan_5_Run\" : msg.payload[72] == true ? 1 : 0,\n            \"Blast2_Fan_6_Run\" : msg.payload[73] == true ? 1 : 0,\n            \"Blast2_Fan_13_Overload\" : msg.payload[74] == true ? 1 : 0,\n            \"Blast2_Fan_46_Overload\" : msg.payload[75] == true ? 1 : 0,\n            \"Blast3_Defrost\" : msg.payload[76] == true ? 1 : 0,\n            \"Blast3_suction_SV\" : msg.payload[77] == true ? 1 : 0,\n            \"Blast3_Liquid_SV\" : msg.payload[78] == true ? 1 : 0,\n            \"Blast3_Fan_1_Run\" : msg.payload[79] == true ? 1 : 0,\n            \"Blast3_Fan_2_Run\" : msg.payload[80] == true ? 1 : 0,\n            \"Blast3_Fan_3_Run\" : msg.payload[81] == true ? 1 : 0,\n            \"Blast3_Fan_4_Run\" : msg.payload[82] == true ? 1 : 0,\n            \"Blast3_Fan_5_Run\" : msg.payload[83] == true ? 1 : 0,\n            \"Blast3_Fan_6_Run\" : msg.payload[84] == true ? 1 : 0,\n            \"Blast3_Fan_13_Overlaod\" : msg.payload[85] == true ? 1 : 0,\n            \"Blast3_Fan_46_Overload\" : msg.payload[86] == true ? 1 : 0,\n            \"SPARE_3\" : msg.payload[87] == true ? 1 : 0,\n            \"SPARE_4\" : msg.payload[88] == true ? 1 : 0,\n            \"SPARE_5\" : msg.payload[89] == true ? 1 : 0,\n        }\n    }\n}\n\nvar data = {}\n\nif(Object.keys(mapsData).length > 0){\n    output = {\n        name : \"TouchScreen\",\n        adr : \"172.16.46.23\",\n        data : mapsData,\n    }\n    flow.set(\"TouchScreen\",output);\n    global.set(\"TouchScreen\",output);\n    data = {\n        name : \"TouchScreen\",\n        adr : \"172.16.46.23\",\n        data : mapsData1,\n    }\n    global.set(\"dataScreen\",data);\n}\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 120,
        "wires": [
            [
                "ea740a56b2ed7fe1"
            ]
        ]
    },
    {
        "id": "c25c548e522db3cd",
        "type": "inject",
        "z": "56194313af156269",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "dd8270414184f40b"
            ]
        ]
    },
    {
        "id": "027c7687cf17bafe",
        "type": "function",
        "z": "56194313af156269",
        "name": "Filter Data",
        "func": "var data = global.get(\"xjaData\");\n\nconst finded = (name) =>{\n    for(let i in data){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k == name){\n                return {\n                    name : k,\n                    value : v,\n                };\n            }\n        }\n    }\n}\nvar xja = {};\nxja[\"Blast_Freezer_4\"] = {};\nxja[\"Blast_Freezer_5\"] = {};\nxja[\"Blast_Freezer_6\"] = {};\nxja[\"Cold_Storage_9-1\"] = {};\nxja[\"Cold_Storage_9-2\"] = {};\nxja[\"Cold_Storage_9-3\"] = {};\nxja[\"Cold_Storage_10\"] = {};\nxja[\"Cold_Storage_11-1\"] = {};\nxja[\"Cold_Storage_11-2\"] = {};\nxja[\"Cold_Storage_11-3\"] = {};\nxja[\"Cold_Storage_11-4\"] = {};\nxja[\"Cold_Storage_11-5\"] = {};\nxja[\"Cold_Storage_8\"] = {};\nxja[\"Compressor_No.3\"] = {};\nxja[\"Compressor_No.4\"] = {};\nxja[\"Loading_3\"] = {};\nxja[\"Loading_4\"] = {};\nxja[\"VESSEL_3\"] = {};\nxja[\"Fan_Evap._Condenser_3\"] = {};\nxja[\"Fan_Evap._Condenser_4\"] = {};\nxja[\"Ante_Room_3\"] = {};\n\nfor(let i = 0; i < data.length; i++){\n    if(data[i].adr == \"192.168.50.155:502:51\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k !== \"On\" && \n                k !== \"Alarm\" &&\n                k !== \"No-Link\"\n            ){\n                xja[\"Compressor_No.3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Compressor_No.3\",\n                    adr : data[i].adr,\n                    name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    value : v,\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:52\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            xja[\"Fan_Evap._Condenser_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                deviceName : \"Fan_Evap._Condenser_3\",\n                adr : data[i].adr,\n                name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                value : v,\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:53\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast4 = k.includes(\"Freezer_4\");\n                if(blast4 == false){\n                    if(k !== \"On\" && k !== \"No-Link\"){\n                        xja[\"VESSEL_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"VESSEL_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:54\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer_4\")){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:55\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let has = k.includes(\"Freezer_4\");\n                let blast5 = k.includes(\"Freezer_5\");\n                if(has == true){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    \tdeviceName : \"Blast_Freezer_4\",\n                    \tadr : data[i].adr,\n                    \tname : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    \tvalue : v\n                    }\n                }\n                if(blast5 == true){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:56\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer_6\");\n                if(k.includes(\"Freezer 5\")){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Freezer_6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:57\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer_6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:58\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer_6\");\n                if(blast6 == true){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:59\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold91 = k.includes(\"Storage_9-1\");\n                let Cold92 = k.includes(\"Storage_9-2\");\n                if(Cold91 == false && Cold92 == false){\n                    xja[\"Compressor_No.4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Compressor_No.4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else{\n                    if(Cold91 == true){\n                        xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-1\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }else if(Cold92 == true){\n                        xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-2\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:60\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold92 = k.includes(\"Storage_9-2\");\n                if(Cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_9-3\")){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:61\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:62\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-3\")){\n                    xja[\"Cold_Storage_11-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:63\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:64\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:65\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Loading_3\")){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_4\")){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Ante_Room_3\")){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:66\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold9 = k.includes(\"Storage_9\");\n                let cold91 = k.includes(\"Storage_9-1\");\n                let cold92 = k.includes(\"Storage_9-2\");\n                if(cold9 == false){\n                    if(k !== \"On\" && k !== \"No-Link\"){\n                        xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Ante_Room_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n                if(cold91 == true){\n                    xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:67\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold93 = k.includes(\"Storage_9-3\");\n                let cold11 = k.includes(\"Storage_11\");\n                if(cold93 == true){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n                if(k.includes(\"Storage_11-1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-3\")){\n                    xja[\"Cold_Storage_11-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:68\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_3\")){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_4\")){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:69\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let ante3 = k.includes(\"Ante_Room_3\");\n                if(ante3 == true){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"156\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let fan = k.includes(\"Fan\");\n                if(fan == true){\n                    xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Fan_Evap._Condenser_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }else if(data[i].adr == \"157\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Fan_Evap._Condenser_4\",\n                    adr : data[i].adr,\n                    name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    value : v,\n                }\n            }\n        }\n    }\n}\nmsg.payload = xja;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 360,
        "wires": [
            [
                "e1509aaaddf2ffdc"
            ]
        ]
    },
    {
        "id": "e1509aaaddf2ffdc",
        "type": "function",
        "z": "56194313af156269",
        "name": "Set Flow Insert",
        "func": "var output = {};\nvar blast4 = {};\nblast4[\"data\"] = {};\nvar blast5 = {};\nblast5[\"data\"] = {};\nvar blast6 = {};\nblast6[\"data\"] = {};\nvar cold91 = {};\ncold91[\"data\"] = {};\nvar cold92 = {};\ncold92[\"data\"] = {};\nvar cold93 = {};\ncold93[\"data\"] = {};\nvar cold8 = {};\ncold8[\"data\"] = {};\nvar cold10 = {};\ncold10[\"data\"] = {};\nvar cold11 = {};\ncold11[\"data\"] = {};\nvar cold12 = {};\ncold12[\"data\"] = {};\nvar cold13 = {};\ncold13[\"data\"] = {};\nvar cold14 = {};\ncold14[\"data\"] = {};\nvar cold15 = {};\ncold15[\"data\"] = {};\nvar ante3 = {};\nante3[\"data\"] = {};\nvar loading3 = {};\nloading3[\"data\"] = {};\nvar loading4 = {};\nloading4[\"data\"] = {};\nvar myCompressor = {};\nmyCompressor[\"data\"] = {};\nvar evap2000 = {};\nevap2000[\"data\"] = {};\nvar evapsec = {};\nevapsec[\"data\"] = {};\nvar myCom355 = {};\nmyCom355[\"data\"] = {};\nvar vessel = {};\nvessel[\"data\"] = {};\nvar datetime = new Date().getTime();\nvar timestamp = parseInt(datetime / 1000);\nfor(let i in msg.payload){\n    for(let [k,v] of Object.entries(msg.payload[i])){\n        if(v.deviceName == \"Blast_Freezer_4\"){\n            blast4[\"deviceName\"] = v.deviceName;\n            blast4[\"timestamp\"] = timestamp;\n            blast4[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Blast_Freezer_5\"){\n            blast5[\"deviceName\"] = v.deviceName;\n            blast5[\"timestamp\"] = timestamp;\n            blast5[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Blast_Freezer_6\"){\n            blast6[\"deviceName\"] = v.deviceName;\n            blast6[\"timestamp\"] = timestamp;\n            blast6[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_9-1\"){\n            cold91[\"deviceName\"] = v.deviceName;\n            cold91[\"timestamp\"] = timestamp;\n            cold91[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_9-2\"){\n            cold92[\"deviceName\"] = v.deviceName;\n            cold92[\"timestamp\"] = timestamp;\n            cold92[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_9-3\"){\n            cold93[\"deviceName\"] = v.deviceName;\n            cold93[\"timestamp\"] = timestamp;\n            cold93[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_8\"){\n            cold8[\"deviceName\"] = v.deviceName;\n            cold8[\"timestamp\"] = timestamp;\n            cold8[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_10\"){\n            cold10[\"deviceName\"] = v.deviceName;\n            cold10[\"timestamp\"] = timestamp;\n            cold10[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-1\"){\n            cold11[\"deviceName\"] = v.deviceName;\n            cold11[\"timestamp\"] = timestamp;\n            cold11[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-2\"){\n            cold12[\"deviceName\"] = v.deviceName;\n            cold12[\"timestamp\"] = timestamp;\n            cold12[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-3\"){\n            cold13[\"deviceName\"] = v.deviceName;\n            cold13[\"timestamp\"] = timestamp;\n            cold13[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-4\"){\n            cold14[\"deviceName\"] = v.deviceName;\n            cold14[\"timestamp\"] = timestamp;\n            cold14[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Cold_Storage_11-5\"){\n            cold15[\"deviceName\"] = v.deviceName;\n            cold15[\"timestamp\"] = timestamp;\n            cold15[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Ante_Room_3\"){\n            ante3[\"deviceName\"] = v.deviceName;\n            ante3[\"timestamp\"] = timestamp;\n            ante3[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Loading_3\"){\n            loading3[\"deviceName\"] = v.deviceName;\n            loading3[\"timestamp\"] = timestamp;\n            loading3[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Loading_4\"){\n            loading4[\"deviceName\"] = v.deviceName;\n            loading4[\"timestamp\"] = timestamp;\n            loading4[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Compressor_No.4\"){\n            myCompressor[\"deviceName\"] = v.deviceName;\n            myCompressor[\"timestamp\"] = timestamp;\n            myCompressor[\"data\"][v.name !== \"No_Link\" ? v.name : v.name] = v.value;\n        }else if(v.deviceName == \"Fan_Evap._Condenser_3\"){\n            evap2000[\"deviceName\"] = v.deviceName;\n            evap2000[\"timestamp\"] = timestamp;\n            evap2000[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Fan_Evap._Condenser_4\"){\n            evapsec[\"deviceName\"] = v.deviceName;\n            evapsec[\"timestamp\"] = timestamp;\n            evapsec[\"data\"][v.name] = v.value;\n        }else if(v.deviceName == \"Compressor_No.3\"){\n            myCom355[\"deviceName\"] = v.deviceName;\n            myCom355[\"timestamp\"] = timestamp;\n            myCom355[\"data\"][v.name] = v.value;\n        }else{\n            vessel[\"deviceName\"] = v.deviceName;\n            vessel[\"timestamp\"] = timestamp;\n            vessel[\"data\"][v.name] = v.value;\n        }\n    }\n}\n// output = [blast4,blast5,blast6,cold91,cold92,cold93,cold8,cold10,cold11,cold12,cold13,cold14,cold15,ante3,loading3,loading4,myCompressor,evap2000,evapsec,myCom355,vessel];\nglobal.set('Fan.Evap3',evap2000);\nglobal.set(\"Fan.Evap4\",evapsec);\nglobal.set(\"Comp.3\",myCom355);\nglobal.set(\"Comp.4\",myCompressor);\nglobal.set(\"vessel3\",vessel);\n\nvar data = global.get('Data');\n\noutput[\"blast4\"] = {};\noutput[\"blast5\"] = {};\noutput[\"blast6\"] = {};\noutput[\"cold9_1\"] = {};\noutput[\"cold9_2\"] = {};\noutput[\"cold9_3\"] = {};\noutput[\"cold8\"] = {};\noutput[\"cold10\"] = {};\noutput[\"cold11\"] = {};\noutput[\"cold12\"] = {};\noutput[\"cold13\"] = {};\noutput[\"cold14\"] = {};\noutput[\"cold15\"] = {};\noutput[\"ante3\"] = {};\noutput[\"loading3\"] = {};\noutput[\"loading4\"] = {};\noutput[\"comp4\"] = {};\noutput[\"comp3\"] = {};\n\n\nfor(let index in data){\n    if(data[index].name == blast4.deviceName){\n        if(Object.keys(data[index].data) !== blast4.data){\n            output[\"blast4\"][\"deviceName\"] = blast4.deviceName;\n            output[\"blast4\"][\"adr\"] = data[index].adr;\n            output[\"blast4\"][\"data\"] = Object.assign(data[index].data,blast4.data);\n            output[\"blast4\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == blast5.deviceName){\n        if(Object.keys(data[index].data) !== blast5.data){\n            output[\"blast5\"][\"deviceName\"] = blast5.deviceName;\n            output[\"blast5\"][\"data\"] = Object.assign(data[index].data,blast5.data);\n            output[\"blast5\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == blast6.deviceName){\n        if(Object.keys(data[index].data) !== blast6.data){\n            output[\"blast6\"][\"deviceName\"] = blast6.deviceName;\n            output[\"blast6\"][\"adr\"] = data[index].adr;\n            output[\"blast6\"][\"data\"] = Object.assign(data[index].data,blast6.data);\n            output[\"blast6\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold91.deviceName){\n        if(Object.keys(data[index].data) !== cold91.data){\n            output[\"cold9_1\"][\"deviceName\"] = cold91.deviceName;\n            output[\"cold9_1\"][\"adr\"] = data[index].adr;\n            output[\"cold9_1\"][\"data\"] = Object.assign(data[index].data,cold91.data);\n            output[\"cold9_1\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold92.deviceName){\n        if(Object.keys(data[index].data) !== cold92.data){\n            output[\"cold9_2\"][\"deviceName\"] = cold92.deviceName;\n            output[\"cold9_2\"][\"adr\"] = data[index].adr;\n            output[\"cold9_2\"][\"data\"] = Object.assign(data[index].data,cold92.data);\n            output[\"cold9_2\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold93.deviceName){\n        if(Object.keys(data[index].data) !== cold93.data){\n            output[\"cold9_3\"][\"deviceName\"] = cold93.deviceName;\n            output[\"cold9_3\"][\"adr\"] = data[index].adr;\n            output[\"cold9_3\"][\"data\"] = Object.assign(data[index].data,cold93.data);\n            output[\"cold9_3\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold8.deviceName){\n        if(Object.keys(data[index].data) !== cold8.data){\n            output[\"cold8\"][\"deviceName\"] = cold8.deviceName;\n            output[\"cold8\"][\"adr\"] = data[index].adr;\n            output[\"cold8\"][\"data\"] = Object.assign(data[index].data,cold8.data);\n            output[\"cold8\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold10.deviceName){\n        if(Object.keys(data[index].data) !== cold10.data){\n            output[\"cold10\"][\"deviceName\"] = cold10.deviceName;\n            output[\"cold10\"][\"adr\"] = data[index].adr;\n            output[\"cold10\"][\"data\"] = Object.assign(data[index].data,cold10.data);\n            output[\"cold10\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold11.deviceName){\n        if(Object.keys(data[index].data) !== cold11.data){\n            output[\"cold11\"][\"deviceName\"] = cold11.deviceName;\n            output[\"cold11\"][\"adr\"] = data[index].adr;\n            output[\"cold11\"][\"data\"] = Object.assign(data[index].data,cold11.data);\n            output[\"cold11\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold12.deviceName){\n        if(Object.keys(data[index].data) !== cold12.deviceName){\n            output[\"cold12\"][\"deviceName\"] = cold12.deviceName;\n            output[\"cold12\"][\"adr\"] = data[index].adr;\n            output[\"cold12\"][\"data\"] = Object.assign(data[index].data,cold12.data);\n            output[\"cold12\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold13.deviceName){\n        if(Object.keys(data[index].data) !== cold13.deviceName){\n            output[\"cold13\"][\"deviceName\"] = cold13.deviceName;\n            output[\"cold13\"][\"adr\"] = data[index].adr;\n            output[\"cold13\"][\"data\"] = Object.assign(data[index].data,cold13.data);\n            output[\"cold13\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold14.deviceName){\n        if(Object.keys(data[index].data) !== cold14.data){\n            output[\"cold14\"][\"deviceName\"] = cold14.deviceName;\n            output[\"cold14\"][\"adr\"] = data[index].adr;\n            output[\"cold14\"][\"data\"] = Object.assign(data[index].data,cold14.data);\n            output[\"cold14\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == cold15.deviceName){\n        if(Object.keys(data[index].data) !== cold15.data){\n            output[\"cold15\"][\"deviceName\"] = cold15.deviceName;\n            output[\"cold15\"][\"adr\"] = data[index].adr;\n            output[\"cold15\"][\"data\"] = Object.assign(data[index].data,cold15.data);\n            output[\"cold15\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == ante3.deviceName){\n        if(Object.keys(data[index].data) !== ante3.data){\n            output[\"ante3\"][\"deviceName\"] = ante3.deviceName;\n            output[\"ante3\"][\"adr\"] = data[index].adr;\n            output[\"ante3\"][\"data\"] = Object.assign(data[index].data,ante3.data);\n            output[\"ante3\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == loading3.deviceName){\n        if(Object.keys(data[index].data) !== loading3.data){\n            output[\"loading3\"][\"deviceName\"] = loading3.deviceName;\n            output[\"loading3\"][\"adr\"] = data[index].adr;\n            output[\"loading3\"][\"data\"] = Object.assign(data[index].data,loading3.data);\n            output[\"loading3\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == loading4.deviceName){\n        if(Object.keys(data[index].data) !== loading4.data){\n            output[\"loading4\"][\"deviceName\"] = loading4.deviceName;\n            output[\"loading4\"][\"adr\"] = data[index].adr;\n            output[\"loading4\"][\"data\"] = Object.assign(data[index].data,loading4.data);\n            output[\"loading4\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == myCompressor.deviceName){\n        if(Object.keys(data[index].data) !== myCompressor.data){\n            output[\"comp4\"][\"deviceName\"] = data[index].name;\n            output[\"comp4\"][\"adr\"] = data[index].adr;\n            output[\"comp4\"][\"data\"] = Object.assign(data[index].data,myCompressor.data);\n            output[\"comp4\"][\"timestamp\"] = timestamp;\n        }\n    }else if(data[index].name == myCom355.deviceName){\n        if(Object.keys(data[index].data) !== myCom355.data){\n            output[\"comp3\"][\"deviceName\"] = data[index].name;\n            output[\"comp3\"][\"adr\"] = data[index].adr;\n            output[\"comp3\"][\"data\"] = Object.assign(data[index].data,myCom355.data);\n            output[\"comp3\"][\"timestamp\"] = timestamp;\n        }\n    }else{\n        output[index] = {};\n        output[index][\"deviceName\"] = data[index].name;\n        output[index][\"adr\"] = data[index].adr;\n        output[index][\"data\"] = data[index].data;\n        output[index][\"timestamp\"] = timestamp;\n    }\n}\n\nglobal.set(\"Xja\",Object.values(output));\nmsg.payload = Object.values(output);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 360,
        "wires": [
            [
                "365e4df43b5c7bd1"
            ]
        ]
    },
    {
        "id": "bcdf2375ebfac0fb",
        "type": "inject",
        "z": "56194313af156269",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "027c7687cf17bafe"
            ]
        ]
    },
    {
        "id": "365e4df43b5c7bd1",
        "type": "debug",
        "z": "56194313af156269",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 360,
        "wires": []
    },
    {
        "id": "6cb660311fe357a6",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "store lists",
        "func": "var configStored = [\n    {\n        name : \"Suwinthawong\",\n    },\n    {\n        name : \"StoreTest\",\n    }\n];\nvar pathName;\nfor(var i in configStored){\n    msg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\stored.json\";\n}\nflow.set('Stored',configStored);\nmsg.payload = configStored;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 160,
        "wires": [
            [
                "b269cc73beff152c"
            ]
        ]
    },
    {
        "id": "036954bc5ef4c028",
        "type": "inject",
        "z": "3151ab83381d0f9c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "6cb660311fe357a6"
            ]
        ]
    },
    {
        "id": "b269cc73beff152c",
        "type": "file",
        "z": "3151ab83381d0f9c",
        "name": "List Store",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 460,
        "y": 160,
        "wires": [
            [
                "bd359d0dc8a2564d"
            ]
        ]
    },
    {
        "id": "0c723c257b7f1935",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "path file test",
        "func": "msg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\storedConfig.json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f5e09777187196e0",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "data_API",
        "info": "",
        "x": 440,
        "y": 20,
        "wires": []
    },
    {
        "id": "28a7467b97aa6722",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Setting",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nsetting = {\n    url : \"http://172.16.46.20/\"\n    // url : \"http://192.168.200.200/\"\n}\nflow.set(\"Setting\",setting);",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "bd359d0dc8a2564d",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 160,
        "wires": []
    },
    {
        "id": "032597cf2211c0ee",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/edit_setpoint",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1720,
        "wires": [
            [
                "eaa38c3e99306e9f"
            ]
        ]
    },
    {
        "id": "eaa38c3e99306e9f",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "req.body",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 1720,
        "wires": [
            [
                "6221ca1c43f03d76"
            ],
            [
                "e59b46251d3148b3"
            ]
        ]
    },
    {
        "id": "3d2bfa6a981cff6d",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1670,
        "y": 1760,
        "wires": []
    },
    {
        "id": "e59b46251d3148b3",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "is null",
        "func": "msg.payload = [\n    \"Use   /api/edit_setpoint\"\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1760,
        "wires": [
            [
                "3d2bfa6a981cff6d"
            ]
        ]
    },
    {
        "id": "1eb89b4ac7c0a03f",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/command",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1920,
        "wires": [
            [
                "ca2d5873cd76de01"
            ]
        ]
    },
    {
        "id": "9c5674ee2b8d027b",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1770,
        "y": 2000,
        "wires": []
    },
    {
        "id": "ca2d5873cd76de01",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "req.body.UID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1920,
        "wires": [
            [
                "46e56b737cc37542"
            ],
            [
                "7577633c9c10860c"
            ]
        ]
    },
    {
        "id": "7577633c9c10860c",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "IS NULL",
        "func": "msg.payload = [\n    \"Don't have UID\"\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2000,
        "wires": [
            [
                "9c5674ee2b8d027b"
            ]
        ]
    },
    {
        "id": "46e56b737cc37542",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "token jwt",
        "func": "msg.token = msg.req.headers['authorization'].split(' ')[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1900,
        "wires": [
            [
                "764d2854478ea350"
            ]
        ]
    },
    {
        "id": "6eabbc0e3f406771",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "list Devices",
        "info": "http://172.16.46.20/cgi-bin/rt_format.cgi?DEVLST=1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|96|97|98|101|102|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|156|157|TCP-192.168.50.155:502:51|TCP-192.168.50.155:502:52|TCP-192.168.50.155:502:53|TCP-192.168.50.155:502:54|TCP-192.168.50.155:502:55|TCP-192.168.50.155:502:56|TCP-192.168.50.155:502:57|TCP-192.168.50.155:502:58|TCP-192.168.50.155:502:59|TCP-192.168.50.155:502:60|TCP-192.168.50.155:502:61|TCP-192.168.50.155:502:62|TCP-192.168.50.155:502:63|TCP-192.168.50.155:502:64|TCP-192.168.50.155:502:65|TCP-192.168.50.155:502:66|TCP-192.168.50.155:502:67|TCP-192.168.50.155:502:68|TCP-192.168.50.155:502:69|TCP-192.168.50.83:502:101|TCP-192.168.50.83:502:102|192.168.50.85:502:103|192.168.50.86:502:104",
        "x": 430,
        "y": 3720,
        "wires": []
    },
    {
        "id": "0d43fb9339a53690",
        "type": "inject",
        "z": "3151ab83381d0f9c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3760,
        "wires": [
            [
                "f6c690e4e9cb865f"
            ]
        ]
    },
    {
        "id": "d1238310c0feab17",
        "type": "xml",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 570,
        "y": 3760,
        "wires": [
            [
                "fb0b47e9f318f017"
            ]
        ]
    },
    {
        "id": "7c45a56a1363dd0d",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 440,
        "y": 3760,
        "wires": [
            [
                "d1238310c0feab17"
            ]
        ]
    },
    {
        "id": "f6c690e4e9cb865f",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\SuwinthawongDataXML.xml\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 3760,
        "wires": [
            [
                "7c45a56a1363dd0d"
            ]
        ]
    },
    {
        "id": "fe82e8aef737a0e8",
        "type": "file",
        "z": "3151ab83381d0f9c",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 3900,
        "wires": [
            []
        ]
    },
    {
        "id": "8e38e03acad93057",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = [];\nfor(const [k,v] of Object.entries(msg.payload)){\n    if(k !== \"id\" && k !== \"name\"){\n        output.push(k);\n    }\n}\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong_points.json\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 3960,
        "wires": [
            [
                "3a2e13a6a44deca0"
            ]
        ]
    },
    {
        "id": "3a2e13a6a44deca0",
        "type": "file",
        "z": "3151ab83381d0f9c",
        "name": "Point file",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 770,
        "y": 3960,
        "wires": [
            [
                "2f6fbcf08f614419"
            ]
        ]
    },
    {
        "id": "2f6fbcf08f614419",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 3960,
        "wires": []
    },
    {
        "id": "e408c62e7e9850ac",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 4020,
        "wires": []
    },
    {
        "id": "55beabf38d209ea7",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\n\nfor(var i = 0; i < msg.data.length; i++){\n    output[msg.data[i].name.replace(/ /g,\"_\").replace(/-/g,\"\")] = {\n        name : msg.data[i].name.replace(/ /g,\"_\").replace(/-/g,\"\"),\n        adr : msg.data[i].adr,\n        deviceId : msg.data[i].uid,\n        lanid : msg.data[i].lanid,\n    }\n}\n\nmsg.payload = output;\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong_deviceId.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 4020,
        "wires": [
            [
                "136b118895b1dee6"
            ]
        ]
    },
    {
        "id": "136b118895b1dee6",
        "type": "file",
        "z": "3151ab83381d0f9c",
        "name": "List deviceId file",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 760,
        "y": 4020,
        "wires": [
            [
                "e408c62e7e9850ac"
            ]
        ]
    },
    {
        "id": "5d77d93d4233f59a",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong_All.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 3840,
        "wires": [
            [
                "763deb20f123799d"
            ]
        ]
    },
    {
        "id": "763deb20f123799d",
        "type": "file",
        "z": "3151ab83381d0f9c",
        "name": "Suwinthawong_All",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 790,
        "y": 3840,
        "wires": [
            []
        ]
    },
    {
        "id": "2ebe5685b08516f6",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 140,
        "y": 3840,
        "wires": [
            [
                "c07ed2aeba1d211e"
            ]
        ]
    },
    {
        "id": "c07ed2aeba1d211e",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 3840,
        "wires": [
            [
                "37e115d70df5c407",
                "1f01c21e5e84d129"
            ]
        ]
    },
    {
        "id": "1f01c21e5e84d129",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "filter room",
        "func": "var output = {};\n\nconst compare = (key) =>{\n    let data = {};\n    for(let a of Object.values(msg.questData)){\n        for(let [k,v] of Object.entries(a)){\n            if(k == key){\n                data[key] = v;\n            }\n        }\n    }\n    return data;\n}\nfor(let [col,val] of Object.entries(msg.payload)){\n    output[col] = {};\n    for(let [k,v] of Object.entries(val)){\n        let test = compare(k);\n        let [key,value] = Object.entries(test)\n        if(k == key[0]){\n            output[col][key[0]] = key[1];\n        }\n    }\n}\nflow.set(\"all_ctrl\",output);\nglobal.set(\"all_ctrl\",output);\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong.json\";\nmsg.payload = output\nnode.status({fill:\"green\",shape:\"ring\",text: \"Done\"})\n// flow.set(\"Ctrl\",)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 3900,
        "wires": [
            []
        ]
    },
    {
        "id": "b2f91dc46d907579",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "data from xweb",
        "func": "Type = Object.keys(msg.payload)[0];\nvar output = {};\nvar data = [];\n\nvar timestamp = new Date().getTime();\nmsg.dateTime = parseInt(timestamp / 1000)\n\nfor(let i in msg.payload[Type].device){\n    analog = [];\n    anal = {};\n    for(let ana in msg.payload[Type].device[i].analogInput){\n        analog.push({\n            name : msg.payload[Type].device[i].analogInput[ana].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].analogInput[ana].value.toString(),\n            unit : msg.payload[Type].device[i].analogInput[ana].unit.toString(),\n            index : msg.payload[Type].device[i].analogInput[ana].index.toString(),\n            \n        })\n        anal[msg.payload[Type].device[i].analogInput[ana].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].analogInput[ana].value.toString();\n    }\n    digital = [];\n    digit = {};\n    for(let di in msg.payload[Type].device[i].digitalInput){\n        digital.push({\n            name : msg.payload[Type].device[i].digitalInput[di].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].digitalInput[di].value.toString(),\n        })\n        digit[msg.payload[Type].device[i].digitalInput[di].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].digitalInput[di].value.toString();\n    }\n    deviceState = [];\n    deviceSta = {};\n    for(let ds in msg.payload[Type].device[i].deviceStatus){\n        deviceState.push({\n            name : msg.payload[Type].device[i].deviceStatus[ds].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].deviceStatus[ds].value.toString(),\n        })\n        deviceSta[msg.payload[Type].device[i].deviceStatus[ds].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].deviceStatus[ds].value.toString();\n    }\n    outState = [];\n    outputState = {};\n    for(let os in msg.payload[Type].device[i].outputStatus){\n        outState.push({\n            name : msg.payload[Type].device[i].outputStatus[os].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].outputStatus[os].value.toString(),\n        })\n        outputState[msg.payload[Type].device[i].outputStatus[os].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].outputStatus[os].value.toString();\n    }\n    alm = [];\n    alarms = {};\n    for(let al in msg.payload[Type].device[i].alarm){\n        alm.push({\n            name : msg.payload[Type].device[i].alarm[al].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].alarm[al].value.toString(),\n        })\n        alarms[msg.payload[Type].device[i].alarm[al].name.toString().replace(/\"/g,\"\").replace(/ /g,\"_\").replace(/-/g,\"_\")] = msg.payload[Type].device[i].alarm[al].value.toString(); \n    }\n    output[i] = {\n        name : msg.payload[Type].device[i].$.name,\n        adr : msg.payload[Type].device[i].$.adr,\n        analogInput : anal,\n        digitalInput : digit,\n        deviceStatus : deviceSta,\n        outputStatus : outputState,\n        alarm : alarms,\n    }\n    data[i] = {\n        name : msg.payload[Type].device[i].$.name.replace(/ /g,\"_\"),\n        adr : msg.payload[Type].device[i].$.adr,\n        uid : msg.payload[Type].device[i].$.uid,\n        lanid : msg.payload[Type].device[i].$.lanid,\n        analogInput : analog,\n        digitalInput : digital,\n        deviceStatus : deviceState,\n        outputStatus : outState,\n        alarm : alm,\n    }\n}\nif(Object.keys(output).length > 0){\n    msg.data = data;\n    msg.payload = output;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 3760,
        "wires": [
            [
                "d3ca251004beede4",
                "b7c185fe05c331ef"
            ]
        ]
    },
    {
        "id": "8d35b5e1c33f7092",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "data input",
        "func": "flow.set(\"Xweb\",msg.payload)\nmsg.Type = Object.keys(msg.payload)[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 3760,
        "wires": [
            [
                "8d40b257f2a26a48"
            ]
        ]
    },
    {
        "id": "8d40b257f2a26a48",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "Type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "xwebEVO",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "xweb500",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 3760,
        "wires": [
            [
                "b2f91dc46d907579"
            ],
            []
        ]
    },
    {
        "id": "37e115d70df5c407",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "filter room",
        "func": "var output = {};\n\n\nconst compare = (key) =>{\n    let data = {};\n    for(let a of Object.values(msg.parseData)){\n        for(let [k,v] of Object.entries(a)){\n            if(k == key){\n                data[key] = v;\n            }\n        }\n    }\n    return data;\n}\nvar ctrl = flow.get(\"Ctrl\")||{};\nfor(let [col,val] of Object.entries(msg.payload)){\n    output[col] = {};\n    for(let [k,v] of Object.entries(val)){\n        let test = compare(k);\n        let [key,value] = Object.entries(test)\n        // node.warn(key)\n        if(key){\n            if(k == key[0]){\n                output[col][key[0]] = key[1];\n            }\n        }\n    }\n}\nif(Object.keys(output).length > 0){\n    node.status({fill: \"green\",shape:\"ring\",text:\"Done\"})\n}\nflow.set(\"Ctrl\",output);\nglobal.set(\"Ctrl\",output);\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong.json\";\nmsg.payload = output\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 3840,
        "wires": [
            [
                "5d77d93d4233f59a",
                "fe82e8aef737a0e8",
                "8e38e03acad93057",
                "55beabf38d209ea7"
            ]
        ]
    },
    {
        "id": "a97c31816c7eb064",
        "type": "inject",
        "z": "3151ab83381d0f9c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/2 0-23 * * *",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3600,
        "wires": [
            [
                "81335eded55b7858"
            ]
        ]
    },
    {
        "id": "81335eded55b7858",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "config room",
        "func": "var list = {};\n\nlist[\"Cold_Storage_1\"] = {\n    6:{},\n    7:{},\n    8:{},\n    9:{},\n}\nlist[\"Cold_Storage_2\"] = {\n    10:{},\n    11:{},\n    12:{},\n}\nlist[\"Cold_Storage_3\"] = {\n    13:{},\n    14:{},\n    15:{},\n    16:{},\n}\nlist[\"Cold_Storage_4\"] = {\n    17:{},\n    18:{},\n}\n/*list[\"Cold_Storage_5\"] = {\n    23:{},\n    24:{},\n}*/\nlist[\"Cold_Storage_6\"] = {\n    20:{},\n    21:{},\n}\nlist[\"Cold_Storage_7\"] = {\n    19:{},\n}\nlist[\"Cold_Storage_8\"] = {\n    118:{},\n}\nlist[\"Cold_Storage_9\"] = {\n    115:{},\n    116:{},\n    117:{},\n}\nlist[\"Cold_Storage_10\"] = {\n    119:{}\n}\nlist[\"Cold_Storage_11\"] = {\n    120:{},\n    121:{},\n    122:{},\n    123:{},\n    124:{},\n}\nlist[\"Ante_Room_1\"] = {\n    25:{},\n}\nlist[\"Ante_Room_2\"] = {\n    26:{},\n}\nlist[\"Ante_Room_3\"] ={\n    127:{},\n}\nlist[\"Chill_Room\"] = {\n    38:{},\n}\nlist[\"Loading_1\"] = {\n    27:{},\n}\nlist[\"Loading_2\"] = {\n    28:{},\n}\nlist[\"Loading_3\"] = {\n    125:{},\n}\nlist[\"Loading_4\"] = {\n    126:{},\n}\nlist[\"Energy_Meter\"] = {\n    1:{},\n    2:{},\n    3:{},\n    4:{},\n    128:{},\n    129:{},\n}\nlist[\"Packing_Room_1-1\"] = {\n    22:{},\n}\nlist[\"Blast_Freezer_Room_1\"] = {\n    33:{},\n}\nlist[\"Blast_Freezer_Room_2\"] = {\n    34:{},\n}\nlist[\"Blast_Freezer_Room_3\"] = {\n    35:{},\n}\nlist[\"Blast_Freezer_Room_4\"] = {\n    39:{},\n}\nlist[\"Blast_Freezer_Room_5\"] = {\n    40:{},\n}\nlist[\"Blast_Freezer_Room_6\"] = {\n    41:{},\n}\nlist[\"Machine_Room_Ground_Floor\"] = {\n    29:{},\n    30:{},\n    31:{},\n    32:{},\n    96:{},\n    97:{},\n    98:{},\n    [\"172.16.46.23\"]:{},\n    [\"192.168.50.83:502:101\"]:{},\n    [\"192.168.50.84:502:102\"]:{},\n    [\"192.168.50.85:502:103\"]:{},\n    [\"192.168.50.86:502:104\"]:{},\n}\nlist[\"Machine_Room_2nd_Floor\"] = {\n    5:{},\n    156:{},\n    [\"172.16.46.23:502:1\"]:{},\n    [\"172.16.46.23:502:2\"]:{},\n    [\"192.168.50.155:502:52\"]:{},\n}\nmsg.payload = list;\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong_devicesList.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3600,
        "wires": [
            [
                "939c5459595e541e"
            ]
        ]
    },
    {
        "id": "5fb209595a599d3a",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 3600,
        "wires": []
    },
    {
        "id": "939c5459595e541e",
        "type": "file",
        "z": "3151ab83381d0f9c",
        "name": "List devicesJson",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 490,
        "y": 3600,
        "wires": [
            [
                "5fb209595a599d3a"
            ]
        ]
    },
    {
        "id": "e3f7fd14b97cc6a7",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/register",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 3380,
        "wires": [
            [
                "fcc13fe13536cfe0"
            ]
        ]
    },
    {
        "id": "1489126beeb122f3",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "Register",
        "info": "",
        "x": 320,
        "y": 3280,
        "wires": []
    },
    {
        "id": "8c1b217171421ce1",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1530,
        "y": 3380,
        "wires": []
    },
    {
        "id": "c87b767f1c611ece",
        "type": "bcrypt",
        "z": "3151ab83381d0f9c",
        "name": "",
        "action": "encrypt",
        "field": "password",
        "hash": "password",
        "rounds": 10,
        "x": 650,
        "y": 3380,
        "wires": [
            [
                "bded9950488a244b"
            ]
        ]
    },
    {
        "id": "d6bbdf9f1c7970a4",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/register",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 3320,
        "wires": [
            [
                "0e842847c33ffdf1"
            ]
        ]
    },
    {
        "id": "a4486ff0a9634cf7",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 3320,
        "wires": []
    },
    {
        "id": "bded9950488a244b",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "Encrypt",
        "rules": [
            {
                "t": "set",
                "p": "permission.password",
                "pt": "msg",
                "to": "password",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "permission.assignor",
                "pt": "msg",
                "to": "token.username",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 3380,
        "wires": [
            [
                "f2ff6349d43083ec"
            ]
        ]
    },
    {
        "id": "fcc13fe13536cfe0",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "filter register",
        "func": "var sendRegister = {};\nvar reciveToken = msg.req.headers['authorization'].split(' ')[1];\nlet level = msg.req.body.level;\nlet levelpermiss = \"\";\nlet users = \"\";\nif(!Number.isInteger(parseInt(level))){\n    levelpermiss = level;\n}\nconst ValidateUser = (user) =>{\n    let whSpace = String(user).match(/\\s/) === null;\n    let spacialChar = String(user).match(/[^\\w\\s]$/g) === null;\n    \n    return whSpace && spacialChar;\n}\nlet timestamp = new Date().getTime();\n\nlet userStatus = ValidateUser(msg.req.body.username);\nfor(let [name,store] of Object.entries(msg.req.body.permission)){\n    let permiss = name +\",\"+ store.join(\",\")\n    if(userStatus == true){\n        sendRegister = {\n            assignor : msg.req.body.assignor,\n            username : msg.req.body.username,\n            display : msg.req.body.display,\n            level : levelpermiss,\n            permission : permiss,\n            add_time : timestamp,\n            last_time : timestamp,\n            type : msg.req.body.type,\n        }\n    }\n}\nmsg.password = msg.req.body.password;\nmsg.permission = sendRegister;\nmsg.payload = reciveToken;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 3380,
        "wires": [
            [
                "afedee9720290307"
            ]
        ]
    },
    {
        "id": "afedee9720290307",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 510,
        "y": 3380,
        "wires": [
            [
                "c87b767f1c611ece"
            ]
        ]
    },
    {
        "id": "f2ff6349d43083ec",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\n\nif(msg.token.level !== \"General User\"){\n    switch(msg.token.level){\n        case \"Super Administrator\":\n            output = {\n                assignor : msg.token.username,\n                username : msg.permission.username,\n                display : msg.permission.display,\n                level : msg.permission.level,\n                permission : msg.permission.permission,\n                add_time : msg.permission.add_time,\n                last_time : msg.permission.last_time,\n                type : msg.permission.type,\n            }\n        break;\n        case \"Administrator\":\n            output = {\n                assignor : msg.token.username,\n                username : msg.permission.username,\n                display : msg.permission.display,\n                level : msg.permission.level,\n                permission : msg.permission.permission,\n                add_time : msg.permission.add_time,\n                last_time : msg.permission.last_time,\n                type : msg.permission.type,\n            }\n        break;\n        case \"Site Manager\":\n            if(msg.permission.level !== \"Administrator\"){\n                output = {\n                    assignor : msg.token.username,\n                    username : msg.permission.username,\n                    display : msg.permission.display,\n                    level : msg.permission.level,\n                    permission : msg.permission.permission,\n                    add_time : msg.permission.add_time,\n                    last_time : msg.permission.last_time,\n                    type : msg.permission.type,\n                }\n            }\n        break;\n        default:\n        break;\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 3380,
        "wires": [
            [
                "9098243a23cc2f58",
                "8cf2b5e390c8c1c6"
            ]
        ]
    },
    {
        "id": "9098243a23cc2f58",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "Query SQL",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    IF NOT EXISTS(\n\t    SELECT * FROM [dbo].[USERS_MANAGEMENTS] WHERE USERNAME = '{{{username}}}'\n    )\n    BEGIN\n    \tINSERT INTO USERS_MANAGEMENTS([USERNAME],[PASSWORD],[DISPLAY],[POSITION],[PERMISSION],[ASSIGNOR],[ADDTIME],[EDITTIME],[TYPE]) VALUES('{{{username}}}','{{{password}}}','{{{display}}}','{{{level}}}','{{{permission}}}','{{{assignor}}}','{{{add_time}}}','{{{last_time}}}','{{{type}}}')\n    END\n    ELSE\n    BEGIN\n        SELECT * FROM [dbo].[USERS_MANAGEMENTS] WHERE USERNAME = '{{{username}}}'\n    END\n{{/payload}}",
        "output": "str",
        "x": 1090,
        "y": 3380,
        "wires": [
            [
                "5e043bb0e8539ee4"
            ]
        ]
    },
    {
        "id": "0d0deb46f740a1fd",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nlet permiss = msg.permission.permission.split(',');\n\nif(Array.isArray(msg.payload) > 0){\n    output = {\n        status : false,\n        message : \"Username already exists\",\n    }\n}else{\n    output = {\n        assignor : msg.permission.assignor,\n        username : msg.permission.username,\n        display : msg.permission.display,\n        level : msg.permission.level,\n        permission : {\n            [permiss[0]] : permiss.slice(1),\n        },\n        added : msg.permission.add_time,\n        edited : msg.permission.last_time\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 3380,
        "wires": [
            [
                "8c1b217171421ce1"
            ]
        ]
    },
    {
        "id": "6cb34fcfeef0edf6",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "activity Added",
        "func": "var output = {};\nlet detail = msg.req.body.username + \"|\" + \"Added\";\nlet timestamp = new Date().getTime();\nif(Array.isArray(msg.payload) > 0){\n    output = {\n        username : msg.token.username,\n        level : msg.token.level,\n        event : \"Add user\",\n        state : \"Failed\",\n        details : {\n            message : \"Username already exists\",\n        },\n        timestamp : timestamp,\n    }\n}else{\n    output = {\n        username : msg.token.username,\n        level : msg.token.level,\n        event : \"Add user\",\n        state : \"Success\",\n        details : {\n            message : detail,\n        },\n        timestamp : timestamp,\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 3440,
        "wires": [
            [
                "7054200f65da13be"
            ]
        ]
    },
    {
        "id": "7054200f65da13be",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    INSERT INTO ACTIVE_USERS_SYSTEM([TIMESTAMP],[USERNAME],[POSITION],[EVENTS],[STATE],[DETAILS])\n    VALUES('{{{payload.timestamp}}}','{{{payload.username}}}','{{{payload.level}}}','{{{payload.event}}}','{{{payload.state}}}','{{{payload.details.message}}}')\n{{/payload}}",
        "output": "str",
        "x": 340,
        "y": 3440,
        "wires": [
            [
                "6554ed88dcc5e93d"
            ]
        ]
    },
    {
        "id": "6554ed88dcc5e93d",
        "type": "MSSQL",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "3ae68967e4149d33",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 500,
        "y": 3440,
        "wires": [
            []
        ]
    },
    {
        "id": "4131044d0b62068d",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/authen",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 2980,
        "wires": [
            [
                "ac40ed3527377a54"
            ]
        ]
    },
    {
        "id": "0caf1604713f9729",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 3040,
        "wires": []
    },
    {
        "id": "55343db2fc92a602",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    SELECT *\n\tFROM [dbo].[USERS_MANAGEMENTS] where [USERNAME] = '{{{username}}}'\n{{/payload}}",
        "output": "str",
        "x": 480,
        "y": 2980,
        "wires": [
            [
                "d730704679bf38af"
            ]
        ]
    },
    {
        "id": "ac40ed3527377a54",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.body",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "permission",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 2980,
        "wires": [
            [
                "55343db2fc92a602"
            ]
        ]
    },
    {
        "id": "f60f8421277f749c",
        "type": "bcrypt",
        "z": "3151ab83381d0f9c",
        "name": "",
        "action": "verify",
        "field": "payload.txt",
        "hash": "payload.hash",
        "rounds": 10,
        "x": 1190,
        "y": 2980,
        "wires": [
            [
                "529cacb044d2a47c"
            ]
        ]
    },
    {
        "id": "2133783bfbac4440",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "change msg",
        "rules": [
            {
                "t": "set",
                "p": "selects",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2980,
        "wires": [
            [
                "daafe557baccd87b"
            ]
        ]
    },
    {
        "id": "daafe557baccd87b",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "encrypt password",
        "func": "var output = {};\n\nfor(let i in msg.payload){\n    let pass = msg.permission.password;\n    output = {\n        txt : pass,\n        hash : msg.payload[i].PASSWORD,\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2980,
        "wires": [
            [
                "f60f8421277f749c"
            ]
        ]
    },
    {
        "id": "529cacb044d2a47c",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\n\nif(msg.match == true){\n    if(msg.permission.username == \"AdminDX\"){\n        for(let i of msg.selects){\n            let permiss = i.PERMISSION.split(\",\");\n            output = {\n                status : true,\n                assignor : i.ASSIGNOR.trim(),\n                username : i.USERNAME.trim(),\n                display : i.DISPLAY.trim(),\n                level : i.POSITION.trim(),\n                permission : {\n                    [permiss[0]] : permiss.slice(1),\n                },\n            }\n        }\n    }else{\n        for(let i of msg.selects){\n            let permiss = i.PERMISSION.split(\",\");\n            output = {\n                status : true,\n                assignor : i.ASSIGNOR.trim(),\n                username : i.USERNAME.trim(),\n                display : i.DISPLAY.trim(),\n                level : i.POSITION.trim(),\n                permission : {\n                    [permiss[0]] : permiss.slice(1),\n                }\n            }\n        }\n    }\n}else{\n    output = {\n        status: false,\n        message: 'Please check your username and password!!'\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 3040,
        "wires": [
            [
                "3e2d9c520d497a31",
                "bb5341463228e98b"
            ]
        ]
    },
    {
        "id": "b720648893fa1e67",
        "type": "jwt sign",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": "HS256",
        "exp": "1y",
        "jwkurl": "",
        "jwkkid": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "payload",
        "x": 460,
        "y": 3040,
        "wires": [
            [
                "ff530b6c5e0e09ec"
            ]
        ]
    },
    {
        "id": "3e2d9c520d497a31",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "change msg",
        "rules": [
            {
                "t": "set",
                "p": "response",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 3040,
        "wires": [
            [
                "b720648893fa1e67"
            ]
        ]
    },
    {
        "id": "ff530b6c5e0e09ec",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {}\nvar parseActive = {};\nlet rols = msg.selects[0].POSITION.trim();\nlet username = msg.selects[0].USERNAME.trim();\nlet key = rols +\"_\"+ username;\nif(msg.match == true){\n    output = {\n        token : msg.payload,\n        username : username,\n        display : msg.selects[0].DISPLAY.trim(),\n        level : rols,\n        status : \"ok\",\n    }\n    parseActive = {\n        token : msg.payload,\n        username : username,\n        display : msg.selects[0].DISPLAY.trim(),\n        level : rols,\n        status : \"ok\",\n    }\n}else{\n    output = {\n        status : \"error\",\n        message: 'Please check your username and password!!',\n    }\n    parseActive = {\n        status : \"error\",\n        message: 'Please check your username and password!!',\n        username : username,\n        display : msg.selects[0].DISPLAY.trim(),\n        level : rols,\n    }\n}\nmsg.parseActive = parseActive;\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 3040,
        "wires": [
            [
                "0caf1604713f9729",
                "c218950d9d922bed",
                "9e6503e8fecdb06a"
            ]
        ]
    },
    {
        "id": "3b2fc79db0525c2a",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "LOGIN",
        "info": "",
        "x": 330,
        "y": 2940,
        "wires": []
    },
    {
        "id": "e06ce9d9c9a43cc7",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "secret",
        "info": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "x": 470,
        "y": 2940,
        "wires": []
    },
    {
        "id": "c218950d9d922bed",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "activity logs login",
        "func": "var output = {};\nif(msg.parseActive.status == \"ok\"){\n    output = {\n        detail : {\n            message : \"Sign In\",\n        },\n        event : \"Sign In\",\n        level : msg.parseActive.level,\n        state : \"Success\",\n        timestamp : new Date().getTime(),\n        username : msg.payload.username,\n    }\n}else{\n    output = {\n        detail : {\n            message : \"Invalid Password\",\n        },\n        event : \"Sign In\",\n        level : msg.parseActive.level,\n        state : \"Failed\",\n        timestamp : new Date().getTime(),\n        username : msg.req.body.username,\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 3080,
        "wires": [
            [
                "77dfd4317fab61d9"
            ]
        ]
    },
    {
        "id": "77dfd4317fab61d9",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    INSERT INTO ACTIVE_USERS_SYSTEM([TIMESTAMP],[USERNAME],[POSITION],[EVENTS],[STATE],[DETAILS])\n    VALUES('{{{payload.timestamp}}}','{{{payload.username}}}','{{{payload.level}}}','{{{payload.event}}}','{{{payload.state}}}','{{{payload.detail.message}}}')\n{{/payload}}",
        "output": "str",
        "x": 940,
        "y": 3080,
        "wires": [
            [
                "8789183f331e9efa"
            ]
        ]
    },
    {
        "id": "785646842b93f163",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "e34996d0775db7a4"
            ]
        ]
    },
    {
        "id": "e34996d0775db7a4",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 280,
        "wires": [
            [
                "5fc24dc61027c29c"
            ],
            [
                "4bb69fa1e14ff8b0"
            ]
        ]
    },
    {
        "id": "4bb69fa1e14ff8b0",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.payload = [\n    \"View the storeName at => /api/overviews => /api/data?name=[storeName]\",\n    \"View the point at => /api/points => /api/data?name=[storeName]&point=[pointName]\"\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 320,
        "wires": [
            [
                "0a2a600e1c429e4b"
            ]
        ]
    },
    {
        "id": "5fc24dc61027c29c",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.filename = 'D:\\\\Dixell\\\\system\\\\Config\\\\'+ msg.payload.name +\".json\";\nmsg.path = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 260,
        "wires": [
            [
                "6573021806b4c9bf"
            ]
        ]
    },
    {
        "id": "6573021806b4c9bf",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "stored file",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 560,
        "y": 220,
        "wires": [
            [
                "8c80af13d517cf44"
            ]
        ]
    },
    {
        "id": "8c80af13d517cf44",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 650,
        "y": 260,
        "wires": [
            [
                "db3936a7eccf2a74"
            ]
        ]
    },
    {
        "id": "b92f88cec4889520",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "\nvar output = {};\nfor(const [k,v] of Object.entries(msg.payload)){\n    if(k == msg.path.point){\n        // node.warn(k +\"=>\"+ msg.path.point)\n        output = v;\n    }\n}\n\nif(!msg.path.point){\n    output = {\n        message : \"Look at => /api/points => /api/data?name=[storeName]&point=[pointName]\"\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 260,
        "wires": [
            [
                "d634b6aa51cb0b29"
            ]
        ]
    },
    {
        "id": "0a2a600e1c429e4b",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 320,
        "wires": []
    },
    {
        "id": "d634b6aa51cb0b29",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 260,
        "wires": [
            [
                "0a2a600e1c429e4b"
            ],
            [
                "0a2a600e1c429e4b"
            ]
        ]
    },
    {
        "id": "db3936a7eccf2a74",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "path.point",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "b92f88cec4889520"
            ],
            [
                "3dee60241796166b"
            ]
        ]
    },
    {
        "id": "3dee60241796166b",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = [];\nfor(const [k,v] of Object.entries(msg.payload)){\n    if(k !== \"id\" && k !== \"name\"){\n        output.push(k);\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 300,
        "wires": [
            [
                "0a2a600e1c429e4b"
            ]
        ]
    },
    {
        "id": "5fb661f9930c86ed",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/points",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "a4aba9ae1e57bea8"
            ]
        ]
    },
    {
        "id": "ef8b2f533c439082",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 480,
        "wires": []
    },
    {
        "id": "ad487ee0d977fb1b",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.filename = 'D:\\\\Dixell\\\\system\\\\Config\\\\'+ msg.payload.name +\"_points.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 400,
        "wires": [
            [
                "29fd231e02c9668f"
            ]
        ]
    },
    {
        "id": "29fd231e02c9668f",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "Point file",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 620,
        "y": 400,
        "wires": [
            [
                "eb702056ce6e3fc8"
            ]
        ]
    },
    {
        "id": "eb702056ce6e3fc8",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 770,
        "y": 400,
        "wires": [
            [
                "ef8b2f533c439082"
            ]
        ]
    },
    {
        "id": "a4aba9ae1e57bea8",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 460,
        "wires": [
            [
                "ad487ee0d977fb1b"
            ],
            [
                "e50964317860d81d"
            ]
        ]
    },
    {
        "id": "e50964317860d81d",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.payload = \"View the storeName at => /api/overviews => /api/points?name=[storeName]\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 480,
        "wires": [
            [
                "ef8b2f533c439082"
            ]
        ]
    },
    {
        "id": "fbb9a9c3f8372662",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/points_list",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "c34885fe6c803b7b"
            ]
        ]
    },
    {
        "id": "c34885fe6c803b7b",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload.device",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 600,
        "wires": [
            [
                "6d6cd0b56bb14fbb"
            ],
            [
                "da997093d1f5e9e8"
            ]
        ]
    },
    {
        "id": "2d7c237ccec85c85",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 660,
        "wires": []
    },
    {
        "id": "6d6cd0b56bb14fbb",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "is not null",
        "func": "msg.url = flow.get(\"Setting\").url;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 560,
        "wires": [
            [
                "f367243a294073ba"
            ]
        ]
    },
    {
        "id": "f367243a294073ba",
        "type": "http request",
        "z": "3151ab83381d0f9c",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{url}}}api?action=points_list&username=Admin&password=Admin&device={{{payload.device}}}&values=yes",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 610,
        "y": 560,
        "wires": [
            [
                "1e30606a7a839827"
            ]
        ]
    },
    {
        "id": "1e30606a7a839827",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 770,
        "y": 560,
        "wires": [
            [
                "d0566f5527ec91ad",
                "63b2b7e3b3f8710b"
            ]
        ]
    },
    {
        "id": "d0566f5527ec91ad",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "points_list",
        "func": "var output = [];\nfor(let i of msg.payload.points){\n    output.push({\n        pointId : i.id,\n        pointName : i.label,\n    })\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 560,
        "wires": [
            [
                "2d7c237ccec85c85"
            ]
        ]
    },
    {
        "id": "da997093d1f5e9e8",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "is null",
        "func": "msg.payload = [\n    \"View storeName at => /api/stored\",\n    \"View deviceId at => /api/devices_list?name=[storeName]\",\n    \"This usage at => /api/points_list?name=[storeName]&device=[deviceId]\"\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 660,
        "wires": [
            [
                "2d7c237ccec85c85"
            ]
        ]
    },
    {
        "id": "27b07bf8311790e3",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "api/list_devices",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 860,
        "wires": [
            [
                "8b3647162c8dc2d9"
            ]
        ]
    },
    {
        "id": "668d216f85c7a080",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 880,
        "wires": []
    },
    {
        "id": "8b3647162c8dc2d9",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 860,
        "wires": [
            [
                "aafa1d0fe95689c3"
            ],
            [
                "75cef668f197c13e"
            ]
        ]
    },
    {
        "id": "75cef668f197c13e",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "name is null",
        "func": "msg.payload = [\n    \"View storeName at => /api/overviews => /api/list_devices?name=[storeName]\"\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 880,
        "wires": [
            [
                "668d216f85c7a080"
            ]
        ]
    },
    {
        "id": "aafa1d0fe95689c3",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "not null",
        "func": "msg.filename = 'D:\\\\Dixell\\\\system\\\\Config\\\\'+ msg.payload.name +\"_All.json\";\nmsg.path = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 780,
        "wires": [
            [
                "01e4fb83c204032c"
            ]
        ]
    },
    {
        "id": "01e4fb83c204032c",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "List_Devices",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 610,
        "y": 780,
        "wires": [
            [
                "3494a8bd92da7f77"
            ]
        ]
    },
    {
        "id": "3494a8bd92da7f77",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 770,
        "y": 780,
        "wires": [
            [
                "668d216f85c7a080",
                "c7e063d709b98c03"
            ]
        ]
    },
    {
        "id": "68805e2ba97033af",
        "type": "catch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "scope": [
            "01e4fb83c204032c"
        ],
        "uncaught": false,
        "x": 490,
        "y": 920,
        "wires": [
            [
                "aa3854899c952899",
                "41c6800566f64995"
            ]
        ]
    },
    {
        "id": "aa3854899c952899",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output;\nif(msg.error.message){\n    output = \"Please check the name and information,Continually this no such file or directory!!!\";\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 920,
        "wires": [
            [
                "668d216f85c7a080"
            ]
        ]
    },
    {
        "id": "41c6800566f64995",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 980,
        "wires": []
    },
    {
        "id": "63b2b7e3b3f8710b",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 520,
        "wires": []
    },
    {
        "id": "4764a78a055a403b",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1000,
        "wires": []
    },
    {
        "id": "dfcc0e0f2f3601ab",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "test/list_devices",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1160,
        "wires": [
            [
                "0e67df3102e329ec"
            ]
        ]
    },
    {
        "id": "e3482e0bcdc03c77",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 1180,
        "wires": []
    },
    {
        "id": "0e67df3102e329ec",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 1160,
        "wires": [
            [
                "97eef21a62c8bd12"
            ],
            [
                "23485f9dfac601a8"
            ]
        ]
    },
    {
        "id": "23485f9dfac601a8",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "name is null",
        "func": "msg.payload = [\n    \"View storeName at => /api/overviews => /api/list_devices?name=[storeName]\"\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1180,
        "wires": [
            [
                "e3482e0bcdc03c77"
            ]
        ]
    },
    {
        "id": "97eef21a62c8bd12",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "not null",
        "func": "msg.filename = 'D:\\\\Dixell\\\\system\\\\Config\\\\'+ msg.payload.name +\"_All.json\";\nmsg.path = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1080,
        "wires": [
            [
                "f2238fa74f2c004a"
            ]
        ]
    },
    {
        "id": "f2238fa74f2c004a",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "List_Devices",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 650,
        "y": 1080,
        "wires": [
            [
                "70b3c20cd83e21d2"
            ]
        ]
    },
    {
        "id": "70b3c20cd83e21d2",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 710,
        "y": 1020,
        "wires": [
            [
                "d35a4b3fee402a87",
                "4764a78a055a403b"
            ]
        ]
    },
    {
        "id": "0d138c082a9c6355",
        "type": "catch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "scope": [
            "f2238fa74f2c004a"
        ],
        "uncaught": false,
        "x": 530,
        "y": 1220,
        "wires": [
            [
                "eecde46259e188a8",
                "4f44674b5e9715b6"
            ]
        ]
    },
    {
        "id": "eecde46259e188a8",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output;\nif(msg.error.message){\n    output = \"Please check the name and information,Continually this no such file or directory!!!\";\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1220,
        "wires": [
            [
                "e3482e0bcdc03c77"
            ]
        ]
    },
    {
        "id": "4f44674b5e9715b6",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1280,
        "wires": []
    },
    {
        "id": "d35a4b3fee402a87",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "for(let i in msg.payload.Cold_Room) {\n    room = msg.payload.Cold_Room[i]._attr.name.replace(\"Cold_Storage_\" , \"\")\n    \n    if(room.match(/-/g)) {\n        room = room.slice(0 , -2)\n    }\n\n    if(!msg.payload[\"Cold_Storage_\" + room]) {\n        msg.payload[\"Cold_Storage_\" + room] = {}\n    }\n    msg.payload[\"Cold_Storage_\" + room][i] = msg.payload.Cold_Room[i]\n}\n\nfor(let i in msg.payload.Ante_Room) {\n    room = msg.payload.Ante_Room[i]._attr.name.replace(\"Ante_Room.\" , \"\")\n    \n    if(room.match(/-/g)) {\n        room = room.slice(0 , -2)\n    }\n    \n    if(room.match(/Ante_Room_/g)) {\n        room = room.replace(\"Ante_Room_\" , \"\")\n    }\n\n    if(!msg.payload[\"Ante_Room_\" + room]) {\n        msg.payload[\"Ante_Room_\" + room] = {}\n    }\n    msg.payload[\"Ante_Room_\" + room][i] = msg.payload.Ante_Room[i]\n}\n\nfor(let i in msg.payload.Blast_Room) {\n    room = msg.payload.Blast_Room[i]._attr.name\n    \n    if(!msg.payload[room]) {\n        msg.payload[room] = {}\n    }\n    msg.payload[room][i] = msg.payload.Blast_Room[i]\n}\n\n\nfor(let i in msg.payload.Loading_Room) {\n    room = msg.payload.Loading_Room[i]._attr.name\n    \n    if(!msg.payload[room]) {\n        msg.payload[room] = {}\n    }\n    msg.payload[room][i] = msg.payload.Loading_Room[i]\n}\n\ndelete msg.payload.Loading_Room\ndelete msg.payload.Cold_Room\ndelete msg.payload.Ante_Room\ndelete msg.payload.Blast_Room\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1020,
        "wires": [
            [
                "e3482e0bcdc03c77"
            ]
        ]
    },
    {
        "id": "a8c91274b826faf2",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 840,
        "wires": []
    },
    {
        "id": "f21f284b435bef2b",
        "type": "inject",
        "z": "3151ab83381d0f9c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 740,
        "wires": [
            [
                "01e4fb83c204032c"
            ]
        ]
    },
    {
        "id": "a21151aedf4dac9e",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Convert By P' TON",
        "func": "msg.payload.Test = {}\n// msg.payload.Test.Cold_Room ={}\n// msg.payload.Test.Ante_Room ={}\n// msg.payload.Test.Chill_Room ={}\n// msg.payload.Test.Packing_Room ={}\n// msg.payload.Test.Loading_Room ={}\n// msg.payload.Test.Blast_Room ={}\n\n//Custom\n\n// msg.payload.Ante_Room[25]._attr.name =\"Ante_Room_1\"\n// msg.payload.Ante_Room[26]._attr.name =\"Ante_Room_2\"\nfor(const [t,v] of Object.entries(msg.payload.Cold_Room)){\n    // msg.payload.Test[t] = v\n    let newName = v._attr.name.split(\"-\")[0]\n    msg.payload.Test[newName] = msg.payload.Test[newName] ||{}\n    // msg.payload.Test.Cold_Room[newName]=msg.payload.Test.Cold_Room[newName]||{}\n    msg.payload.Test[newName][t] = v\n}\n\nmsg.payload.Ante_Room_1 = msg.payload[\"Ante_Room.1-1\"]\nmsg.payload.Ante_Room_2 = msg.payload[\"Ante_Room.1-2\"]\ndelete msg.payload[\"Ante_Room.1-1\"]\ndelete msg.payload[\"Ante_Room.1-2\"]\n\nfor(const [t,v] of Object.entries(msg.payload.Ante_Room)){\n    // msg.payload.Test[t] = v\n    let newName = v._attr.name\n    // let newName = v._attr.name.split(\"-\")[0]\n    // if(newName ===\"Ante_Room.1\"){\n        // newName = newName.replace(\".1\",`_${v._attr.name.split(\"-\")[1]}`)\n        // newName = newName + v._attr.name.split(\"-\")[1]\n    // }\n    msg.payload.Test[newName] = msg.payload.Test[newName] ||{}\n    // msg.payload.Test.Ante_Room[newName]=msg.payload.Test.Ante_Room[newName]||{}\n    msg.payload.Test[newName][t] = v\n}\n\nfor(const [t,v] of Object.entries(msg.payload.Chill_Room)){\n    // msg.payload.Test[t] = v\n    let newName = v._attr.name.split(\"-\")[0]\n    msg.payload.Test[newName] = msg.payload.Test[newName] ||{}\n    // msg.payload.Test.Chill_Room[newName]=msg.payload.Test.Chill_Room[newName]||{}\n    msg.payload.Test[newName][t] = v\n}\nfor(const [t,v] of Object.entries(msg.payload.Packing_Room)){\n    // msg.payload.Test[t] = v\n    let newName = v._attr.name.split(\"-\")[0]\n    msg.payload.Test[newName] = msg.payload.Test[newName] ||{}\n    // msg.payload.Test.Packing_Room[newName]=msg.payload.Test.Packing_Room[newName]||{}\n    msg.payload.Test[newName][t] = v\n}\n\nfor(const [t,v] of Object.entries(msg.payload.Loading_Room)){\n    // msg.payload.Test[t] = v\n    let newName = v._attr.name.split(\"-\")[0]\n    msg.payload.Test[newName] = msg.payload.Test[newName] ||{}\n    // msg.payload.Test.Loading_Room[newName]=msg.payload.Test.Loading_Room[newName]||{}\n    msg.payload.Test[newName][t] = v\n}\nfor(const [t,v] of Object.entries(msg.payload.Blast_Room)){\n    // msg.payload.Test[t] = v\n    let newName = v._attr.name.split(\"-\")[0]\n    msg.payload.Test[newName] = msg.payload.Test[newName] ||{}\n    // msg.payload.Test.Blast_Room[newName]=msg.payload.Test.Blast_Room[newName]||{}\n    msg.payload.Test[newName][t] = v\n}\n// msg.payload.Test.Machine_Room ={}\nmsg.payload.Test.EVAP_Condenser = msg.payload[\"FanEvap.Condenser\"]\nmsg.payload.Test.Inter = msg.payload.INTER\nmsg.payload.Test.Vessel= msg.payload.VESSEL\nmsg.payload.Test.NH3_Detector= msg.payload.NH3_Detector\nmsg.payload.Test.Energy_Meter= msg.payload.EnergyMeter\nmsg.payload.Test.Compressor= msg.payload.Compressor\n\nmsg.payload = msg.payload.Test\n\nmsg.payload[\"Packing_Room_1-1\"]={\n    33:msg.payload.Blast_Freezer_1[\"33\"],\n    34:msg.payload.Blast_Freezer_2[\"34\"],\n    35:msg.payload.Blast_Freezer_3[\"35\"],\n    38:msg.payload.Packing_1_1[\"38\"]\n}\n\nmsg.payload[\"Packing_Room_1-2\"]={\n    39:msg.payload.Blast_Freezer_4[\"39\"],\n    40:msg.payload.Blast_Freezer_5[\"40\"],\n    41:msg.payload.Blast_Freezer_6[\"41\"]\n}\nmsg.payload[\"Machine_Room_Ground_Floor\"]={\n    29:msg.payload.NH3_Detector[\"29\"],\n    30:msg.payload.NH3_Detector[\"30\"],\n    31:msg.payload.NH3_Detector[\"31\"],\n    32:msg.payload.NH3_Detector[\"32\"],\n    96:msg.payload.Inter[\"96\"],\n    97:msg.payload.Vessel[\"97\"],\n    98:msg.payload.Vessel[\"98\"],\n    \"172.16.46.23\":msg.payload.Vessel[\"172.16.46.23\"],\n    \"192.168.50.83:502:101\":msg.payload.Compressor[\"192.168.50.83:502:101\"],\n    \"192.168.50.155:502:51\":msg.payload.Compressor[\"192.168.50.155:502:51\"],\n    \"192.168.50.155:502:59\":msg.payload.Compressor[\"192.168.50.155:502:59\"],\n}\nmsg.payload[\"Machine_Room_2nd_Floor\"]={\n    5:msg.payload.EVAP_Condenser[\"5\"],\n    \"172.16.46.23:502:1\":msg.payload.EVAP_Condenser[\"172.16.46.23:502:1\"],\n    \"172.16.46.23:502:2\":msg.payload.EVAP_Condenser[\"172.16.46.23:502:2\"],\n    \"192.168.50.155:502:52\":msg.payload.EVAP_Condenser[\"192.168.50.155:502:52\"],\n    156:msg.payload.EVAP_Condenser[\"156\"]\n}\ndelete msg.payload.Blast_Freezer_1\ndelete msg.payload.Blast_Freezer_2\ndelete msg.payload.Blast_Freezer_3\ndelete msg.payload.Blast_Freezer_4\ndelete msg.payload.Blast_Freezer_5\ndelete msg.payload.Blast_Freezer_6\ndelete msg.payload.EVAP_Condenser\ndelete msg.payload.NH3_Detector\ndelete msg.payload.Compressor\ndelete msg.payload.Inter\ndelete msg.payload.Vessel\ndelete msg.payload.Cold_Storage_5\ndelete msg.payload.Packing_1_1\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "31c80cd9e6ceb22f",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/logout",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 3160,
        "wires": [
            [
                "f414bd805ba93a93"
            ]
        ]
    },
    {
        "id": "59aec14358228266",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 3160,
        "wires": []
    },
    {
        "id": "f414bd805ba93a93",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var reciveToken = msg.req.headers['authorization'].split(' ')[1];\nmsg.payload = reciveToken;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 3160,
        "wires": [
            [
                "9810506484dbf862"
            ]
        ]
    },
    {
        "id": "9810506484dbf862",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 470,
        "y": 3160,
        "wires": [
            [
                "aff574dd0d4fcbe5"
            ]
        ]
    },
    {
        "id": "aff574dd0d4fcbe5",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nif(msg.token.level){\n    if(msg.token.status == true){\n        output = {\n            status : true,\n            message : \"Logout success\"\n        }\n    }else{\n        output = {\n            status : false,\n            message : \"Logout failed\"\n        }\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 3160,
        "wires": [
            [
                "59aec14358228266",
                "e68d6426f32352b4"
            ]
        ]
    },
    {
        "id": "e68d6426f32352b4",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Logout Activity",
        "func": "var output = {};\nlet timestamp = new Date().getTime();\nif(msg.payload.status == true){\n    output = {\n        timestamp : timestamp,\n        username : msg.token.username,\n        level : msg.token.level,\n        state : \"Success\",\n        event : \"Sign out\",\n        details :{\n            message : \"Sign out\",\n        }\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 3120,
        "wires": [
            [
                "83e79988b5cd7f1d"
            ]
        ]
    },
    {
        "id": "f0fd1e6c2bf80913",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "Logout",
        "info": "",
        "x": 310,
        "y": 3120,
        "wires": []
    },
    {
        "id": "83e79988b5cd7f1d",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    INSERT INTO ACTIVE_USERS_SYSTEM([TIMESTAMP],[USERNAME],[POSITION],[EVENTS],[STATE],[DETAILS])\n    VALUES('{{{payload.timestamp}}}','{{{payload.username}}}','{{{payload.level}}}','{{{payload.event}}}','{{{payload.state}}}','{{{payload.details.message}}}')\n{{/payload}}",
        "output": "str",
        "x": 940,
        "y": 3120,
        "wires": [
            [
                "c14363f62f24c4a4"
            ]
        ]
    },
    {
        "id": "5e043bb0e8539ee4",
        "type": "MSSQL",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "a5afa25e5459d2e2",
        "name": "user",
        "query": "",
        "outField": "payload",
        "x": 1250,
        "y": 3380,
        "wires": [
            [
                "0d0deb46f740a1fd",
                "6cb34fcfeef0edf6"
            ]
        ]
    },
    {
        "id": "d730704679bf38af",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 660,
        "y": 2980,
        "wires": [
            [
                "2133783bfbac4440"
            ]
        ]
    },
    {
        "id": "8789183f331e9efa",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1120,
        "y": 3080,
        "wires": [
            []
        ]
    },
    {
        "id": "145c4d184cf0d772",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/points",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1400,
        "wires": [
            [
                "cf7f400eee47c712"
            ]
        ]
    },
    {
        "id": "ce5631db57dc8cf0",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 1420,
        "wires": []
    },
    {
        "id": "f9bd69a0364e1317",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.filename = 'C:\\\\Users\\\\Onisuka\\\\AppData\\\\Roaming\\\\npm\\\\'+ msg.payload.name +\"_points.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1340,
        "wires": [
            [
                "5481b4679fbb6f67"
            ]
        ]
    },
    {
        "id": "5481b4679fbb6f67",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "Point file",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 1340,
        "wires": [
            [
                "5d903042b5aa9e6d"
            ]
        ]
    },
    {
        "id": "5d903042b5aa9e6d",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 810,
        "y": 1340,
        "wires": [
            [
                "ce5631db57dc8cf0"
            ]
        ]
    },
    {
        "id": "cf7f400eee47c712",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1400,
        "wires": [
            [
                "f9bd69a0364e1317"
            ],
            [
                "cc30eb775d85bae5"
            ]
        ]
    },
    {
        "id": "cc30eb775d85bae5",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.payload = \"View the storeName at => /api/overviews => /api/points?name=[storeName]\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1420,
        "wires": [
            [
                "ce5631db57dc8cf0"
            ]
        ]
    },
    {
        "id": "695b05df192230cb",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/points_list",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1540,
        "wires": [
            [
                "70b2b418cd1fad04"
            ]
        ]
    },
    {
        "id": "70b2b418cd1fad04",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload.device",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 1540,
        "wires": [
            [
                "ef3e63a6c9507dec"
            ],
            [
                "7087c1dfc0851158"
            ]
        ]
    },
    {
        "id": "26c2c08cf49dca39",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 1600,
        "wires": []
    },
    {
        "id": "ef3e63a6c9507dec",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "is not null",
        "func": "msg.url = flow.get(\"Setting\").url;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1500,
        "wires": [
            [
                "182f3b7a992664ac"
            ]
        ]
    },
    {
        "id": "182f3b7a992664ac",
        "type": "http request",
        "z": "3151ab83381d0f9c",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{url}}}api?action=points_list&username=Admin&password=Admin&device={{{payload.device}}}&values=yes",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 1500,
        "wires": [
            [
                "aa1bf85b6702b991"
            ]
        ]
    },
    {
        "id": "aa1bf85b6702b991",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 830,
        "y": 1500,
        "wires": [
            [
                "8fab7ea9d6dd2054",
                "3a6330504697f4fd"
            ]
        ]
    },
    {
        "id": "8fab7ea9d6dd2054",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "points_list",
        "func": "var output = [];\nfor(let i of msg.payload.points){\n    output.push({\n        pointId : i.id,\n        pointName : i.label,\n    })\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1500,
        "wires": [
            [
                "26c2c08cf49dca39"
            ]
        ]
    },
    {
        "id": "7087c1dfc0851158",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "is null",
        "func": "msg.payload = [\n    \"View storeName at => /api/stored\",\n    \"View deviceId at => /api/devices_list?name=[storeName]\",\n    \"This usage at => /api/points_list?name=[storeName]&device=[deviceId]\"\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1600,
        "wires": [
            [
                "26c2c08cf49dca39"
            ]
        ]
    },
    {
        "id": "3a6330504697f4fd",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1460,
        "wires": []
    },
    {
        "id": "27cf36c0d8fa8719",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/users/update",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2620,
        "wires": [
            [
                "68bcccee90ca4d6d"
            ]
        ]
    },
    {
        "id": "79e1157b8097aa4d",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    SELECT * FROM [dbo].[USERS_MANAGEMENTS]\n{{/payload}}",
        "output": "str",
        "x": 500,
        "y": 2620,
        "wires": [
            [
                "b19cab06fa87db27"
            ]
        ]
    },
    {
        "id": "68bcccee90ca4d6d",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var list = {\n    level : [\n        {\n            name : \"Administrator\",\n        },\n        {\n            name : \"Site Manager\",\n        },\n        {\n            name : \"General User\",\n        },\n        {\n            name : \"Super Administrator\"\n        }\n    ],\n    type : [\n        {\n            type : \"Read Only\",\n        },\n        {\n            type : \"Read/Write\",\n        }\n    ]\n}\n\nmsg.list = list;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2620,
        "wires": [
            [
                "79e1157b8097aa4d"
            ]
        ]
    },
    {
        "id": "c7f69b85b6487f8a",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "change msg",
        "rules": [
            {
                "t": "set",
                "p": "parseData",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 2620,
        "wires": [
            [
                "8cbeab94075d476e"
            ]
        ]
    },
    {
        "id": "8cbeab94075d476e",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var reciveToken = msg.req.headers['authorization'].split(' ')[1]\nmsg.payload = reciveToken;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2620,
        "wires": [
            [
                "12d839a285e72a1e"
            ]
        ]
    },
    {
        "id": "12d839a285e72a1e",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 1170,
        "y": 2620,
        "wires": [
            [
                "77465166a99467f0"
            ]
        ]
    },
    {
        "id": "77465166a99467f0",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.filename = 'D:\\\\Dixell\\\\system\\\\Config\\\\'+ Object.keys(msg.token.permission) +\"_devicesList.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2660,
        "wires": [
            [
                "9d32d2bafd2abf55"
            ]
        ]
    },
    {
        "id": "9d32d2bafd2abf55",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "stored file",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 2660,
        "wires": [
            [
                "638140061b7d8adb"
            ]
        ]
    },
    {
        "id": "638140061b7d8adb",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 2660,
        "wires": [
            [
                "cd838e8860af781d"
            ]
        ]
    },
    {
        "id": "cd838e8860af781d",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nvar adminStore = [];\nfor(let key of Object.keys(msg.payload)){\n    adminStore.push(key);\n}\nlet levelAll = [];\nlet levelSite = [];\nlet levelUsers = [];\nlet levelAd = [];\nlet typeAll = [];\n\nfor(let i of msg.list.level){\n    levelAll.push(i.name);\n    if(i.name !== \"Super Administrator\"){\n        levelAd.push(i.name);\n    }\n    if(i.name !== \"Administrator\" && i.name !== \"Super Administrator\"){\n        levelSite.push(i.name);\n    }\n    if(i.name !== \"Administrator\" && i.name !== \"Site Manager\" && i.name !== \"Super Administrator\"){\n        levelUsers.push(i.name);\n    }\n}\nfor(let t of msg.list.type){\n    typeAll.push(t.type);\n}\nlet arrSuper = [];\nlet arr = [];\nlet siteArr = [];\nlet userArr = [];\nfor(let i in msg.parseData){\n    let role = msg.token.level;\n    let permiss = msg.parseData[i].PERMISSION.split(\",\")\n    let assignor = msg.parseData[i].ASSIGNOR.trim();\n    let level = msg.parseData[i].POSITION.trim();\n    let user = msg.parseData[i].USERNAME.trim();\n    if(level !== \"0\" && level !== \"1\"){\n        role = level;\n    }\n    if(role){\n        if(role == \"Super Administrator\"){\n            if(user === msg.token.username){\n                arrSuper.push({\n                    display : msg.parseData[i].DISPLAY,\n                    username : msg.parseData[i].USERNAME.trim(),\n                    level : role,\n                    permission : {\n                        [permiss[0]] : permiss.slice(1),\n                    },\n                    type : msg.parseData[i].TYPE,\n                    add : parseInt(msg.parseData[i].ADDTIME),\n                    edit : parseInt(msg.parseData[i].EDITTIME),\n                })\n            }\n        }else{\n            if(role !== \"Super Administrator\"){\n                arrSuper.push({\n                    display : msg.parseData[i].DISPLAY,\n                    username : msg.parseData[i].USERNAME.trim(),\n                    level : role,\n                    permission : {\n                        [permiss[0]] : permiss.slice(1),\n                    },\n                    type : msg.parseData[i].TYPE,\n                    add : parseInt(msg.parseData[i].ADDTIME),\n                    edit : parseInt(msg.parseData[i].EDITTIME),\n                })\n            }\n        }\n        if(role == \"Administrator\"){\n            if(user == msg.token.username){\n                arr.push({\n                    display : msg.parseData[i].DISPLAY,\n                    username : user,\n                    level : role,\n                    permission : {\n                        [permiss[0]] : permiss.slice(1),\n                    },\n                    type : msg.parseData[i].TYPE,\n                    add : parseInt(msg.parseData[i].ADDTIME),\n                    edit : parseInt(msg.parseData[i].EDITTIME),\n                })\n            }else{\n                if(assignor === msg.token.username){\n                    arr.push({\n                        display : msg.parseData[i].DISPLAY,\n                        username : msg.parseData[i].USERNAME.trim(),\n                        level : role,\n                        permission : {\n                            [permiss[0]] : permiss.slice(1),\n                        },\n                        type : msg.parseData[i].TYPE,\n                        add : parseInt(msg.parseData[i].ADDTIME),\n                        edit : parseInt(msg.parseData[i].EDITTIME),\n                    })\n                }\n            }\n        }else{\n            if(assignor === msg.token.username){\n                arr.push({\n                    display : msg.parseData[i].DISPLAY,\n                    username : msg.parseData[i].USERNAME.trim(),\n                    level : role,\n                    permission : {\n                        [permiss[0]] : permiss.slice(1),\n                    },\n                    type : msg.parseData[i].TYPE,\n                    add : parseInt(msg.parseData[i].ADDTIME),\n                    edit : parseInt(msg.parseData[i].EDITTIME),\n                })\n            }\n        }\n        if(role !== \"Administrator\" && role !== \"Super Administrator\"){\n            if(user === msg.token.username){\n                siteArr.push({\n                    display : msg.parseData[i].DISPLAY,\n                    username : msg.parseData[i].USERNAME.trim(),\n                    level : role,\n                    permission : {\n                        [permiss[0]] : permiss.slice(1),\n                    },\n                    type : msg.parseData[i].TYPE,\n                    add : parseInt(msg.parseData[i].ADDTIME),\n                    edit : parseInt(msg.parseData[i].EDITTIME),\n                })\n            }else{\n                if(assignor === msg.token.username){\n                    siteArr.push({\n                        display : msg.parseData[i].DISPLAY,\n                        username : msg.parseData[i].USERNAME.trim(),\n                        level : role,\n                        permission : {\n                            [permiss[0]] : permiss.slice(1),\n                        },\n                        type : msg.parseData[i].TYPE,\n                        add : parseInt(msg.parseData[i].ADDTIME),\n                        edit : parseInt(msg.parseData[i].EDITTIME),\n                    })\n                }\n            }\n        }\n        \n        if(user === msg.token.username){\n            userArr.push({\n                display : msg.parseData[i].DISPLAY,\n                username : msg.parseData[i].USERNAME.trim(),\n                level : role,\n                permission : {\n                    [permiss[0]] : permiss.slice(1),\n                },\n                type : msg.parseData[i].TYPE,\n                add : parseInt(msg.parseData[i].ADDTIME),\n                edit : parseInt(msg.parseData[i].EDITTIME),\n            })\n        }\n    }\n}\nconst compareToken = (username) =>{\n    let obj = {};\n    let objAdmin = {};\n    let objSite = {};\n    let objUsers = {};\n    \n    for(let i in msg.parseData){\n        let rols = \"\";\n        let permiss = msg.parseData[i].PERMISSION.split(\",\")\n        let user = msg.parseData[i].USERNAME.trim();\n        let level = msg.parseData[i].POSITION.trim()\n        if(level !== \"0\" && level !== \"1\"){\n            rols = level;\n        }\n        if(user === username){\n            if(rols == \"Super Administrator\"){\n                obj = {\n                    assignor : msg.parseData[i].ASSIGNOR.trim(),\n                    level : levelAll,\n                    permission : {\n                        [permiss[0]] : adminStore,\n                    },\n                    users : arrSuper,\n                    type : typeAll,\n                }\n            }else if(rols == \"Administrator\"){\n                obj = {\n                    assignor : msg.parseData[i].ASSIGNOR.trim(),\n                    level : levelAd,\n                    permission : {\n                        [permiss[0]] : adminStore,\n                    },\n                    users : arr,\n                    type : typeAll,\n                }\n            }else if(rols == \"Site Manager\"){\n                obj = {\n                    assignor : msg.parseData[i].ASSIGNOR.trim(),\n                    level : levelSite,\n                    permission : {\n                        [permiss[0]] : permiss.slice(1),\n                    },\n                    users : siteArr,\n                    type : typeAll,\n                }\n            }else{\n                obj = {\n                    assignor : msg.parseData[i].ASSIGNOR.trim(),\n                    level : levelUsers,\n                    permission : {\n                        [permiss[0]] : permiss.slice(1),\n                    },\n                    users : userArr,\n                    type : typeAll,\n                }\n            }\n            return obj;\n        }  \n    }\n}\noutput = compareToken(msg.token.username)\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 2660,
        "wires": [
            [
                "7153084121d20e22",
                "cca68e3fccf7df06"
            ]
        ]
    },
    {
        "id": "7153084121d20e22",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 2660,
        "wires": []
    },
    {
        "id": "b19cab06fa87db27",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 680,
        "y": 2620,
        "wires": [
            [
                "c7f69b85b6487f8a"
            ]
        ]
    },
    {
        "id": "c842bd5bebb925f3",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/users/update",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2800,
        "wires": [
            [
                "05674c37b9a656a7"
            ]
        ]
    },
    {
        "id": "05674c37b9a656a7",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.payload = msg.req.headers['authorization'].split(' ')[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2800,
        "wires": [
            [
                "c4448c2842c9361e"
            ]
        ]
    },
    {
        "id": "c4448c2842c9361e",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 490,
        "y": 2800,
        "wires": [
            [
                "f39e27bc8d2bebc1"
            ]
        ]
    },
    {
        "id": "dac3904ab40b1492",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "UPDATE SQL",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    IF EXISTS(\n\t    SELECT * FROM USERS_MANAGEMENTS WHERE USERNAME = '{{{username}}}'\n    )\n    BEGIN\n    \tUPDATE [dbo].[USERS_MANAGEMENTS] SET [DISPLAY] = '{{{display}}}' , [POSITION] = '{{{level}}}' , [PERMISSION] = '{{{permission}}}' , [EDITTIME] = '{{{last_time}}}' , [EDITED] = '{{{assignor}}}',[TYPE] = '{{{type}}}'\n        WHERE [USERNAME] = '{{{username}}}'\n    END\n    SELECT * FROM USERS_MANAGEMENTS WHERE USERNAME = '{{{username}}}'\n{{/payload}}",
        "output": "str",
        "x": 1420,
        "y": 2800,
        "wires": [
            [
                "6b1f4ab684c1628f"
            ]
        ]
    },
    {
        "id": "f39e27bc8d2bebc1",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "SELECT SQL",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    SELECT * FROM [dbo].[USERS_MANAGEMENTS]\n{{/payload}}",
        "output": "str",
        "x": 660,
        "y": 2800,
        "wires": [
            [
                "b35ee81efcd4f92d"
            ]
        ]
    },
    {
        "id": "af13c639351bc2e0",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "activity update",
        "func": "var output = {};\nlet obj = {};\nlet timestamp = new Date().getTime();\nfor(let i in msg.payload){\n    obj = {\n        username : msg.payload[i].USERNAME.trim(),\n        display : msg.payload[i].DISPLAY,\n        level : msg.payload[i].POSITION.trim(),\n        permission : msg.payload[i].PERMISSION.trim(),\n        added : msg.payload[i].ADDTIME,\n        edited : msg.payload[i].EDITTIME,\n        editor : msg.payload[i].EDITEd,\n        type : msg.payload[i].TYPE,\n    }\n}\nfor(let i in msg.from){\n    let detail = \"\";\n    let users = msg.from[i].USERNAME.trim();\n    if(obj.username === users){\n        if(obj.display !== msg.from[i].DISPLAY && obj.level === msg.from[i].POSITION.trim() && obj.permission === msg.from[i].PERMISSION.trim()){\n            /*key | old diplay | new display | user*/\n            detail = \"display\"+ \"|\" + msg.from[i].DISPLAY + \"|\" + obj.display + \"|\" + obj.username;\n        }\n        if(obj.level !== msg.from[i].POSITION.trim() && obj.display === msg.from[i].DISPLAY && obj.permission === msg.from[i].PERMISSION.trim()){\n            /*key | old level | new level | user*/\n            detail = \"level\" + \"|\" + msg.from[i].POSITION.trim() + \"|\" + obj.level + \"|\" + obj.username;\n        }\n        if(obj.display !== msg.from[i].DISPLAY && obj.level !== msg.from[i].POSITION.trim()){\n            /*key | old display | new display | old level | new level*/\n            detail = \"display,level\" + \"|\" + msg.from[i].DISPLAY + \"|\" + obj.display + \"|\" + msg.from[i].POSITION.trim() +\"|\"+ obj.level;\n        }\n        if(obj.permission !== msg.from[i].PERMISSION.trim() && obj.display === msg.from[i].DISPLAY && obj.level === msg.from[i].POSITION.trim()){\n            /*key | user | old permission | new permission */\n            detail = \"permission\"+ \"|\"+ obj.username + \"|\" + msg.from[i].PERMISSION.trim() + \"|\" + obj.permission;\n        }\n        if(obj.permission !== msg.from[i].PERMISSION.trim() && obj.display !== msg.from[i].DISPLAY && obj.level === msg.from[i].POSITION.trim()){\n            /*key | user | old permission | new permission | old display | new display */\n            detail = \"permisson,display\"+ \"|\" + obj.username + \"|\" + msg.from[i].PERMISSION.trim() + \"|\" + obj.permission + \"|\" + msg.from[i].DISPLAY + \"|\" + obj.display;\n        }\n        if(obj.permission !== msg.from[i].PERMISSION.trim() && obj.level !== msg.from[i].POSITION.trim()){\n            /*key | old permission | new permission | old level | new level*/\n            detail = \"permission,level\" + \"|\" + msg.from[i].PERMISSION.trim() + \"|\" + obj.permission + \"|\" + msg.from[i].POSITION.trim() + \"|\" + obj.level\n        }\n        if(obj.type !== msg.from[i].TYPE){\n            /* key | old type | new type | username */\n            detail = \"type\"+\"|\"+ msg.from[i].TYPE +\"|\"+ obj.type +\"|\"+ obj.username;\n        }\n        output = {\n            timestamp : timestamp,\n            username : msg.token.username,\n            level : msg.token.level,\n            event : \"Update user\",\n            state : \"Success\",\n            details : {\n                message : detail,\n            },\n       }\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2840,
        "wires": [
            [
                "922a9e451ebb05f9",
                "510ff18d260c21fe"
            ]
        ]
    },
    {
        "id": "8c62f8f67f5c6ca3",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "from",
                "pt": "msg",
                "to": "msg.payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 2800,
        "wires": [
            [
                "7052ea98a84163cb",
                "0124e87680be4ead"
            ]
        ]
    },
    {
        "id": "922a9e451ebb05f9",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    INSERT INTO ACTIVE_USERS_SYSTEM([TIMESTAMP],[USERNAME],[POSITION],[EVENTS],[STATE],[DETAILS])\n    VALUES('{{{payload.timestamp}}}','{{{payload.username}}}','{{{payload.level}}}','{{{payload.event}}}','{{{payload.state}}}','{{{payload.details.message}}}')\n{{/payload}}",
        "output": "str",
        "x": 360,
        "y": 2840,
        "wires": [
            [
                "900cb8c85487ab41"
            ]
        ]
    },
    {
        "id": "d85ff7cafc8fcf55",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nif(msg.payload.length > 0){\n    for(let i in msg.payload){\n        output = {\n            status : true,\n            message : \"success\",\n            edit : msg.payload[i].EDITTIME.trim(),\n        }\n    }\n}else{\n    output = {\n        status : false,\n        message : \"failed\",\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 2800,
        "wires": [
            [
                "ed9382ea08d15319"
            ]
        ]
    },
    {
        "id": "ed9382ea08d15319",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1950,
        "y": 2800,
        "wires": []
    },
    {
        "id": "b35ee81efcd4f92d",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 860,
        "y": 2800,
        "wires": [
            [
                "8c62f8f67f5c6ca3"
            ]
        ]
    },
    {
        "id": "6b1f4ab684c1628f",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1620,
        "y": 2800,
        "wires": [
            [
                "d85ff7cafc8fcf55"
            ]
        ]
    },
    {
        "id": "900cb8c85487ab41",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 540,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "028151804c067811",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/users/deleted",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2320,
        "wires": [
            [
                "1a5b9c6395812610"
            ]
        ]
    },
    {
        "id": "76f9b3975e3a80b2",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 490,
        "y": 2320,
        "wires": [
            [
                "c925e85d62409fb3"
            ]
        ]
    },
    {
        "id": "9335bd3cb929e4e5",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "DELETE SQL",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    IF EXISTS(\n        SELECT * FROM [dbo].[USERS_MANAGEMENTS] WHERE [USERNAME] = '{{{payload.username}}}'\n    )\n    BEGIN\n        DELETE [dbo].[USERS_MANAGEMENTS] WHERE [USERNAME] = '{{{payload.username}}}'\n    END\n    SELECT * FROM [dbo].[USERS_MANAGEMENTS]\n{{/payload}}",
        "output": "str",
        "x": 1400,
        "y": 2320,
        "wires": [
            [
                "fbaef5836a65c1fa"
            ]
        ]
    },
    {
        "id": "003d73157a661df6",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\n\nfor(let i in msg.payload){\n    if(msg.payload[i].USERNAME.trim() !== msg.req.body.username){\n        output = {\n            status : true,\n            message : \"delete success\"\n        }\n    }else{\n        output = {\n            status : false,\n            message : \"delete failed\"\n        }\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 2320,
        "wires": [
            [
                "2d30f6f88f39871b",
                "8829948e14522917",
                "f03f1ce7ccd909b2"
            ]
        ]
    },
    {
        "id": "2d30f6f88f39871b",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1950,
        "y": 2320,
        "wires": []
    },
    {
        "id": "1a5b9c6395812610",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "msg.payload = msg.req.headers['authorization'].split(' ')[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2320,
        "wires": [
            [
                "76f9b3975e3a80b2"
            ]
        ]
    },
    {
        "id": "21d73c0a85ecdfab",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "SELECT SQL",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    SELECT * FROM [dbo].[USERS_MANAGEMENTS] WHERE [USERNAME] = '{{{payload.username}}}'\n{{/payload}}",
        "output": "str",
        "x": 820,
        "y": 2320,
        "wires": [
            [
                "8addfc1c7228a6bf"
            ]
        ]
    },
    {
        "id": "c925e85d62409fb3",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "change msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.body",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 2320,
        "wires": [
            [
                "21d73c0a85ecdfab"
            ]
        ]
    },
    {
        "id": "42b6c210980786b7",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nfor(let i in msg.payload){\n    if(msg.payload[i].USERNAME.trim() == msg.req.body.username){\n        output = {\n            username : msg.req.body.username,\n        }\n    }else{\n        msg.error = {\n            status : false,\n            message : 'delete failed'\n        }\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 2320,
        "wires": [
            [
                "9335bd3cb929e4e5"
            ]
        ]
    },
    {
        "id": "f03f1ce7ccd909b2",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "activity removed",
        "func": "var output = {};\nlet timestamp = new Date().getTime();\nlet detail = msg.req.body.username + \"|\" + \"Removed\";\n/*username | Removed*/\nif(msg.payload.status == true){\n    output = {\n        username : msg.token.username,\n        level : msg.token.level,\n        event : \"Remove user\",\n        state : \"Success\",\n        details : {\n            message : detail,\n        },\n        timestamp : timestamp,\n    }\n}else{\n    output = {\n        username : msg.token.username,\n        level : msg.token.level,\n        event : \"Remove user\",\n        state : \"Failed\",\n        details : {\n            message : detail,\n        },\n        timestamp : timestamp,\n    }\n}\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2360,
        "wires": [
            [
                "0c809a8c1d91c0ae"
            ]
        ]
    },
    {
        "id": "0c809a8c1d91c0ae",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    INSERT INTO ACTIVE_USERS_SYSTEM([TIMESTAMP],[USERNAME],[POSITION],[EVENTS],[STATE],[DETAILS])\n    VALUES('{{{payload.timestamp}}}','{{{payload.username}}}','{{{payload.level}}}','{{{payload.event}}}','{{{payload.state}}}','{{{payload.details.message}}}')\n{{/payload}}",
        "output": "str",
        "x": 360,
        "y": 2360,
        "wires": [
            [
                "604d3693d3925fbc"
            ]
        ]
    },
    {
        "id": "8829948e14522917",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 2260,
        "wires": []
    },
    {
        "id": "8addfc1c7228a6bf",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1020,
        "y": 2320,
        "wires": [
            [
                "42b6c210980786b7"
            ]
        ]
    },
    {
        "id": "fbaef5836a65c1fa",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1600,
        "y": 2320,
        "wires": [
            [
                "003d73157a661df6"
            ]
        ]
    },
    {
        "id": "604d3693d3925fbc",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 540,
        "y": 2360,
        "wires": [
            []
        ]
    },
    {
        "id": "644f5eeb723cfb71",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/users/actived",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2480,
        "wires": [
            [
                "d8e6c11870df9094",
                "b84d1644f10c6666"
            ]
        ]
    },
    {
        "id": "c65c0d216bc22ed2",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    SELECT * FROM [dbo].[ACTIVE_USERS_SYSTEM] WHERE [TIMESTAMP] BETWEEN '{{{from}}}' AND '{{{to}}}'\n    ORDER BY ID DESC\n{{/payload}}",
        "output": "str",
        "x": 840,
        "y": 2480,
        "wires": [
            [
                "2aab84313977e092"
            ]
        ]
    },
    {
        "id": "76e30b8048d97796",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "change msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.body",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 2480,
        "wires": [
            [
                "c65c0d216bc22ed2"
            ]
        ]
    },
    {
        "id": "d8e6c11870df9094",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var reciveToken = msg.req.headers['authorization'].split(' ')[1];\nmsg.payload = reciveToken;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2480,
        "wires": [
            [
                "407f23805490eef1"
            ]
        ]
    },
    {
        "id": "407f23805490eef1",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 510,
        "y": 2480,
        "wires": [
            [
                "76e30b8048d97796"
            ]
        ]
    },
    {
        "id": "2aab84313977e092",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1000,
        "y": 2480,
        "wires": [
            [
                "42ab62315ac33ac4"
            ]
        ]
    },
    {
        "id": "0adfb3ee973b4bc5",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/overviews",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2160,
        "wires": [
            [
                "b7978e5ef85b9343"
            ]
        ]
    },
    {
        "id": "0b7f3a9d4f8648c3",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "Overviews",
        "info": "",
        "x": 100,
        "y": 2120,
        "wires": []
    },
    {
        "id": "b7978e5ef85b9343",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nvar reciveToken = msg.req.headers['authorization'].split(' ')[1]\nmsg.payload = reciveToken\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2160,
        "wires": [
            [
                "33feed87741c7548"
            ]
        ]
    },
    {
        "id": "33feed87741c7548",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 450,
        "y": 2160,
        "wires": [
            [
                "b5dfc3cfc6f1bd4b"
            ]
        ]
    },
    {
        "id": "b5dfc3cfc6f1bd4b",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "change msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "token",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 2160,
        "wires": [
            [
                "b22f7c7f2c6b7211"
            ]
        ]
    },
    {
        "id": "764d2854478ea350",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "token",
        "storetoken": "token",
        "x": 630,
        "y": 1900,
        "wires": [
            [
                "842f47c835fa16ec"
            ]
        ]
    },
    {
        "id": "76a156ff5aeb83d9",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Activity Edit setpoint",
        "func": "var output = {};\nlet timestamp = new Date().getTime();\nif(msg.payload.status == \"ok\"){\n    /* affacted | set_name | old value | new value */\n    let details = msg.setpoint.name +\"|\"+ msg.setpoint.setname +\"|\"+ msg.from._value + \"|\" + msg.setpoint.value;\n    output = {\n        timestamp : timestamp,\n        username : msg.token.username,\n        level : msg.token.level,\n        event : \"Setpoint\",\n        state : \"Success\",\n        detail : {\n            message : details,\n        }\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1640,
        "wires": [
            [
                "8c8b9827f32e2c27"
            ]
        ]
    },
    {
        "id": "8c8b9827f32e2c27",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    INSERT INTO ACTIVE_USERS_SYSTEM([TIMESTAMP],[USERNAME],[POSITION],[EVENTS],[STATE],[DETAILS])\n    VALUES('{{{payload.timestamp}}}','{{{payload.username}}}','{{{payload.level}}}','{{{payload.event}}}','{{{payload.state}}}','{{{payload.detail.message}}}')\n{{/payload}}",
        "output": "str",
        "x": 1860,
        "y": 1640,
        "wires": [
            [
                "2129964ab76e5b4e"
            ]
        ]
    },
    {
        "id": "2129964ab76e5b4e",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 2020,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "6221ca1c43f03d76",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "token jwt",
        "func": "msg.token = msg.req.headers['authorization'].split(' ')[1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1700,
        "wires": [
            [
                "11226debd5ad43a5"
            ]
        ]
    },
    {
        "id": "11226debd5ad43a5",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "token",
        "storetoken": "token",
        "x": 670,
        "y": 1700,
        "wires": [
            [
                "e18d77f7fdcc3e12"
            ]
        ]
    },
    {
        "id": "bb5341463228e98b",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 3080,
        "wires": []
    },
    {
        "id": "9e6503e8fecdb06a",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 3120,
        "wires": []
    },
    {
        "id": "8cf2b5e390c8c1c6",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 3460,
        "wires": []
    },
    {
        "id": "3bf22b7785e211eb",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "Commands",
        "info": "",
        "x": 170,
        "y": 1880,
        "wires": []
    },
    {
        "id": "6bdcbd6c9eca123e",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "Setpoints",
        "info": "",
        "x": 180,
        "y": 1680,
        "wires": []
    },
    {
        "id": "cd96c28831d64bb4",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "Update",
        "info": "",
        "x": 190,
        "y": 2760,
        "wires": []
    },
    {
        "id": "76ec0e257a1523ba",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "DELETE",
        "info": "",
        "x": 180,
        "y": 2280,
        "wires": []
    },
    {
        "id": "e19b1f885aa31827",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "List_Device_Config",
        "info": "",
        "x": 330,
        "y": 3560,
        "wires": []
    },
    {
        "id": "38029136f3250965",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "Input Data",
        "info": "",
        "x": 220,
        "y": 3720,
        "wires": []
    },
    {
        "id": "fb0b47e9f318f017",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "Check On/Off",
        "property": "payload.xwebEVO.$.on",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 720,
        "y": 3760,
        "wires": [
            [
                "8d35b5e1c33f7092"
            ]
        ]
    },
    {
        "id": "d3ca251004beede4",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Assign from XWEB and Touch",
        "func": "var touch = global.get(\"dataScreens\")||{};\n\nvar powerMeter = [1,2,3,4,128,129];\nvar condensor = [5];\nvar coldRoom = [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,115,116,117,118,119,120,121,122,123,124];\nvar anteRoom = [25,26,127];\nvar loadingRoom = [27,28,36,37,125,126];\nvar detector = [29,30,31,32];\nvar blast = [33,34,35,39,40,41];\nvar parkingRm = [38]\nvar childroom = [22];\nvar comp = [\"192.168.50.83:502:101\",\"192.168.50.84:502:102\",\"192.168.50.85:502:103\",\"192.168.50.86:502:104\"];\nvar Inter = [96];\nvar Vessel = [97,98];\n\nvar xjad = [\n    \"192.168.50.155:502:51\",\n    \"192.168.50.155:502:52\",\n    \"192.168.50.155:502:53\",\n    \"192.168.50.155:502:54\",\n    \"192.168.50.155:502:55\",\n    \"192.168.50.155:502:56\",\n    \"192.168.50.155:502:57\",\n    \"192.168.50.155:502:58\",\n    \"192.168.50.155:502:59\",\n    \"192.168.50.155:502:60\",\n    \"192.168.50.155:502:61\",\n    \"192.168.50.155:502:62\",\n    \"192.168.50.155:502:63\",\n    \"192.168.50.155:502:64\",\n    \"192.168.50.155:502:65\",\n    \"192.168.50.155:502:66\",\n    \"192.168.50.155:502:67\",\n    \"192.168.50.155:502:68\",\n    \"192.168.50.155:502:69\",\n    156,157,\n];\n\nvar loading77 = [27,28];\nvar loading20 = [125,126];\nvar blast77 = [34,35,];\nvar blast20 = [33,39,40,41];\n\nvar power = {};\nvar cold = {};\nvar con = {};\nvar ante = {};\nvar loading = {};\nvar detect = {};\nvar bla = {};\nvar parking = {};\nvar child = {};\nvar com = {};\nvar inters = {};\nvar vessels = {};\n\nvar all_ctrl = {};\nvar parseData = {};\n\nvar powers = {};\nvar cold_room = {};\nvar ante_room = {};\nvar loading_room = {};\nvar loadings_room = {};\nvar detected = {};\nvar blast_room = {};\nvar blasts_room = {};\nvar parking_room = {};\nvar chill_room = {};\nvar inter = {};\nvar vessel = {};\nvar conden = {};\nvar compress = {};\n\nvar data = global.get(\"xjaData\")||{};\n\nvar objVessel1 = {};\nvar objVessel2 = {};\nvar objInter = {};\nobjInter[\"data\"] = {};\nobjInter[\"on\"] = {};\nobjInter[\"alarm\"] = {};\nvar blast1 = {};\nblast1[\"data\"] = {};\nblast1[\"alarm\"] = {};\nblast1[\"analog\"] = {};\nblast1[\"deviceStatus\"] = {};\nvar blast2 = {};\nblast2[\"data\"] = {};\nblast2[\"alarm\"] = {};\nblast2[\"analog\"] = {};\nblast2[\"deviceStatus\"] = {};\nvar blast3 = {};\nblast3[\"data\"] = {};\nblast3[\"alarm\"] = {};\nblast3[\"analog\"] = {};\nblast3[\"deviceStatus\"] = {};\n\nlet compress12 = global.get(\"Comp1-2\");\nlet comp1 = {};\ncomp1[\"data\"] = {};\nlet comp2 = {};\ncomp2[\"data\"] = {};\nfor(let [c,d] of Object.entries(compress12)){\n    if(c.includes(\"Comp1\")){\n        comp1[\"deviceName\"] = \"Compressor_No.1\";\n        comp1[\"data\"][d.name] = d.value;\n    }else if(c.includes(\"Comp2\")){\n        comp2[\"deviceName\"] = \"Compressor_No.2\"\n        comp2[\"data\"][d.name] = d.value;\n    }\n}\nfor(let to of touch){\n    let nameDevice = to.deviceName;\n    switch(nameDevice){\n        case \"VESSEL_1\":\n            for(let [a,b] of Object.entries(to.data)){\n               if(a.includes(\"Vessel1\")){\n                   objVessel1[a] = b;\n               }\n           }\n        break;\n        case \"VESSEL_2\":\n            for(let [a,b] of Object.entries(to.data)){\n               if(a.includes(\"Vessel2\")){\n                   objVessel2[a] = b;\n               }\n           }\n        break;\n        case \"INTER\":\n            for(let [a,b] of Object.entries(to.data)){\n                let name = a.replace(/ /g,\"_\");\n                let inter = name.includes(\"Inter\");\n                // objInter[a.replace(/ /g,\"_\")] = b;\n                if(inter == false){\n                    if(name.includes(\"INTER\")){\n                        objInter[\"data\"][name] = b;\n                    }else if(name !== \"Pb_1\" && name == \"On\"){\n                        objInter[\"on\"][name] = b;\n                    }else{\n                        if(name !== \"Pb_1\"){\n                            objInter[\"alarm\"][name] = b;\n                        }\n                    }\n                }\n            }\n        break;\n        default:\n        break;\n    }\n    \t\n    switch(to.deviceName){\n        case \"Blast_Freezer_1\":\n            for(let [k,v] of Object.entries(to.data)){\n                blast1[\"deviceName\"] = to.deviceName;\n                if(k.includes(\"Blast1_Fan_\") || k.includes(\"Blast1_Defrost\") || k.includes(\"Blast1_suction_SV\")){\n                     blast1[\"data\"][k] = v;\n                }else if(k.includes(\"Room\")){\n                    blast1[\"analog\"][k] = v;\n                }else if(k.includes(\"On\")){\n                    blast1[\"deviceStatus\"][k] = v;\n                }else{\n                    blast1[\"alarm\"][k] = v;\n                }\n            }\n        break;\n        case \"Blast_Freezer_2\":\n            for(let [k,v] of Object.entries(to.data)){\n                blast2[\"deviceName\"] = to.deviceName;\n                if(k.includes(\"Blast2_Fan_\") || k.includes(\"Blast2_Defrost\") || k.includes(\"Blast2_suction_SV\") || k.includes(\"Blast2_Liquid_SV\")){\n                    blast2[\"data\"][k] = v;\n                }else if(k.includes(\"Room\")){\n                    blast2[\"analog\"][k] = v;\n                }else if(k.includes(\"On\")){\n                    blast2[\"deviceStatus\"][k] = v;\n                }else{\n                    blast2[\"alarm\"][k] = v;\n                }\n            }\n        break;\n        case \"Blast_Freezer_3\":\n            for(let [k,v] of Object.entries(to.data)){\n                blast3[\"deviceName\"] = to.deviceName;\n                if(k.includes(\"Blast3_Fan_\") || k.includes(\"Blast3_Defrost\") || k.includes(\"Blast3_suction_SV\") || k.includes(\"Blast3_Liquid_SV\")){\n                    blast3[\"data\"][k] = v;\n                }else if(k.includes(\"Room\")){\n                    blast3[\"analog\"][k] = v;\n                }else if(k.includes(\"On\")){\n                    blast3[\"deviceStatus\"][k] = v;\n                }else{\n                    blast3[\"alarm\"][k] = v;\n                }\n            }\n        break;\n        default:\n        break;\n    }\n}\nconst finded = (name) =>{\n    for(let i in data){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k == name){\n                return {\n                    name : k,\n                    value : v,\n                };\n            }\n        }\n    }\n}\nvar xja = {};\nxja[\"Blast_Freezer_4\"] = {};\nxja[\"Blast_Freezer_5\"] = {};\nxja[\"Blast_Freezer_6\"] = {};\nxja[\"Cold_Storage_9-1\"] = {};\nxja[\"Cold_Storage_9-2\"] = {};\nxja[\"Cold_Storage_9-3\"] = {};\nxja[\"Cold_Storage_10\"] = {};\nxja[\"Cold_Storage_11-1\"] = {};\nxja[\"Cold_Storage_11-2\"] = {};\nxja[\"Cold_Storage_11-3\"] = {};\nxja[\"Cold_Storage_11-4\"] = {};\nxja[\"Cold_Storage_11-5\"] = {};\nxja[\"Cold_Storage_8\"] = {};\nxja[\"Compressor_No.3\"] = {};\nxja[\"Compressor_No.4\"] = {};\nxja[\"VESSEL_3\"] = {};\nxja[\"Loading_3\"] = {};\nxja[\"Loading_4\"] = {};\nxja[\"Fan_Evap._Condenser_3\"] = {};\nxja[\"Fan_Evap._Condenser_4\"] = {};\nxja[\"Ante_Room_3\"] = {};\nlet com3alarm = {};\nlet onCom3 = {};\nfor(let i = 0; i < data.length; i++){\n    if(data[i].adr == \"192.168.50.155:502:51\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k !== \"On\" && \n                k !== \"Alarm\" &&\n                k !== \"No_Link\"\n            ){\n                xja[\"Compressor_No.3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Compressor_No.3\",\n                    adr : data[i].adr,\n                    name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    value : v,\n                }\n            }else{\n                if(k == \"No_Link\" || k == \"Alarm\"){\n                    com3alarm[k] = v;\n                }else if(k == \"On\"){\n                    onCom3[k] = v;\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:52\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let key = k.replace(/ /g,\"_\").replace(/-/g,\"_\");\n            let name;\n            switch(key){\n                case \"Overload_Fan_1\":\n                    name = \"Fan_1_Overload\";\n                break;\n                case \"Overload_Fan_2\":\n                    name = \"Fan_2_Overload\";\n                break;\n                case \"Overload_Fan_3\":\n                    name = \"Fan_3_Overload\";\n                break;\n                case \"Overload_Fan_4\":\n                    name = \"Fan_4_Overload\";\n                break;\n                case \"Overload_Water_Pump\":\n                    name = \"Water_Pump_Overlaod\";\n                break;\n                default:\n                    name = key;\n                break;\n            }\n            xja[\"Fan_Evap._Condenser_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                deviceName : \"Fan_Evap._Condenser_3\",\n                adr : data[i].adr,\n                name : name,\n                value : v,\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:53\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast4s = k.includes(\"Freezer_4\");\n                if(blast4s == false){\n                    if(k !== \"On\" && k !== \"No-Link\"){\n                        xja[\"VESSEL_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"VESSEL_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:53\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let has = k.includes(\"Freezer_4\");\n                if(has == true){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:54\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer_4\")){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:55\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let has = k.includes(\"Freezer_4\");\n                let blast5 = k.includes(\"Freezer_5\");\n                if(has == true){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    \tdeviceName : \"Blast_Freezer_4\",\n                    \tadr : data[i].adr,\n                    \tname : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    \tvalue : v\n                    }\n                }\n                if(blast5 == true){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:56\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer_6\");\n                if(k.includes(\"Freezer_5\")){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Freezer_6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:57\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer_6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:58\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer_6\");\n                if(blast6 == true){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:59\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold91 = k.includes(\"Storage_9-1\");\n                let Cold92 = k.includes(\"Storage_9-2\");\n                if(Cold91 == false && Cold92 == false){\n                    xja[\"Compressor_No.4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Compressor_No.4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else{\n                    if(Cold91 == true){\n                        xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-1\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }else if(Cold92 == true){\n                        xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-2\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:60\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold92 = k.includes(\"Storage_9-2\");\n                if(Cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_9-3\")){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:61\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:62\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-3\")){\n                    xja[\"Cold_Storage_11-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:63\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:64\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:65\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let load3 = k.includes(\"Loading_3\");\n                let load4 = k.includes(\"Loading_4\");\n                if(load4 == true){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Ante_Room_3\")){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n                if(load3 == true && load4 == false){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:66\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold9 = k.includes(\"Storage_9\");\n                let cold91 = k.includes(\"Storage_9_1\");\n                let cold92 = k.includes(\"Storage_9_2\");\n                if(cold9 == false){\n                    if(k !== \"On\" && k !== \"No_Link\"){\n                        xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Ante_Room_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n                if(cold91 == true){\n                    xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:67\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold93 = k.includes(\"Storage_9_3\");\n                let cold11 = k.includes(\"Storage_11\");\n                if(cold93 == true){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n                if(k.includes(\"Storage_11_1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11_2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11_3\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11_4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:68\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11_5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_4\")){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\").replace(/_Area/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_3\")){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\").replace(/_Area/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:69\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let ante3 = k.includes(\"Ante_Room_3\");\n                if(ante3 == true){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"156\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let fan = k.includes(\"Fan\");\n                let key = k.replace(/ /g,\"_\").replace(/-/g,\"_\");\n                if(fan == true){\n                    switch(key){\n                        case \"Overload_Fan_1\":\n                            name = \"Fan_1_Overload\";\n                        break;\n                        case \"Overload_Fan_2\":\n                            name = \"Fan_2_Overload\";\n                        break;\n                        case \"Overload_Fan_3\":\n                            name = \"Fan_3_Overload\";\n                        break;\n                        case \"Overload_Fan_4\":\n                            name = \"Fan_4_Overload\";\n                        break;\n                        case \"Overload_Water_Pump\":\n                            name = \"Water_Pump_Overlaod\";\n                        break;\n                        default:\n                            name = key;\n                        break;\n                    }\n                    xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Fan_Evap._Condenser_4\",\n                        adr : data[i].adr,\n                        name : name,\n                        value : v,\n                    }\n                }\n            }\n        }\n    }else if(data[i].adr == \"157\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            let key = k.replace(/ /g,\"_\").replace(/-/g,\"_\");\n            if(k == dataFind.name){\n                switch(key){\n                    case \"Overload_Fan_1\":\n                        name = \"Fan_1_Overload\";\n                    break;\n                    case \"Overload_Fan_2\":\n                        name = \"Fan_2_Overload\";\n                    break;\n                    case \"Overload_Fan_3\":\n                        name = \"Fan_3_Overload\";\n                    break;\n                    case \"Overload_Fan_4\":\n                        name = \"Fan_4_Overload\";\n                    break;\n                    case \"Overload_Water_Pump\":\n                        name = \"Water_Pump_Overlaod\";\n                    break;\n                    default:\n                        name = key;\n                    break;\n                }\n                xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Fan_Evap._Condenser_4\",\n                    adr : data[i].adr,\n                    name : name,\n                    value : v,\n                }\n            }\n        }\n    }\n}\nmsg.test = xja\nvar timestamp = parseInt(new Date().getTime() / 1000);\nvar output = {};\nvar blast4 = {};\nblast4[\"data\"] = {};\nvar blast5 = {};\nblast5[\"data\"] = {};\nvar blast6 = {};\nblast6[\"data\"] = {};\nvar cold91 = {};\ncold91[\"data\"] = {};\nvar cold92 = {};\ncold92[\"data\"] = {};\nvar cold93 = {};\ncold93[\"data\"] = {};\nvar cold8 = {};\ncold8[\"data\"] = {};\nvar cold10 = {};\ncold10[\"data\"] = {};\nvar cold11 = {};\ncold11[\"data\"] = {};\nvar cold12 = {};\ncold12[\"data\"] = {};\nvar cold13 = {};\ncold13[\"data\"] = {};\nvar cold14 = {};\ncold14[\"data\"] = {};\nvar cold15 = {};\ncold15[\"data\"] = {};\nvar ante3 = {};\nante3[\"data\"] = {};\nvar loading3 = {};\nloading3[\"data\"] = {};\nvar loading4 = {};\nloading4[\"data\"] = {};\nvar myCompressor = {};\nmyCompressor[\"data\"] = {};\nvar evap2000 = {};\nevap2000[\"data\"] = {};\nvar evapsec = {};\nevapsec[\"data\"] = {};\nvar myCom355 = {};\nmyCom355[\"data\"] = {};\nvar vesselss = {};\nvesselss[\"data\"] = {};\nfor(let [k,v] of Object.entries(xja)){\n    for(let [a,b] of Object.entries(v)){\n        let name = b.name.includes(\"Blast_Freezer_4\");\n        let nameCold = b.name.includes(\"Cold_Storage_9\");\n        let nameLoad3 = b.name.includes(\"Loading_3\");\n        switch(b.deviceName){\n            case \"Blast_Freezer_5\":\n                blast5[\"deviceName\"] = b.deviceName;\n                blast5[\"timestamp\"] = timestamp;\n                blast5[\"data\"][b.name] = b.value;\n            break;\n            case \"Blast_Freezer_6\":\n                blast6[\"deviceName\"] = b.deviceName;\n                blast6[\"timestamp\"] = timestamp;\n                blast6[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_9-1\":\n                cold91[\"deviceName\"] = b.deviceName;\n                cold91[\"timestamp\"] = timestamp;\n                cold91[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_9-2\":\n                cold92[\"deviceName\"] = b.deviceName;\n                cold92[\"timestamp\"] = timestamp;\n                cold92[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_9-3\":\n                cold93[\"deviceName\"] = b.deviceName;\n                cold93[\"timestamp\"] = timestamp;\n                cold93[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_8\":\n                cold8[\"deviceName\"] = b.deviceName;\n                cold8[\"timestamp\"] = timestamp;\n                cold8[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_10\":\n                cold10[\"deviceName\"] = b.deviceName;\n                cold10[\"timestamp\"] = timestamp;\n                cold10[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-1\":\n                cold11[\"deviceName\"] = b.deviceName;\n                cold11[\"timestamp\"] = timestamp;\n                cold11[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-2\":\n                cold12[\"deviceName\"] = b.deviceName;\n                cold12[\"timestamp\"] = timestamp;\n                cold12[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-3\":\n                cold13[\"deviceName\"] = b.deviceName;\n                cold13[\"timestamp\"] = timestamp;\n                cold13[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-4\":\n                cold14[\"deviceName\"] = b.deviceName;\n                cold14[\"timestamp\"] = timestamp;\n                cold14[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-5\":\n                cold15[\"deviceName\"] = b.deviceName;\n                cold15[\"timestamp\"] = timestamp;\n                cold15[\"data\"][b.name] = b.value;\n            break;\n            case \"Ante_Room_3\":\n                if(nameCold == false){\n                    ante3[\"deviceName\"] = b.deviceName;\n                    ante3[\"timestamp\"] = timestamp;\n                    ante3[\"data\"][b.name] = b.value;\n                }else{\n                    if(b.name == \"Cold_Storage_9_1_Overload\"){\n                        cold91[\"data\"][b.name] = b.value;\n                    }else if(b.name == \"Cold_Storage_9_2_Overload\"){\n                        cold92[\"data\"][b.name] = b.value;\n                    }\n                }\n            break;\n            case \"Loading_3\":\n                loading3[\"deviceName\"] = b.deviceName;\n                loading3[\"timestamp\"] = timestamp;\n                loading3[\"data\"][b.name.replace(/_Area/g,\"\")] = b.value;\n            break;\n            case \"Loading_4\":\n                if(nameLoad3 == false){\n                    loading4[\"deviceName\"] = b.deviceName;\n                    loading4[\"timestamp\"] = timestamp;\n                    loading4[\"data\"][b.name.replace(/_Area/g,\"\")] = b.value;\n                }\n            break;\n            case \"Compressor_No.3\":\n                myCom355[\"deviceName\"] = b.deviceName;\n                myCom355[\"timestamp\"] = timestamp;\n                myCom355[\"data\"][b.name] = b.value;\n            break;\n            case \"Compressor_No.4\":\n                myCompressor[\"deviceName\"] = b.deviceName;\n                myCompressor[\"timestamp\"] = timestamp;\n                if(b.name !== \"No_Link\"){\n                    myCompressor[\"data\"][b.name] = b.value;\n                }\n            break;\n            case \"Fan_Evap._Condenser_3\":\n                evap2000[\"deviceName\"] = b.deviceName;\n                evap2000[\"timestamp\"] = timestamp;\n                evap2000[\"data\"][b.name] = b.value;\n            break;\n            case \"Fan_Evap._Condenser_4\":\n                evapsec[\"deviceName\"] = b.deviceName;\n                evapsec[\"timestamp\"] = timestamp;\n                evapsec[\"data\"][b.name] = b.value;\n            break;\n            case \"VESSEL_3\":\n                let name = b.name.includes(\"Blast_Freezer_4\")\n                if(name == false){\n                    vesselss[\"deviceName\"] = b.deviceName;\n                    vesselss[\"timestamp\"] = timestamp;\n                    vesselss[\"data\"][b.name] = b.value;\n                }\n            break;\n            default:\n            break;\n        }\n        if(name == true){\n            blast4[\"deviceName\"] = \"Blast_Freezer_4\";\n            blast4[\"timestamp\"] = timestamp;\n            blast4[\"data\"][b.name] = b.value;\n        }\n    }\n}\n\nlet objCom = {};\nobjCom[\"data\"] = {};\nlet objCon3 = {};\nobjCon3[\"data\"] = {};\nlet objCon4 = {};\nobjCon4[\"data\"] = {};\nfor(let [a,b] of Object.entries(myCompressor.data)){\n    if(a == \"No_Link\"){\n        objCom[\"nolink\"] = b;\n    }else if(a == \"On\"){\n        objCom[\"on\"] = b;\n    }else{\n        objCom[\"data\"][a] = b; \n    }\n}\nfor(let [a,b] of Object.entries(evap2000.data)){\n    if(a == \"No_Link\"){\n        objCon3[\"nolink\"] = b;\n    }else if(a == \"On\"){\n        objCon3[\"on\"] = b;\n    }else if(a == \"Alarm\"){\n        objCon3[\"alarm\"] = b;\n    }else{\n        objCon3[\"data\"][a] = b;\n    }\n}\nfor(let [a,b] of Object.entries(evapsec.data)){\n    if(a == \"No_Link\"){\n        objCon4[\"nolink\"] = b;\n    }else if(a == \"On\"){\n        objCon4[\"on\"] = b;\n    }else{\n        objCon4[\"data\"][a] = b;\n    }\n}\n\nconst compareSet = (uid) =>{\n    let obj = {};\n    let chk = flow.get(\"checkset\")||{}\n    for(let [k,v] of Object.entries(chk)){\n        adr = k.split(\"_\")[0];\n        pointId = k.split(\"_\")[1];\n        if(adr == uid){\n            obj = {\n                pointId : pointId,\n                uid : adr,\n                valueSet : v,\n            }\n        }\n    }\n    return obj;\n}\nlet energy_meter = {};\nlet cold_storage = {};\nlet condensers = {};\nlet ante_rooms = {};\nlet load_rooms = {};\nlet detectors = {};\nlet blastfreezers = {};\nlet packing_rooms = {};\nlet child_rooms = {};\nlet compressors = {};\nlet inter_rooms = {};\nlet vessel_rooms = {};\n\nfor(let i in msg.data){\n    \n    let chk = compareSet(msg.data[i].uid);\n    \n    var analog = {};\n    var analogs = {};\n    var setpoints = {};\n    for(let a in msg.data[i].analogInput){\n        analog[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n            value : msg.data[i].analogInput[a].value,\n            unit : msg.data[i].analogInput[a].unit,\n        };\n        if(msg.data[i].analogInput[a].unit == \"\"){\n            analog[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                value : msg.data[i].analogInput[a].value,\n                unit : \"\",\n            };\n        }\n        if(msg.data[i].analogInput[a].name.replace(/ /g,\"_\") == \"Size_VT\" ||\n            msg.data[i].analogInput[a].name.replace(/ /g,\"_\") == \"Size_CT\" ||\n            msg.data[i].analogInput[a].name.replace(/ /g,\"_\") == \"Set_Point\"\n        ){\n            setpoints[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                value : msg.data[i].analogInput[a].value,\n                unit : msg.data[i].analogInput[a].unit,\n            }\n            if(msg.data[i].analogInput[a].unit == \"\"){\n                setpoints[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                    value : msg.data[i].analogInput[a].value,\n                    unit : \"\",\n                };\n            }\n        }else{\n            analogs[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                value : msg.data[i].analogInput[a].value,\n                unit : msg.data[i].analogInput[a].unit,\n            }\n            if(msg.data[i].analogInput[a].unit == \"\"){\n                analogs[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                    value : msg.data[i].analogInput[a].value,\n                    unit : \"\",\n                };\n            }\n            if(msg.data[i].analogInput[a].name.replace(/ /g,\"_\") == \"Pressure_Target\"){\n                setpoints[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                    value : msg.data[i].analogInput[a].value,\n                    unit : msg.data[i].analogInput[a].unit\n                }\n            }\n        }\n    }\n    var digital = {};\n    for(let d in msg.data[i].digitalInput){\n        digital[msg.data[i].digitalInput[d].name.replace(/ /g,\"_\")] = msg.data[i].digitalInput[d].value;\n    }\n    var devState = {};\n    for(let de in msg.data[i].deviceStatus){\n        devState[msg.data[i].deviceStatus[de].name.replace(/ /g,\"_\")] = msg.data[i].deviceStatus[de].value;\n    }\n    var outputState = {};\n    for(let os in msg.data[i].outputStatus){\n        outputState[msg.data[i].outputStatus[os].name.replace(/ /g,\"_\")] = msg.data[i].outputStatus[os].value;\n    }\n    var alm = {};\n    for(let al in msg.data[i].alarm){\n        alm[msg.data[i].alarm[al].name.replace(/ /g,\"_\").replace(/-/g,\"_\").replace(/%20/g,\"_\")] = msg.data[i].alarm[al].value;\n    }\n    var cate = {};\n    for(let c in msg.data[i].category){\n        cate[msg.data[i].category[c].name.replace(/ /g,\"_\")] = msg.data[i].category[c].value;\n    }\n    \n    for(let p in powerMeter){\n        if(powerMeter[p] == msg.data[i].adr){\n            power[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : {},\n                _deviceStatus : {},\n                _outputStatus : {},\n                _alarm : alm,\n            }\n            powers[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"EPM07S\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : {},\n                _deviceStatus : {},\n                _outputStatus : {},\n                _alarm : alm,\n            }\n            let sizevt = {};\n            let sizect = {};\n            for(let [key,value] of Object.entries(setpoints)){\n                if(key == \"Size_VT\"){\n                    sizevt = {\n                        \"set\" : NaN,\n                        value : value.value,\n                        unit : value.unit,\n                        id : 29,\n                    }\n                }else if(key == \"Size_CT\"){\n                    sizect = {\n                        \"set\" : NaN,\n                        value : value.value,\n                        unit : value.unit,\n                        id : 30,\n                    }\n                }\n            }\n            energy_meter[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"EPM07S\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analogs,\n                _digitalInput : {},\n                _deviceStatus : {},\n                _outputStatus : {},\n                _alarm : alm,\n                _setpoint : {\n                    \"Size_VT\" : sizevt,\n                    \"Size_CT\" : sizect,\n                },\n                _commands : {\n                    /*\"Reset_KWh\" : 62,*/\n                }\n            }\n        }\n    }\n    if(msg.data[i].name == cold91.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold91.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold91.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold92.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold92.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold92.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold93.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold93.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold93.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold11.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold11.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold11.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold12.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold12.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold12.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold13.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold13.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold13.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold14.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold14.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold14.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold15.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold15.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold15.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold8.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold8.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold8.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n            \t_commands : {\n            \t    \"Device_ON\" : 138,\n            \t    \"Device_OFF\" : 141,\n            \t    \"Active_Defrost\" : 144,\n            \t    \"Alarm_Mute\" : 147,\n            \t    \"Keyboard_LOCK\" : 156,\n            \t    \"Keyboard_UN-LOCK\": 159,\n            \t    \"Light_ON\" : 168,\n            \t    \"Light_OFF\" : 171,\n            \t}\n            }\n        }\n    }else if(msg.data[i].name == cold10.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                }\n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold10.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold10.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n            \t_commands : {\n            \t    \"Device_ON\" : 138,\n            \t    \"Device_OFF\" : 141,\n            \t    \"Active_Defrost\" : 144,\n            \t    \"Alarm_Mute\" : 147,\n            \t    \"Keyboard_LOCK\" : 156,\n            \t    \"Keyboard_UN-LOCK\": 159,\n            \t    \"Light_ON\" : 168,\n            \t    \"Light_OFF\" : 171,\n            \t}\n            }\n        }\n    }else{\n        for(let col in coldRoom){\n            if(msg.data[i].adr == 19){\n                    //Edit last 22-06-2022 cold_storage_7\n                let objOutput = {};\n                if(msg.data[i].digitalInput[0].name == \"Auto\"){\n                    if(msg.data[i].digitalInput[0].value == 1){\n                        objOutput[msg.data[i].outputStatus[0].name] = msg.data[i].outputStatus[0].value;\n                        objOutput[msg.data[i].outputStatus[1].name] = msg.data[i].outputStatus[1].value;\n                        objOutput[msg.data[i].outputStatus[2].name] = msg.data[i].outputStatus[2].value;\n                        objOutput[msg.data[i].outputStatus[3].name] = msg.data[i].outputStatus[3].value;\n                    }else{\n                        objOutput[msg.data[i].outputStatus[0].name] = \"0\";\n                        objOutput[msg.data[i].outputStatus[1].name] = msg.data[i].outputStatus[1].value;\n                        objOutput[msg.data[i].outputStatus[2].name] = msg.data[i].outputStatus[2].value;\n                        objOutput[msg.data[i].outputStatus[3].name] = msg.data[i].outputStatus[3].value;\n                    }\n                }\n                let setpoint = {};\n                for(let [key,value] of Object.entries(setpoints)){\n                    setpoint[key] = {\n                        \"set\" : chk.uid ? chk.valueSet  : NaN,\n                        value : value.value,\n                        unit : value.unit,\n                        id : 19,\n                    }\n                }\n                cold_storage[msg.data[i].adr] = {\n                    \"_attr\" : {\n                \t\tmodel : \"XR77CX\",\n                \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n                \t\tAddress : msg.data[i].adr,\n                \t\tUID : msg.data[i].uid,\n                \t\tPeripheral : msg.data[i].lanid,\n                \t} ,\n                \t_analogInput : analogs,\n                \t_digitalInput : digital,\n                \t_deviceStatus : devState,\n                \t_outputStatus : objOutput,\n                \t_alarm : alm,\n                \t_setpoint : setpoint,\n                \t_commands : {\n                \t    \"Device_ON\" : 138,\n                \t    \"Device_OFF\" : 141,\n                \t    \"Active_Defrost\" : 144,\n                \t    \"Alarm_Mute\" : 147,\n                \t    \"Keyboard_LOCK\" : 156,\n                \t    \"Keyboard_UN-LOCK\" : 159,\n                \t    \"Light_ON\" : 168,\n                \t    \"Light_OFF\" : 171,\n                \t}\n                }\n            }\n            if(coldRoom[col] == msg.data[i].adr){\n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                }\n                cold_room[msg.data[i].adr] = {\n                \t\"_attr\" : {\n                \t\tmodel : \"XR77CX\",\n                \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n                \t\tAddress : msg.data[i].adr,\n                \t\tUID : msg.data[i].uid,\n                \t\tPeripheral : msg.data[i].lanid,\n                \t} ,\n                \t_analogInput : analog,\n                \t_digitalInput : digital,\n                \t_deviceStatus : devState,\n                \t_outputStatus : outputState,\n                \t_alarm : alm,\n                }\n                let setpoint = {};\n                for(let [key,value] of Object.entries(setpoints)){\n                    setpoint[key] = {\n                        \"set\" : chk.uid ? chk.valueSet  : NaN,\n                        value : value.value,\n                        unit : value.unit,\n                        id : 19,\n                    }\n                }\n                cold_storage[msg.data[i].adr] = {\n                    \"_attr\" : {\n                \t\tmodel : \"XR77CX\",\n                \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n                \t\tAddress : msg.data[i].adr,\n                \t\tUID : msg.data[i].uid,\n                \t\tPeripheral : msg.data[i].lanid,\n                \t} ,\n                \t_analogInput : analogs,\n                \t_digitalInput : digital,\n                \t_deviceStatus : devState,\n                \t_outputStatus : outputState,\n                \t_alarm : alm,\n                \t_setpoint : setpoint,\n                \t_commands : {\n                \t    \"Device_ON\" : 138,\n                \t    \"Device_OFF\" : 141,\n                \t    \"Active_Defrost\" : 144,\n                \t    \"Alarm_Mute\" : 147,\n                \t    \"Keyboard_LOCK\" : 156,\n                \t    \"Keyboard_UN-LOCK\" : 159,\n                \t    \"Light_ON\" : 168,\n                \t    \"Light_OFF\" : 171,\n                \t}\n                }\n            }\n        }\n    }\n    for(let c in condensor){\n        if(condensor[c] == msg.data[i].adr){\n            con[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            conden[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n            }\n            condensers[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XC1011D\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                _setpoint : {},\n                _commands : {\n                    \"Device_OFF\" : 20,\n                    \"Device_ON\" : 21,\n                    \"Keyboard_LOCK\" : 22,\n                    \"Keyboard_UN-LOCK\" : 23,\n                    \"Alarm_Mute\" : 24,\n                    \"Energy_saving_Active\" : 25,\n                    \"Energy_saving_NOT_Active\" : 26,\n                }\n            }\n        }\n        var fanEvap = JSON.parse(JSON.stringify(global.get(\"Evap\")));\n        for(let [a,b] of Object.entries(fanEvap)){\n            let obj = {};\n            obj[\"data\"] = {};\n            for(let [c,d] of Object.entries(b.data)){\n                obj[\"data\"][c.replace(/Evap1/g,\"\").replace(/Evap2/g,\"\")] = d;\n                \n            }\n            switch(b.deviceName){\n                case \"Fan_Evap._Condenser_1\":\n                    conden[\"172.16.46.23:502\"+\":1\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:1\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                    }\n                    condensers[\"172.16.46.23:502\"+\":1\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:1\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                        _setpoint:{},\n                        _commands:{},\n                    }\n                break;\n                case \"Fan_Evap._Condenser_2\":\n                    conden[\"172.16.46.23:502\"+\":2\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:2\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                    }\n                    condensers[\"172.16.46.23:502\"+\":2\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:2\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                        _setpoint:{},\n                        _commands:{},\n                    }\n                break;\n                default:\n                break;\n            }\n        }\n        conden[\"192.168.50.155:502:52\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evap2000.deviceName,\n                Address : \"192.168.50.155:502:52\",\n                Peripheral : \"TCP\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon3.data,\n            _deviceStatus : {\n                \"On\" : objCon3.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"No_Link\" : objCon3.nolink,\n            },\n        }\n        conden[\"156\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evapsec.deviceName,\n                Address : \"156\",\n                Peripheral : \"RS1\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon4.data,\n            _deviceStatus : {\n                \"On\" : objCon4.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"No_Link\" : objCon4.nolink,\n            },\n        }\n        condensers[\"192.168.50.155:502:52\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evapsec.deviceName,\n                Address : \"192.168.50.155:502:52\",\n                Peripheral : \"TCP\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon4.data,\n            _deviceStatus : {\n                \"On\" : objCon4.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"No_Link\" : objCon4.nolink,\n            },\n            _setpoint:{},\n            _commands:{},\n        }\n        condensers[\"156\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evap2000.deviceName,\n                Address : \"156\",\n                Peripheral : \"RS1\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon3.data,\n            _deviceStatus : {\n                \"On\" : objCon3.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"No_Link\" : objCon3.nolink,\n            },\n            _setpoint:{},\n            _commands:{},\n        }\n    }\n    if(msg.data[i].name == ante3.deviceName){\n        for(let an in anteRoom){\n        \tif(anteRoom[an] == msg.data[i].adr){\n        \t\tante[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tante_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,ante3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tante_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analogs,\n        \t\t\t_digitalInput : Object.assign(digital,ante3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\": 138,\n        \t\t\t    \"Device_OFF\": 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Keyboard_LOCK\" : 156,\n        \t\t\t    \"Keyboard_UN-LOCK\" : 159,\n        \t\t\t    \"Light_ON\" : 168,\n        \t\t\t    \"Light_OFF\" : 171,\n        \t\t\t},\n        \t\t}\n        \t}\n        }\n    }else{\n        for(let an in anteRoom){\n        \tif(anteRoom[an] == msg.data[i].adr){\n        \t\tante[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tante_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tlet setpoint = {};\n        \t\tfor(let [key,value] of Object.entries(setpoints)){\n        \t\t    setpoint[key] = {\n        \t\t        \"set\" : chk.uid ? chk.valueSet : NaN,\n        \t\t      //\"set\" : NaN,\n        \t\t        value : value.value,\n        \t\t        unit : value.unit,\n        \t\t        id : 19,\n        \t\t    }\n        \t\t}\n        \t\tante_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analogs,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : setpoint,\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\": 138,\n        \t\t\t    \"Device_OFF\": 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Keyboard_LOCK\" : 156,\n        \t\t\t    \"Keyboard_UN-LOCK\" : 159,\n        \t\t\t    \"Light_ON\" : 168,\n        \t\t\t    \"Light_OFF\" : 171,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }\n    for(let lo in loadingRoom){\n        if(loadingRoom[lo] == msg.data[i].adr){\n            loading[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n        }\n    }\n    if(msg.data[i].name == loading3.deviceName){\n        for(let lo in loading77){\n        \tif(loading77[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let lo in loading20){\n        \tif(loading20[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == loading4.deviceName){\n        for(let lo in loading77){\n        \tif(loading77[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let lo in loading20){\n        \tif(loading20[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else{\n        let setpoint = {};\n        for(let [key,value] of Object.entries(setpoints)){\n            setpoint[key] = {\n                \"set\" : chk.uid ? chk.valueSet : NaN,\n                // \"set\" : NaN,\n                value : value.value,\n                unit : value.unit,\n                id : 19\n            }\n        }\n        for(let lo in loading77){\n        \tif(loading77[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analogs,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : setpoint,\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Keyboard_LOCK\" : 156,\n        \t\t\t    \"Keyboard_UN-LOCK\" : 159,\n        \t\t\t    \"Light_ON\" : 168,\n        \t\t\t    \"Light_OFF\" : 171,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let lo in loading20){\n        \tif(loading20[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analogs,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : setpoint,\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Keyboard_LOCK\" : 156,\n        \t\t\t    \"Keyboard_UN-LOCK\" : 159,\n        \t\t\t    \"Light_ON\" : 168,\n        \t\t\t    \"Light_OFF\" : 171,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }\n    for(let d in detector){\n        if(detector[d] == msg.data[i].adr){\n            detect[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            detected[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XT121C\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n            }\n            let setP = {};\n            for(let [a,b] of Object.entries(analog)){\n                if(a == \"Pre_Alarm\"){\n                    let preAlm = {};\n                    if(chk.pointId == 8){\n                        preAlm = {\n                            uid : chk.uid,\n                            valueSet : chk.valueSet,\n                        }\n                    }\n                    setP[a] = {\n                        \"set\" : preAlm.uid ? preAlm.valueSet : NaN,\n                        value : b.value,\n                        unit : b.unit,\n                        id : 8,\n                    };  \n                }else if(a == \"High_Alarm\"){\n                    let HighAlm = {};\n                    if(chk.pointId == 9){\n                        HighAlm = {\n                            uid : chk.uid,\n                            valueSet : chk.valueSet,\n                        }\n                    }\n                    setP[a] = {\n                        \"set\" : HighAlm.uid ? HighAlm.valueSet : NaN,\n                        value : b.value,\n                        unit : b.unit,\n                        id : 9,\n                        \n                    };\n                }\n            }\n            detectors[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XT121C\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                _setpoint : setP,\n                _commands : {\n                    \"Device_OFF\" : 12,\n                    \"Device_ON\" : 13,\n                    \"Keyboard_LOCK\" : 14,\n                    \"Keyboard_UN-LOCK\" : 15,\n                    \"Alarm_Mute\" : 16,\n                    \"Energy_saving_Active\" : 17,\n                    \"Energy_saving_NOT_Active\" : 18,\n                }\n            }\n        }\n    }\n    for(let b in blast){\n        if(blast[b] == msg.data[i].adr){\n            bla[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n            }\n        }\n    }\n    if(msg.data[i].name.replace(/ /g,\"_\") == blast4.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name.replace(/ /g,\"_\") == blast5.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name.replace(/ /g,\"_\") == blast6.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == blast1.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,\n        \t\t\t}\n        \t\t}\n        \t\t\n        \t}\n        }\n    }else if(msg.data[i].name == blast2.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Fast_Freeze_ON\" : 156,\n        \t\t\t    \"Fast_Freeze_OFF\" : 159,\n        \t\t\t    \"Energy_saving_ON\" : 168,\n        \t\t\t    \"Energy_saving_OFF\" : 171,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == blast3.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Fast_Freeze_ON\" : 156,\n        \t\t\t    \"Fast_Freeze_OFF\" : 159,\n        \t\t\t    \"Energy_saving_ON\" : 168,\n        \t\t\t    \"Energy_saving_OFF\" : 171,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    \"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Fast_Freeze_ON\" : 156,\n        \t\t\t    \"Fast_Freeze_OFF\" : 159,\n        \t\t\t    \"Energy_saving_ON\" : 168,\n        \t\t\t    \"Energy_saving_OFF\" : 171,\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else{\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n                        \"Device_ON\":13,\n                        \"Device_OFF\":14,\n                        \"Active_Defrost\":15,\n                        \"Alarm_Mute\":16,\n                        \"Fast_Freeze_ON\":17,\n                        \"Fast_Freeze_OFF\":18,\n                        \"Energy_saving_ON\":21,\n                        \"Energy_saving_OFF\":22\n                    }\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n                        \"Device_ON\":13,\n                        \"Device_OFF\":14,\n                        \"Active_Defrost\":15,\n                        \"Alarm_Mute\":16,\n                        \"Fast_Freeze_ON\":17,\n                        \"Fast_Freeze_OFF\":18,\n                        \"Energy_saving_ON\":21,\n                        \"Energy_saving_OFF\":22\n                    }\n        \t\t}\n        \t}\n        }\n    }\n    for(let p in parkingRm){\n        if(parkingRm[p] == msg.data[i].adr){\n            parking[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            parking_room[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n            }\n            let setpoint = {}\n            for(let [key,value] of Object.entries(setpoints)){\n                setpoint[key] = {\n                    \"set\" : chk.uid ? chk.valueSet : NaN,\n                    // \"set\" : NaN,\n                    value : value.value,\n                    unit : value.unit,\n                    id : 19,\n                }\n            }\n            packing_rooms[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analogs,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                _setpoint : setpoint,\n                _commands : {\n    \t\t\t    \"Device_ON\" : 138,\n    \t\t\t    \"Device_OFF\" : 141,\n    \t\t\t    \"Active_Defrost\" : 144,\n    \t\t\t    \"Alarm_Mute\" : 147,\n    \t\t\t    \"Fast_Freeze_ON\" : 156,\n    \t\t\t    \"Fast_Freeze_OFF\" : 159,\n    \t\t\t    \"Energy_saving_ON\" : 168,\n    \t\t\t    \"Energy_saving_OFF\" : 171,\n    \t\t\t}\n            }\n        }\n    }\n    for(let ch in childroom){\n        if(childroom[ch] == msg.data[i].adr){\n            child[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            chill_room[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            let setpoint = {};\n            for(let [key,value] of Object.entries(setpoints)){\n                setpoint[key] = {\n                    \"set\" : chk.uid ? chk.valueSet : NaN,\n                    // \"set\" : NaN,\n                    value : value.value,\n                    unit : value.unit,\n                    id : 19,\n                }\n            }\n            child_rooms[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analogs,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                _setpoint : setpoint,\n                _commands : {\n    \t\t\t    \"Device_ON\" : 138,\n    \t\t\t    \"Device_OFF\" : 141,\n    \t\t\t    \"Active_Defrost\" : 144,\n    \t\t\t    \"Alarm_Mute\" : 147,\n    \t\t\t    \"Fast_Freeze_ON\" : 156,\n    \t\t\t    \"Fast_Freeze_OFF\" : 159,\n    \t\t\t    \"Energy_saving_ON\" : 168,\n    \t\t\t    \"Energy_saving_OFF\" : 171,\n    \t\t\t}\n            }\n        }\n    }\n    if(msg.data[i].name == myCompressor.deviceName){\n        let setP = {};\n        for(let [key,value] of Object.entries(setpoints)){\n            setP[key] = {\n                \"set\" : chk.uid ? chk.valueSet : NaN,\n                value : value.value,\n                unit : value.unit,\n                id : 19\n            }\n        }\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCompressor.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCompressor.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:setP,\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == myCom355.deviceName){\n        let setP = {};\n        for(let [key,value] of Object.entries(setpoints)){\n            setP[key] = {\n                \"set\" : chk.uid ? chk.valueSet : NaN,\n                value : value.value,\n                unit : value.unit,\n                id : 19\n            }\n        }\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCom355.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCom355.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:setP,\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == comp1.deviceName){\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == comp2.deviceName){\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }else{\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }\n    /*compress[\"192.168.50.155:502:51\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCom355.deviceName,\n            Address : \"192.168.50.155:502:51\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : myCom355.data,\n        _deviceStatus : {},\n        _outputStatus : {},\n        _alarm : {},\n    }\n    compressors[\"192.168.50.155:502:51\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCom355.deviceName,\n            Address : \"192.168.50.155:502:51\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : myCom355.data,\n        _deviceStatus : onCom3,\n        _outputStatus : {},\n        _alarm : com3alarm,\n        _setpoint:{},\n        _commands:{},\n    }\n    compress[\"192.168.50.155:502:59\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCompressor.deviceName,\n            Address : \"192.168.50.155:502:59\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : objCom.data,\n        _deviceStatus : {\n            \"On\" : objCom.on,\n        },\n        _outputStatus : {},\n        _alarm : {\n            \"No_Link\" : objCom.nolink,\n        },\n    }\n    compressors[\"192.168.50.155:502:59\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCompressor.deviceName,\n            Address : \"192.168.50.155:502:59\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : objCom.data,\n        _deviceStatus : {\n            \"On\" : objCom.on,\n        },\n        _outputStatus : {},\n        _alarm : {\n            \"No_Link\" : objCom.nolink,\n        },\n        _setpoin:{},\n        _commands:{},\n    }*/\n    for(let o in Inter){\n        if(Inter[o] == msg.data[i].adr){\n            inters[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            inter[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XJP60D\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : Object.assign(digital,objInter.data),\n                _deviceStatus : objInter.on,\n                _outputStatus : outputState,\n                _alarm : objInter.alarm,\n                 \n            }\n            inter_rooms[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XJP60D\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : Object.assign(digital,objInter.data),\n                _deviceStatus : objInter.on,\n                _outputStatus : outputState,\n                _alarm : objInter.alarm,\n                _setpoint:{},\n                _commands:{},\n            }\n        }\n    }\n    if(msg.data[i].name == vesselss.deviceName){\n        for(let ves in Vessel){\n            if(Vessel[ves] == msg.data[i].adr){\n                vessels[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                vessel[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesselss.data),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                vessel_rooms[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesselss.data),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                    _setpoint:{},\n                    _commands:{},\n                }\n            }\n        }\n    }else{\n        for(let ves in Vessel){\n            if(Vessel[ves] == msg.data[i].adr){\n                vessels[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                let vesse;\n                if(msg.data[i].name.replace(/ /g,\"_\") == \"VESSEL_1\"){\n                    vesse = objVessel1;\n                }else if(msg.data[i].name.replace(/ /g,\"_\") == \"VESSEL_2\"){\n                    vesse = objVessel2;\n                }\n                vessel[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesse),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                vessel_rooms[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesse),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                    _setpoint:{},\n                    _commands:{\n                        \"Device_ON\" : 28,\n                        \"Device_OFF\" : 29,\n                    },\n                }\n            }\n        }\n    }\n    var ves3 = {};\n    ves3[\"data\"] = {};\n    ves3[\"nolink\"] = {};\n    for(let [a,b] of Object.entries(vesselss.data)){\n        if(a == \"No_Link\"){\n            ves3[\"nolink\"][a] = b;\n        }else{\n            ves3[\"data\"][a] = b;\n        }\n    }\n    if(vesselss.deviceName){\n        vessel[\"172.16.46.23\"] = {\n            \"_attr\" : {\n                model : \"TouchScreen\",\n                name : vesselss.deviceName,\n                Address : \"172.16.46.23\",\n                Peripheral : \"TCP\",\n            } ,\n            _analogInput : {},\n            _digitalInput : ves3.data,\n            _deviceStatus : {},\n            _outputStatus : {},\n            _alarm : ves3.nolink,\n        }\n        vessel_rooms[\"172.16.46.23\"] = {\n            \"_attr\" : {\n                model : \"TouchScreen\",\n                name : vesselss.deviceName,\n                Address : \"172.16.46.23\",\n                Peripheral : \"TCP\",\n            } ,\n            _analogInput : {},\n            _digitalInput : ves3.data,\n            _deviceStatus : {},\n            _outputStatus : {},\n            _alarm : ves3.nolink,\n            _setpoint:{},\n            _commands:{},\n        }\n    }\n}\n\nall_ctrl = {\n    \"Cold_Room\" : cold_storage,\n    \"Ante_Room\" : ante_rooms,\n    \"Chill_Room\" : child_rooms,\n    \"Packing_Room\" : packing_rooms,\n    \"Loading_Room\" : load_rooms,\n    \"Blast_Room\" : blastfreezers,\n    \"FanEvap.Condenser\" : condensers,\n    \"INTER\" : inter_rooms,\n    \"VESSEL\" : vessel_rooms,\n    \"NH3_Detector\": detectors,\n    \"EnergyMeter\" : energy_meter,\n    \"Compressor\" : compressors,\n}\nparseData = {\n    \"Cold_Room\" : cold_storage,\n    \"Ante_Room\" : ante_rooms,\n    \"Chill_Room\" : child_rooms,\n    \"Packing_Room\" : packing_rooms,\n    \"Loading_Room\" : load_rooms,\n    \"Blast_Room\" : blastfreezers,\n    \"FanEvap.Condenser\" : condensers,\n    \"INTER\" : inter_rooms,\n    \"VESSEL\" : vessel_rooms,\n    \"NH3_Detector\": detectors,\n    \"EnergyMeter\" : energy_meter,\n    \"Compressor\" : compressors,\n}\nmsg.data = {\n    id : 1,\n    name : \"Suwinthawong\",\n    INTER : inter,\n    VESSEL : vessel,\n    Compressor : compress,\n    Chill_Room : chill_room,\n    Packing_Room : parking_room,\n    Blast_Room : blast_room,\n    NH3_Detector : detected,\n    Loading_Room : loadings_room,\n    Ante_Room : ante_room,\n    Condenser : conden,\n    EnergyMeter : powers,\n    Cold_Room : cold_room,\n}\nif(parseData !== undefined || \n    parseData !== null){\n    msg.parseData = parseData;\n    msg.questData = all_ctrl;\n}\nmsg.host = flow.get(\"Setting\").url.replace(/\\//g,\"\").replace(/http:/g,\"\");\n\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong_devicesList.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 3760,
        "wires": [
            [
                "2ebe5685b08516f6"
            ]
        ]
    },
    {
        "id": "c7e063d709b98c03",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 800,
        "wires": []
    },
    {
        "id": "b7c185fe05c331ef",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 3700,
        "wires": []
    },
    {
        "id": "7d22a3e0a4b2c37f",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Assign from XWEB and Touch",
        "func": "var touch = global.get(\"dataScreens\");\n\nvar powerMeter = [1,2,3,4,128,129];\nvar condensor = [5];\nvar coldRoom = [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,115,116,117,118,119,120,121,122,123,124];\nvar anteRoom = [25,26,127];\nvar loadingRoom = [27,28,36,37,125,126];\nvar detector = [29,30,31,32];\nvar blast = [33,34,35,39,40,41];\nvar parkingRm = [38]\nvar childroom = [22];\nvar comp = [\"192.168.50.83:502:101\",\"192.168.50.84:502:102\",\"192.168.50.85:502:103\",\"192.168.50.86:502:104\"];\nvar Inter = [96];\nvar Vessel = [97,98];\n\nvar xjad = [\n    \"192.168.50.155:502:51\",\n    \"192.168.50.155:502:52\",\n    \"192.168.50.155:502:53\",\n    \"192.168.50.155:502:54\",\n    \"192.168.50.155:502:55\",\n    \"192.168.50.155:502:56\",\n    \"192.168.50.155:502:57\",\n    \"192.168.50.155:502:58\",\n    \"192.168.50.155:502:59\",\n    \"192.168.50.155:502:60\",\n    \"192.168.50.155:502:61\",\n    \"192.168.50.155:502:62\",\n    \"192.168.50.155:502:63\",\n    \"192.168.50.155:502:64\",\n    \"192.168.50.155:502:65\",\n    \"192.168.50.155:502:66\",\n    \"192.168.50.155:502:67\",\n    \"192.168.50.155:502:68\",\n    \"192.168.50.155:502:69\",\n    156,157,\n];\n\nvar loading77 = [27,28];\nvar loading20 = [125,126];\nvar blast77 = [34,35,];\nvar blast20 = [33,39,40,41];\n\nvar power = {};\nvar cold = {};\nvar con = {};\nvar ante = {};\nvar loading = {};\nvar detect = {};\nvar bla = {};\nvar parking = {};\nvar child = {};\nvar com = {};\nvar inters = {};\nvar vessels = {};\n\nvar all_ctrl = {};\nvar parseData = {};\n\nvar powers = {};\nvar cold_room = {};\nvar ante_room = {};\nvar loading_room = {};\nvar loadings_room = {};\nvar detected = {};\nvar blast_room = {};\nvar blasts_room = {};\nvar parking_room = {};\nvar chill_room = {};\nvar inter = {};\nvar vessel = {};\nvar conden = {};\nvar compress = {};\n\nvar data = global.get(\"xjaData\")\n\nvar objVessel1 = {};\nvar objVessel2 = {};\nvar objInter = {};\nobjInter[\"data\"] = {};\nobjInter[\"on\"] = {};\nobjInter[\"alarm\"] = {};\nvar blast1 = {};\nblast1[\"data\"] = {};\nblast1[\"alarm\"] = {};\nblast1[\"analog\"] = {};\nblast1[\"deviceStatus\"] = {};\nvar blast2 = {};\nblast2[\"data\"] = {};\nblast2[\"alarm\"] = {};\nblast2[\"analog\"] = {};\nblast2[\"deviceStatus\"] = {};\nvar blast3 = {};\nblast3[\"data\"] = {};\nblast3[\"alarm\"] = {};\nblast3[\"analog\"] = {};\nblast3[\"deviceStatus\"] = {};\n\nlet compress12 = global.get(\"Comp1-2\");\nlet comp1 = {};\ncomp1[\"data\"] = {};\nlet comp2 = {};\ncomp2[\"data\"] = {};\nfor(let [c,d] of Object.entries(compress12)){\n    if(c.includes(\"Comp1\")){\n        comp1[\"deviceName\"] = \"Compressor_No.1\";\n        comp1[\"data\"][d.name] = d.value;\n    }else if(c.includes(\"Comp2\")){\n        comp2[\"deviceName\"] = \"Compressor_No.2\"\n        comp2[\"data\"][d.name] = d.value;\n    }\n}\nfor(let to of touch){\n    let nameDevice = to.deviceName;\n    switch(nameDevice){\n        case \"VESSEL_1\":\n            for(let [a,b] of Object.entries(to.data)){\n               if(a.includes(\"Vessel1\")){\n                   objVessel1[a] = b;\n               }\n           }\n        break;\n        case \"VESSEL_2\":\n            for(let [a,b] of Object.entries(to.data)){\n               if(a.includes(\"Vessel2\")){\n                   objVessel2[a] = b;\n               }\n           }\n        break;\n        case \"INTER\":\n            for(let [a,b] of Object.entries(to.data)){\n                let name = a.replace(/ /g,\"_\");\n                let inter = name.includes(\"Inter\");\n                // objInter[a.replace(/ /g,\"_\")] = b;\n                if(inter == false){\n                    if(name.includes(\"INTER\")){\n                        objInter[\"data\"][name] = b;\n                    }else if(name !== \"Pb_1\" && name == \"On\"){\n                        objInter[\"on\"][name] = b;\n                    }else{\n                        if(name !== \"Pb_1\"){\n                            objInter[\"alarm\"][name] = b;\n                        }\n                    }\n                }\n            }\n        break;\n        default:\n        break;\n    }\n    \t\n    switch(to.deviceName){\n        case \"Blast_Freezer_1\":\n            for(let [k,v] of Object.entries(to.data)){\n                blast1[\"deviceName\"] = to.deviceName;\n                if(k.includes(\"Blast1_Fan_\") || k.includes(\"Blast1_Defrost\") || k.includes(\"Blast1_suction_SV\")){\n                     blast1[\"data\"][k] = v;\n                }else if(k.includes(\"Room\")){\n                    blast1[\"analog\"][k] = v;\n                }else if(k.includes(\"On\")){\n                    blast1[\"deviceStatus\"][k] = v;\n                }else{\n                    blast1[\"alarm\"][k] = v;\n                }\n            }\n        break;\n        case \"Blast_Freezer_2\":\n            for(let [k,v] of Object.entries(to.data)){\n                blast2[\"deviceName\"] = to.deviceName;\n                if(k.includes(\"Blast2_Fan_\") || k.includes(\"Blast2_Defrost\") || k.includes(\"Blast2_suction_SV\") || k.includes(\"Blast2_Liquid_SV\")){\n                    blast2[\"data\"][k] = v;\n                }else if(k.includes(\"Room\")){\n                    blast2[\"analog\"][k] = v;\n                }else if(k.includes(\"On\")){\n                    blast2[\"deviceStatus\"][k] = v;\n                }else{\n                    blast2[\"alarm\"][k] = v;\n                }\n            }\n        break;\n        case \"Blast_Freezer_3\":\n            for(let [k,v] of Object.entries(to.data)){\n                blast3[\"deviceName\"] = to.deviceName;\n                if(k.includes(\"Blast3_Fan_\") || k.includes(\"Blast3_Defrost\") || k.includes(\"Blast3_suction_SV\") || k.includes(\"Blast3_Liquid_SV\")){\n                    blast3[\"data\"][k] = v;\n                }else if(k.includes(\"Room\")){\n                    blast3[\"analog\"][k] = v;\n                }else if(k.includes(\"On\")){\n                    blast3[\"deviceStatus\"][k] = v;\n                }else{\n                    blast3[\"alarm\"][k] = v;\n                }\n            }\n        break;\n        default:\n        break;\n    }\n}\nconst finded = (name) =>{\n    for(let i in data){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k == name){\n                return {\n                    name : k,\n                    value : v,\n                };\n            }\n        }\n    }\n}\nvar xja = {};\nxja[\"Blast_Freezer_4\"] = {};\nxja[\"Blast_Freezer_5\"] = {};\nxja[\"Blast_Freezer_6\"] = {};\nxja[\"Cold_Storage_9-1\"] = {};\nxja[\"Cold_Storage_9-2\"] = {};\nxja[\"Cold_Storage_9-3\"] = {};\nxja[\"Cold_Storage_10\"] = {};\nxja[\"Cold_Storage_11-1\"] = {};\nxja[\"Cold_Storage_11-2\"] = {};\nxja[\"Cold_Storage_11-3\"] = {};\nxja[\"Cold_Storage_11-4\"] = {};\nxja[\"Cold_Storage_11-5\"] = {};\nxja[\"Cold_Storage_8\"] = {};\nxja[\"Compressor_No.3\"] = {};\nxja[\"Compressor_No.4\"] = {};\nxja[\"VESSEL_3\"] = {};\nxja[\"Loading_3\"] = {};\nxja[\"Loading_4\"] = {};\nxja[\"Fan_Evap._Condenser_3\"] = {};\nxja[\"Fan_Evap._Condenser_4\"] = {};\nxja[\"Ante_Room_3\"] = {};\nlet com3alarm = {};\nlet onCom3 = {};\nfor(let i = 0; i < data.length; i++){\n    if(data[i].adr == \"192.168.50.155:502:51\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k !== \"On\" && \n                k !== \"Alarm\" &&\n                k !== \"No_Link\"\n            ){\n                xja[\"Compressor_No.3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Compressor_No.3\",\n                    adr : data[i].adr,\n                    name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    value : v,\n                }\n            }else{\n                if(k == \"No_Link\" || k == \"Alarm\"){\n                    com3alarm[k] = v;\n                }else if(k == \"On\"){\n                    onCom3[k] = v;\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:52\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let key = k.replace(/ /g,\"_\").replace(/-/g,\"_\");\n            let name;\n            switch(key){\n                case \"Overload_Fan_1\":\n                    name = \"Fan_1_Overload\";\n                break;\n                case \"Overload_Fan_2\":\n                    name = \"Fan_2_Overload\";\n                break;\n                case \"Overload_Fan_3\":\n                    name = \"Fan_3_Overload\";\n                break;\n                case \"Overload_Fan_4\":\n                    name = \"Fan_4_Overload\";\n                break;\n                case \"Overload_Water_Pump\":\n                    name = \"Water_Pump_Overlaod\";\n                break;\n                default:\n                    name = key;\n                break;\n            }\n            xja[\"Fan_Evap._Condenser_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                deviceName : \"Fan_Evap._Condenser_3\",\n                adr : data[i].adr,\n                name : name,\n                value : v,\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:53\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast4s = k.includes(\"Freezer_4\");\n                if(blast4s == false){\n                    if(k !== \"On\" && k !== \"No-Link\"){\n                        xja[\"VESSEL_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"VESSEL_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:53\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let has = k.includes(\"Freezer_4\");\n                if(has == true){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:54\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer_4\")){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:55\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let has = k.includes(\"Freezer_4\");\n                let blast5 = k.includes(\"Freezer_5\");\n                if(has == true){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    \tdeviceName : \"Blast_Freezer_4\",\n                    \tadr : data[i].adr,\n                    \tname : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    \tvalue : v\n                    }\n                }\n                if(blast5 == true){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:56\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer_6\");\n                if(k.includes(\"Freezer_5\")){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Freezer_6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:57\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer_6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:58\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer_6\");\n                if(blast6 == true){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:59\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold91 = k.includes(\"Storage_9-1\");\n                let Cold92 = k.includes(\"Storage_9-2\");\n                if(Cold91 == false && Cold92 == false){\n                    xja[\"Compressor_No.4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Compressor_No.4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else{\n                    if(Cold91 == true){\n                        xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-1\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }else if(Cold92 == true){\n                        xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-2\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:60\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold92 = k.includes(\"Storage_9-2\");\n                if(Cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_9-3\")){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:61\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:62\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-3\")){\n                    xja[\"Cold_Storage_11-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:63\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11-5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:64\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:65\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let load3 = k.includes(\"Loading_3\");\n                let load4 = k.includes(\"Loading_4\");\n                if(load4 == true){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Ante_Room_3\")){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n                if(load3 == true && load4 == false){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:66\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold9 = k.includes(\"Storage_9\");\n                let cold91 = k.includes(\"Storage_9_1\");\n                let cold92 = k.includes(\"Storage_9_2\");\n                if(cold9 == false){\n                    if(k !== \"On\" && k !== \"No_Link\"){\n                        xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Ante_Room_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n                if(cold91 == true){\n                    xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:67\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold93 = k.includes(\"Storage_9_3\");\n                let cold11 = k.includes(\"Storage_11\");\n                if(cold93 == true){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n                if(k.includes(\"Storage_11_1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11_2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11_3\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_11_4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:68\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage_11_5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage_8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_4\")){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\").replace(/_Area/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading_3\")){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\").replace(/_Area/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:69\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let ante3 = k.includes(\"Ante_Room_3\");\n                if(ante3 == true){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"156\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let fan = k.includes(\"Fan\");\n                let key = k.replace(/ /g,\"_\").replace(/-/g,\"_\");\n                if(fan == true){\n                    switch(key){\n                        case \"Overload_Fan_1\":\n                            name = \"Fan_1_Overload\";\n                        break;\n                        case \"Overload_Fan_2\":\n                            name = \"Fan_2_Overload\";\n                        break;\n                        case \"Overload_Fan_3\":\n                            name = \"Fan_3_Overload\";\n                        break;\n                        case \"Overload_Fan_4\":\n                            name = \"Fan_4_Overload\";\n                        break;\n                        case \"Overload_Water_Pump\":\n                            name = \"Water_Pump_Overlaod\";\n                        break;\n                        default:\n                            name = key;\n                        break;\n                    }\n                    xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Fan_Evap._Condenser_4\",\n                        adr : data[i].adr,\n                        name : name,\n                        value : v,\n                    }\n                }\n            }\n        }\n    }else if(data[i].adr == \"157\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            let key = k.replace(/ /g,\"_\").replace(/-/g,\"_\");\n            if(k == dataFind.name){\n                switch(key){\n                    case \"Overload_Fan_1\":\n                        name = \"Fan_1_Overload\";\n                    break;\n                    case \"Overload_Fan_2\":\n                        name = \"Fan_2_Overload\";\n                    break;\n                    case \"Overload_Fan_3\":\n                        name = \"Fan_3_Overload\";\n                    break;\n                    case \"Overload_Fan_4\":\n                        name = \"Fan_4_Overload\";\n                    break;\n                    case \"Overload_Water_Pump\":\n                        name = \"Water_Pump_Overlaod\";\n                    break;\n                    default:\n                        name = key;\n                    break;\n                }\n                xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Fan_Evap._Condenser_4\",\n                    adr : data[i].adr,\n                    name : name,\n                    value : v,\n                }\n            }\n        }\n    }\n}\nmsg.test = xja\nvar timestamp = parseInt(new Date().getTime() / 1000);\nvar output = {};\nvar blast4 = {};\nblast4[\"data\"] = {};\nvar blast5 = {};\nblast5[\"data\"] = {};\nvar blast6 = {};\nblast6[\"data\"] = {};\nvar cold91 = {};\ncold91[\"data\"] = {};\nvar cold92 = {};\ncold92[\"data\"] = {};\nvar cold93 = {};\ncold93[\"data\"] = {};\nvar cold8 = {};\ncold8[\"data\"] = {};\nvar cold10 = {};\ncold10[\"data\"] = {};\nvar cold11 = {};\ncold11[\"data\"] = {};\nvar cold12 = {};\ncold12[\"data\"] = {};\nvar cold13 = {};\ncold13[\"data\"] = {};\nvar cold14 = {};\ncold14[\"data\"] = {};\nvar cold15 = {};\ncold15[\"data\"] = {};\nvar ante3 = {};\nante3[\"data\"] = {};\nvar loading3 = {};\nloading3[\"data\"] = {};\nvar loading4 = {};\nloading4[\"data\"] = {};\nvar myCompressor = {};\nmyCompressor[\"data\"] = {};\nvar evap2000 = {};\nevap2000[\"data\"] = {};\nvar evapsec = {};\nevapsec[\"data\"] = {};\nvar myCom355 = {};\nmyCom355[\"data\"] = {};\nvar vesselss = {};\nvesselss[\"data\"] = {};\nfor(let [k,v] of Object.entries(xja)){\n    for(let [a,b] of Object.entries(v)){\n        let name = b.name.includes(\"Blast_Freezer_4\");\n        let nameCold = b.name.includes(\"Cold_Storage_9\");\n        let nameLoad3 = b.name.includes(\"Loading_3\");\n        switch(b.deviceName){\n            case \"Blast_Freezer_5\":\n                blast5[\"deviceName\"] = b.deviceName;\n                blast5[\"timestamp\"] = timestamp;\n                blast5[\"data\"][b.name] = b.value;\n            break;\n            case \"Blast_Freezer_6\":\n                blast6[\"deviceName\"] = b.deviceName;\n                blast6[\"timestamp\"] = timestamp;\n                blast6[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_9-1\":\n                cold91[\"deviceName\"] = b.deviceName;\n                cold91[\"timestamp\"] = timestamp;\n                cold91[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_9-2\":\n                cold92[\"deviceName\"] = b.deviceName;\n                cold92[\"timestamp\"] = timestamp;\n                cold92[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_9-3\":\n                cold93[\"deviceName\"] = b.deviceName;\n                cold93[\"timestamp\"] = timestamp;\n                cold93[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_8\":\n                cold8[\"deviceName\"] = b.deviceName;\n                cold8[\"timestamp\"] = timestamp;\n                cold8[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_10\":\n                cold10[\"deviceName\"] = b.deviceName;\n                cold10[\"timestamp\"] = timestamp;\n                cold10[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-1\":\n                cold11[\"deviceName\"] = b.deviceName;\n                cold11[\"timestamp\"] = timestamp;\n                cold11[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-2\":\n                cold12[\"deviceName\"] = b.deviceName;\n                cold12[\"timestamp\"] = timestamp;\n                cold12[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-3\":\n                cold13[\"deviceName\"] = b.deviceName;\n                cold13[\"timestamp\"] = timestamp;\n                cold13[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-4\":\n                cold14[\"deviceName\"] = b.deviceName;\n                cold14[\"timestamp\"] = timestamp;\n                cold14[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-5\":\n                cold15[\"deviceName\"] = b.deviceName;\n                cold15[\"timestamp\"] = timestamp;\n                cold15[\"data\"][b.name] = b.value;\n            break;\n            case \"Ante_Room_3\":\n                if(nameCold == false){\n                    ante3[\"deviceName\"] = b.deviceName;\n                    ante3[\"timestamp\"] = timestamp;\n                    ante3[\"data\"][b.name] = b.value;\n                }else{\n                    if(b.name == \"Cold_Storage_9_1_Overload\"){\n                        cold91[\"data\"][b.name] = b.value;\n                    }else if(b.name == \"Cold_Storage_9_2_Overload\"){\n                        cold92[\"data\"][b.name] = b.value;\n                    }\n                }\n            break;\n            case \"Loading_3\":\n                loading3[\"deviceName\"] = b.deviceName;\n                loading3[\"timestamp\"] = timestamp;\n                loading3[\"data\"][b.name.replace(/_Area/g,\"\")] = b.value;\n            break;\n            case \"Loading_4\":\n                if(nameLoad3 == false){\n                    loading4[\"deviceName\"] = b.deviceName;\n                    loading4[\"timestamp\"] = timestamp;\n                    loading4[\"data\"][b.name.replace(/_Area/g,\"\")] = b.value;\n                }\n            break;\n            case \"Compressor_No.3\":\n                myCom355[\"deviceName\"] = b.deviceName;\n                myCom355[\"timestamp\"] = timestamp;\n                myCom355[\"data\"][b.name] = b.value;\n            break;\n            case \"Compressor_No.4\":\n                myCompressor[\"deviceName\"] = b.deviceName;\n                myCompressor[\"timestamp\"] = timestamp;\n                if(b.name !== \"No_Link\"){\n                    myCompressor[\"data\"][b.name] = b.value;\n                }\n            break;\n            case \"Fan_Evap._Condenser_3\":\n                evap2000[\"deviceName\"] = b.deviceName;\n                evap2000[\"timestamp\"] = timestamp;\n                evap2000[\"data\"][b.name] = b.value;\n            break;\n            case \"Fan_Evap._Condenser_4\":\n                evapsec[\"deviceName\"] = b.deviceName;\n                evapsec[\"timestamp\"] = timestamp;\n                evapsec[\"data\"][b.name] = b.value;\n            break;\n            case \"VESSEL_3\":\n                let name = b.name.includes(\"Blast_Freezer_4\")\n                if(name == false){\n                    vesselss[\"deviceName\"] = b.deviceName;\n                    vesselss[\"timestamp\"] = timestamp;\n                    vesselss[\"data\"][b.name] = b.value;\n                }\n            break;\n            default:\n            break;\n        }\n        if(name == true){\n            blast4[\"deviceName\"] = \"Blast_Freezer_4\";\n            blast4[\"timestamp\"] = timestamp;\n            blast4[\"data\"][b.name] = b.value;\n        }\n    }\n}\n\nlet objCom = {};\nobjCom[\"data\"] = {};\nlet objCon3 = {};\nobjCon3[\"data\"] = {};\nlet objCon4 = {};\nobjCon4[\"data\"] = {};\nfor(let [a,b] of Object.entries(myCompressor.data)){\n    if(a == \"No_Link\"){\n        objCom[\"nolink\"] = b;\n    }else if(a == \"On\"){\n        objCom[\"on\"] = b;\n    }else{\n        objCom[\"data\"][a] = b; \n    }\n}\nfor(let [a,b] of Object.entries(evap2000.data)){\n    if(a == \"No_Link\"){\n        objCon3[\"nolink\"] = b;\n    }else if(a == \"On\"){\n        objCon3[\"on\"] = b;\n    }else if(a == \"Alarm\"){\n        objCon3[\"alarm\"] = b;\n    }else{\n        objCon3[\"data\"][a] = b;\n    }\n}\nfor(let [a,b] of Object.entries(evapsec.data)){\n    if(a == \"No_Link\"){\n        objCon4[\"nolink\"] = b;\n    }else if(a == \"On\"){\n        objCon4[\"on\"] = b;\n    }else{\n        objCon4[\"data\"][a] = b;\n    }\n}\n\nconst compareSet = (uid) =>{\n    let obj = {};\n    let chk = flow.get(\"checkset\")||{}\n    for(let [k,v] of Object.entries(chk)){\n        adr = k.split(\"_\")[0];\n        pointId = k.split(\"_\")[1];\n        if(adr == uid){\n            obj = {\n                pointId : pointId,\n                uid : adr,\n                valueSet : v,\n            }\n        }\n    }\n    return obj;\n}\nlet energy_meter = {};\nlet cold_storage = {};\nlet condensers = {};\nlet ante_rooms = {};\nlet load_rooms = {};\nlet detectors = {};\nlet blastfreezers = {};\nlet packing_rooms = {};\nlet child_rooms = {};\nlet compressors = {};\nlet inter_rooms = {};\nlet vessel_rooms = {};\n\nfor(let i in msg.data){\n    \n    let chk = compareSet(msg.data[i].uid);\n    \n    var analog = {};\n    var analogs = {};\n    var setpoints = {};\n    for(let a in msg.data[i].analogInput){\n        analog[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n            value : msg.data[i].analogInput[a].value,\n            unit : msg.data[i].analogInput[a].unit,\n        };\n        if(msg.data[i].analogInput[a].unit == \"\"){\n            analog[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                value : msg.data[i].analogInput[a].value,\n                unit : \"\",\n            };\n        }\n        if(msg.data[i].analogInput[a].name.replace(/ /g,\"_\") == \"Size_VT\" ||\n            msg.data[i].analogInput[a].name.replace(/ /g,\"_\") == \"Size_CT\" ||\n            msg.data[i].analogInput[a].name.replace(/ /g,\"_\") == \"Set_Point\"\n        ){\n            setpoints[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                value : msg.data[i].analogInput[a].value,\n                unit : msg.data[i].analogInput[a].unit,\n            }\n            if(msg.data[i].analogInput[a].unit == \"\"){\n                setpoints[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                    value : msg.data[i].analogInput[a].value,\n                    unit : \"\",\n                };\n            }\n        }else{\n            analogs[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                value : msg.data[i].analogInput[a].value,\n                unit : msg.data[i].analogInput[a].unit,\n            }\n            if(msg.data[i].analogInput[a].unit == \"\"){\n                analogs[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                    value : msg.data[i].analogInput[a].value,\n                    unit : \"\",\n                };\n            }\n            if(msg.data[i].analogInput[a].name.replace(/ /g,\"_\") == \"Pressure_Target\"){\n                setpoints[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                    value : msg.data[i].analogInput[a].value,\n                    unit : msg.data[i].analogInput[a].unit\n                }\n            }\n        }\n    }\n    var digital = {};\n    for(let d in msg.data[i].digitalInput){\n        digital[msg.data[i].digitalInput[d].name.replace(/ /g,\"_\")] = msg.data[i].digitalInput[d].value;\n    }\n    var devState = {};\n    for(let de in msg.data[i].deviceStatus){\n        devState[msg.data[i].deviceStatus[de].name.replace(/ /g,\"_\")] = msg.data[i].deviceStatus[de].value;\n    }\n    var outputState = {};\n    for(let os in msg.data[i].outputStatus){\n        outputState[msg.data[i].outputStatus[os].name.replace(/ /g,\"_\")] = msg.data[i].outputStatus[os].value;\n    }\n    var alm = {};\n    for(let al in msg.data[i].alarm){\n        alm[msg.data[i].alarm[al].name.replace(/ /g,\"_\").replace(/-/g,\"_\").replace(/%20/g,\"_\")] = msg.data[i].alarm[al].value;\n    }\n    var cate = {};\n    for(let c in msg.data[i].category){\n        cate[msg.data[i].category[c].name.replace(/ /g,\"_\")] = msg.data[i].category[c].value;\n    }\n    \n    for(let p in powerMeter){\n        if(powerMeter[p] == msg.data[i].adr){\n            power[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : {},\n                _deviceStatus : {},\n                _outputStatus : {},\n                _alarm : alm,\n            }\n            powers[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"EPM07S\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : {},\n                _deviceStatus : {},\n                _outputStatus : {},\n                _alarm : alm,\n            }\n            let sizevt = {};\n            let sizect = {};\n            for(let [key,value] of Object.entries(setpoints)){\n                if(key == \"Size_VT\"){\n                    sizevt = {\n                        \"set\" : NaN,\n                        value : value.value,\n                        unit : value.unit,\n                        id : 29,\n                    }\n                }else if(key == \"Size_CT\"){\n                    sizect = {\n                        \"set\" : NaN,\n                        value : value.value,\n                        unit : value.unit,\n                        id : 30,\n                    }\n                }\n            }\n            energy_meter[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"EPM07S\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analogs,\n                _digitalInput : {},\n                _deviceStatus : {},\n                _outputStatus : {},\n                _alarm : alm,\n                _setpoint : {\n                    \"Size_VT\" : sizevt,\n                    \"Size_CT\" : sizect,\n                },\n                _commands : {\n                    /*\"Reset_KWh\" : 62,*/\n                }\n            }\n        }\n    }\n    if(msg.data[i].name == cold91.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold91.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold91.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t/*\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,*/\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold92.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold92.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold92.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t/*\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,*/\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold93.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold93.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold93.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t/*\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,*/\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold11.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold11.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold11.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t/*\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,*/\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold12.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold12.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold12.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t/*\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,*/\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold13.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold13.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold13.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t/*\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,*/\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold14.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold14.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold14.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t/*\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,*/\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold15.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold15.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold15.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n                _commands : {\n                \t/*\"Device_ON\" : 138,\n                \t\"Device_OFF\" : 141,\n                \t\"Active_Defrost\" : 144,\n                \t\"Alarm_Mute\" : 147,\n                \t\"Keyboard_LOCK\" : 156,\n                \t\"Keyboard_UN-LOCK\": 159,\n                \t\"Light_ON\" : 168,\n                \t\"Light_OFF\" : 171,*/\n                }\n            }\n        }\n    }else if(msg.data[i].name == cold8.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold8.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold8.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n            \t_commands : {\n            \t    /*\"Device_ON\" : 138,\n            \t    \"Device_OFF\" : 141,\n            \t    \"Active_Defrost\" : 144,\n            \t    \"Alarm_Mute\" : 147,\n            \t    \"Keyboard_LOCK\" : 156,\n            \t    \"Keyboard_UN-LOCK\": 159,\n            \t    \"Light_ON\" : 168,\n            \t    \"Light_OFF\" : 171,*/\n            \t}\n            }\n        }\n    }else if(msg.data[i].name == cold10.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold10.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            }\n            cold_storage[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold10.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t_setpoint : {},\n            \t_commands : {\n            \t    /*\"Device_ON\" : 138,\n            \t    \"Device_OFF\" : 141,\n            \t    \"Active_Defrost\" : 144,\n            \t    \"Alarm_Mute\" : 147,\n            \t    \"Keyboard_LOCK\" : 156,\n            \t    \"Keyboard_UN-LOCK\": 159,\n            \t    \"Light_ON\" : 168,\n            \t    \"Light_OFF\" : 171,*/\n            \t}\n            }\n        }\n    }else{\n        for(let col in coldRoom){\n            if(msg.data[i].adr == 19){\n                    //Edit last 22-06-2022 cold_storage_7\n                let objOutput = {};\n                if(msg.data[i].digitalInput[0].name == \"Auto\"){\n                    if(msg.data[i].digitalInput[0].value == 1){\n                        objOutput[msg.data[i].outputStatus[0].name] = msg.data[i].outputStatus[0].value;\n                        objOutput[msg.data[i].outputStatus[1].name] = msg.data[i].outputStatus[1].value;\n                        objOutput[msg.data[i].outputStatus[2].name] = msg.data[i].outputStatus[2].value;\n                        objOutput[msg.data[i].outputStatus[3].name] = msg.data[i].outputStatus[3].value;\n                    }else{\n                        objOutput[msg.data[i].outputStatus[0].name] = \"0\";\n                        objOutput[msg.data[i].outputStatus[1].name] = msg.data[i].outputStatus[1].value;\n                        objOutput[msg.data[i].outputStatus[2].name] = msg.data[i].outputStatus[2].value;\n                        objOutput[msg.data[i].outputStatus[3].name] = msg.data[i].outputStatus[3].value;\n                    }\n                }\n                let setpoint = {};\n                for(let [key,value] of Object.entries(setpoints)){\n                    setpoint[key] = {\n                        \"set\" : chk.uid ? chk.valueSet  : NaN,\n                        value : value.value,\n                        unit : value.unit,\n                        id : 19,\n                    }\n                }\n                cold_storage[msg.data[i].adr] = {\n                    \"_attr\" : {\n                \t\tmodel : \"XR77CX\",\n                \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n                \t\tAddress : msg.data[i].adr,\n                \t\tUID : msg.data[i].uid,\n                \t\tPeripheral : msg.data[i].lanid,\n                \t} ,\n                \t_analogInput : analogs,\n                \t_digitalInput : digital,\n                \t_deviceStatus : devState,\n                \t_outputStatus : objOutput,\n                \t_alarm : alm,\n                \t_setpoint : setpoint,\n                \t_commands : {\n                \t    /*\"Device_ON\" : 138,\n                \t    \"Device_OFF\" : 141,\n                \t    \"Active_Defrost\" : 144,\n                \t    \"Alarm_Mute\" : 147,\n                \t    \"Keyboard_LOCK\" : 156,\n                \t    \"Keyboard_UN-LOCK\" : 159,\n                \t    \"Light_ON\" : 168,\n                \t    \"Light_OFF\" : 171,*/\n                \t}\n                }\n            }\n            if(coldRoom[col] == msg.data[i].adr){\n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                cold_room[msg.data[i].adr] = {\n                \t\"_attr\" : {\n                \t\tmodel : \"XR77CX\",\n                \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n                \t\tAddress : msg.data[i].adr,\n                \t\tUID : msg.data[i].uid,\n                \t\tPeripheral : msg.data[i].lanid,\n                \t} ,\n                \t_analogInput : analog,\n                \t_digitalInput : digital,\n                \t_deviceStatus : devState,\n                \t_outputStatus : outputState,\n                \t_alarm : alm,\n                }\n                let setpoint = {};\n                for(let [key,value] of Object.entries(setpoints)){\n                    setpoint[key] = {\n                        \"set\" : chk.uid ? chk.valueSet  : NaN,\n                        value : value.value,\n                        unit : value.unit,\n                        id : 19,\n                    }\n                }\n                cold_storage[msg.data[i].adr] = {\n                    \"_attr\" : {\n                \t\tmodel : \"XR77CX\",\n                \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n                \t\tAddress : msg.data[i].adr,\n                \t\tUID : msg.data[i].uid,\n                \t\tPeripheral : msg.data[i].lanid,\n                \t} ,\n                \t_analogInput : analogs,\n                \t_digitalInput : digital,\n                \t_deviceStatus : devState,\n                \t_outputStatus : outputState,\n                \t_alarm : alm,\n                \t_setpoint : setpoint,\n                \t_commands : {\n                \t    /*\"Device_ON\" : 138,\n                \t    \"Device_OFF\" : 141,\n                \t    \"Active_Defrost\" : 144,\n                \t    \"Alarm_Mute\" : 147,\n                \t    \"Keyboard_LOCK\" : 156,\n                \t    \"Keyboard_UN-LOCK\" : 159,\n                \t    \"Light_ON\" : 168,\n                \t    \"Light_OFF\" : 171,*/\n                \t}\n                }\n            }\n        }\n    }\n    for(let c in condensor){\n        if(condensor[c] == msg.data[i].adr){\n            con[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            conden[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n            }\n            condensers[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XC1011D\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                _setpoint : {},\n                _commands : {\n                    /*\"Device_OFF\" : 20,\n                    \"Device_ON\" : 21,\n                    \"Keyboard_LOCK\" : 22,\n                    \"Keyboard_UN-LOCK\" : 23,\n                    \"Alarm_Mute\" : 24,\n                    \"Energy_saving_Active\" : 25,\n                    \"Energy_saving_NOT_Active\" : 26,*/\n                }\n            }\n        }\n        var fanEvap = JSON.parse(JSON.stringify(global.get(\"Evap\")));\n        for(let [a,b] of Object.entries(fanEvap)){\n            let obj = {};\n            obj[\"data\"] = {};\n            for(let [c,d] of Object.entries(b.data)){\n                obj[\"data\"][c.replace(/Evap1/g,\"\").replace(/Evap2/g,\"\")] = d;\n                \n            }\n            switch(b.deviceName){\n                case \"Fan_Evap._Condenser_1\":\n                    conden[\"172.16.46.23:502\"+\":1\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:1\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                    }\n                    condensers[\"172.16.46.23:502\"+\":1\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:1\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                        _setpoint:{},\n                        _commands:{},\n                    }\n                break;\n                case \"Fan_Evap._Condenser_2\":\n                    conden[\"172.16.46.23:502\"+\":2\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:2\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                    }\n                    condensers[\"172.16.46.23:502\"+\":2\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:2\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                        _setpoint:{},\n                        _commands:{},\n                    }\n                break;\n                default:\n                break;\n            }\n        }\n        conden[\"192.168.50.155:502:52\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evap2000.deviceName,\n                Address : \"192.168.50.155:502:52\",\n                Peripheral : \"TCP\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon3.data,\n            _deviceStatus : {\n                \"On\" : objCon3.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"No_Link\" : objCon3.nolink,\n            },\n        }\n        conden[\"156\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evapsec.deviceName,\n                Address : \"156\",\n                Peripheral : \"RS1\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon4.data,\n            _deviceStatus : {\n                \"On\" : objCon4.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"No_Link\" : objCon4.nolink,\n            },\n        }\n        condensers[\"192.168.50.155:502:52\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evapsec.deviceName,\n                Address : \"192.168.50.155:502:52\",\n                Peripheral : \"TCP\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon4.data,\n            _deviceStatus : {\n                \"On\" : objCon4.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"No_Link\" : objCon4.nolink,\n            },\n            _setpoint:{},\n            _commands:{},\n        }\n        condensers[\"156\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evap2000.deviceName,\n                Address : \"156\",\n                Peripheral : \"RS1\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon3.data,\n            _deviceStatus : {\n                \"On\" : objCon3.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"No_Link\" : objCon3.nolink,\n            },\n            _setpoint:{},\n            _commands:{},\n        }\n    }\n    if(msg.data[i].name == ante3.deviceName){\n        for(let an in anteRoom){\n        \tif(anteRoom[an] == msg.data[i].adr){\n        \t\tante[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tante_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,ante3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tante_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analogs,\n        \t\t\t_digitalInput : Object.assign(digital,ante3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\": 138,\n        \t\t\t    \"Device_OFF\": 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Keyboard_LOCK\" : 156,\n        \t\t\t    \"Keyboard_UN-LOCK\" : 159,\n        \t\t\t    \"Light_ON\" : 168,\n        \t\t\t    \"Light_OFF\" : 171,*/\n        \t\t\t},\n        \t\t}\n        \t}\n        }\n    }else{\n        for(let an in anteRoom){\n        \tif(anteRoom[an] == msg.data[i].adr){\n        \t\tante[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tante_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tlet setpoint = {};\n        \t\tfor(let [key,value] of Object.entries(setpoints)){\n        \t\t    setpoint[key] = {\n        \t\t        \"set\" : chk.uid ? chk.valueSet : NaN,\n        \t\t      //\"set\" : NaN,\n        \t\t        value : value.value,\n        \t\t        unit : value.unit,\n        \t\t        id : 19,\n        \t\t    }\n        \t\t}\n        \t\tante_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analogs,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : setpoint,\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\": 138,\n        \t\t\t    \"Device_OFF\": 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Keyboard_LOCK\" : 156,\n        \t\t\t    \"Keyboard_UN-LOCK\" : 159,\n        \t\t\t    \"Light_ON\" : 168,\n        \t\t\t    \"Light_OFF\" : 171,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }\n    for(let lo in loadingRoom){\n        if(loadingRoom[lo] == msg.data[i].adr){\n            loading[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n        }\n    }\n    if(msg.data[i].name == loading3.deviceName){\n        for(let lo in loading77){\n        \tif(loading77[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let lo in loading20){\n        \tif(loading20[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == loading4.deviceName){\n        for(let lo in loading77){\n        \tif(loading77[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let lo in loading20){\n        \tif(loading20[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : {},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else{\n        let setpoint = {};\n        for(let [key,value] of Object.entries(setpoints)){\n            setpoint[key] = {\n                \"set\" : chk.uid ? chk.valueSet : NaN,\n                // \"set\" : NaN,\n                value : value.value,\n                unit : value.unit,\n                id : 19\n            }\n        }\n        for(let lo in loading77){\n        \tif(loading77[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analogs,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : setpoint,\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Keyboard_LOCK\" : 156,\n        \t\t\t    \"Keyboard_UN-LOCK\" : 159,\n        \t\t\t    \"Light_ON\" : 168,\n        \t\t\t    \"Light_OFF\" : 171,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let lo in loading20){\n        \tif(loading20[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tload_rooms[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analogs,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint : setpoint,\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Keyboard_LOCK\" : 156,\n        \t\t\t    \"Keyboard_UN-LOCK\" : 159,\n        \t\t\t    \"Light_ON\" : 168,\n        \t\t\t    \"Light_OFF\" : 171,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }\n    for(let d in detector){\n        if(detector[d] == msg.data[i].adr){\n            detect[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            detected[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XT121C\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n            }\n            let setP = {};\n            for(let [a,b] of Object.entries(analog)){\n                if(a == \"Pre_Alarm\"){\n                    let preAlm = {};\n                    if(chk.pointId == 8){\n                        preAlm = {\n                            uid : chk.uid,\n                            valueSet : chk.valueSet,\n                        }\n                    }\n                    setP[a] = {\n                        \"set\" : preAlm.uid ? preAlm.valueSet : NaN,\n                        value : b.value,\n                        unit : b.unit,\n                        id : 8,\n                    };  \n                }else if(a == \"High_Alarm\"){\n                    let HighAlm = {};\n                    if(chk.pointId == 9){\n                        HighAlm = {\n                            uid : chk.uid,\n                            valueSet : chk.valueSet,\n                        }\n                    }\n                    setP[a] = {\n                        \"set\" : HighAlm.uid ? HighAlm.valueSet : NaN,\n                        value : b.value,\n                        unit : b.unit,\n                        id : 9,\n                        \n                    };\n                }\n            }\n            detectors[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XT121C\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                _setpoint : setP,\n                _commands : {\n                    /*\"Device_OFF\" : 12,\n                    \"Device_ON\" : 13,\n                    \"Keyboard_LOCK\" : 14,\n                    \"Keyboard_UN-LOCK\" : 15,\n                    \"Alarm_Mute\" : 16,\n                    \"Energy_saving_Active\" : 17,\n                    \"Energy_saving_NOT_Active\" : 18*/\n                }\n            }\n        }\n    }\n    for(let b in blast){\n        if(blast[b] == msg.data[i].adr){\n            bla[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n            }\n        }\n    }\n    if(msg.data[i].name.replace(/ /g,\"_\") == blast4.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name.replace(/ /g,\"_\") == blast5.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name.replace(/ /g,\"_\") == blast6.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == blast1.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,*/\n        \t\t\t}\n        \t\t}\n        \t\t\n        \t}\n        }\n    }else if(msg.data[i].name == blast2.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 13,\n        \t\t\t    \"Device_OFF\" : 14,\n        \t\t\t    \"Active_Defrost\" : 15,\n        \t\t\t    \"Alarm_Mute\" : 16,\n        \t\t\t    \"Fast_Freeze_ON\" : 17,\n        \t\t\t    \"Fast_Freeze_OFF\" : 18,\n        \t\t\t    \"Energy_saving_ON\" : 21,\n        \t\t\t    \"Energy_saving_OFF\" : 22,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Fast_Freeze_ON\" : 156,\n        \t\t\t    \"Fast_Freeze_OFF\" : 159,\n        \t\t\t    \"Energy_saving_ON\" : 168,\n        \t\t\t    \"Energy_saving_OFF\" : 171,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == blast3.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Fast_Freeze_ON\" : 156,\n        \t\t\t    \"Fast_Freeze_OFF\" : 159,\n        \t\t\t    \"Energy_saving_ON\" : 168,\n        \t\t\t    \"Energy_saving_OFF\" : 171,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n        \t\t\t    /*\"Device_ON\" : 138,\n        \t\t\t    \"Device_OFF\" : 141,\n        \t\t\t    \"Active_Defrost\" : 144,\n        \t\t\t    \"Alarm_Mute\" : 147,\n        \t\t\t    \"Fast_Freeze_ON\" : 156,\n        \t\t\t    \"Fast_Freeze_OFF\" : 159,\n        \t\t\t    \"Energy_saving_ON\" : 168,\n        \t\t\t    \"Energy_saving_OFF\" : 171,*/\n        \t\t\t}\n        \t\t}\n        \t}\n        }\n    }else{\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n                        /*\"Device_ON\":13,\n                        \"Device_OFF\":14,\n                        \"Active_Defrost\":15,\n                        \"Alarm_Mute\":16,\n                        \"Fast_Freeze_ON\":17,\n                        \"Fast_Freeze_OFF\":18,\n                        \"Energy_saving_ON\":21,\n                        \"Energy_saving_OFF\":22*/\n                    }\n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tblastfreezers[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands : {\n                        /*\"Device_ON\":13,\n                        \"Device_OFF\":14,\n                        \"Active_Defrost\":15,\n                        \"Alarm_Mute\":16,\n                        \"Fast_Freeze_ON\":17,\n                        \"Fast_Freeze_OFF\":18,\n                        \"Energy_saving_ON\":21,\n                        \"Energy_saving_OFF\":22*/\n                    }\n        \t\t}\n        \t}\n        }\n    }\n    for(let p in parkingRm){\n        if(parkingRm[p] == msg.data[i].adr){\n            parking[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            parking_room[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n            }\n            let setpoint = {}\n            for(let [key,value] of Object.entries(setpoints)){\n                setpoint[key] = {\n                    \"set\" : chk.uid ? chk.valueSet : NaN,\n                    // \"set\" : NaN,\n                    value : value.value,\n                    unit : value.unit,\n                    id : 19,\n                }\n            }\n            packing_rooms[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analogs,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                _setpoint : setpoint,\n                _commands : {\n    \t\t\t    /*\"Device_ON\" : 138,\n    \t\t\t    \"Device_OFF\" : 141,\n    \t\t\t    \"Active_Defrost\" : 144,\n    \t\t\t    \"Alarm_Mute\" : 147,\n    \t\t\t    \"Fast_Freeze_ON\" : 156,\n    \t\t\t    \"Fast_Freeze_OFF\" : 159,\n    \t\t\t    \"Energy_saving_ON\" : 168,\n    \t\t\t    \"Energy_saving_OFF\" : 171,*/\n    \t\t\t}\n            }\n        }\n    }\n    for(let ch in childroom){\n        if(childroom[ch] == msg.data[i].adr){\n            child[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            chill_room[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            let setpoint = {};\n            for(let [key,value] of Object.entries(setpoints)){\n                setpoint[key] = {\n                    \"set\" : chk.uid ? chk.valueSet : NaN,\n                    // \"set\" : NaN,\n                    value : value.value,\n                    unit : value.unit,\n                    id : 19,\n                }\n            }\n            child_rooms[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analogs,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                _setpoint : setpoint,\n                _commands : {\n    \t\t\t    /*\"Device_ON\" : 138,\n    \t\t\t    \"Device_OFF\" : 141,\n    \t\t\t    \"Active_Defrost\" : 144,\n    \t\t\t    \"Alarm_Mute\" : 147,\n    \t\t\t    \"Fast_Freeze_ON\" : 156,\n    \t\t\t    \"Fast_Freeze_OFF\" : 159,\n    \t\t\t    \"Energy_saving_ON\" : 168,\n    \t\t\t    \"Energy_saving_OFF\" : 171,*/\n    \t\t\t}\n            }\n        }\n    }\n    if(msg.data[i].name == myCompressor.deviceName){\n        let setP = {};\n        for(let [key,value] of Object.entries(setpoints)){\n            setP[key] = {\n                \"set\" : chk.uid ? chk.valueSet : NaN,\n                value : value.value,\n                unit : value.unit,\n                id : 19\n            }\n        }\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCompressor.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCompressor.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:setP,\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == myCom355.deviceName){\n        let setP = {};\n        for(let [key,value] of Object.entries(setpoints)){\n            setP[key] = {\n                \"set\" : chk.uid ? chk.valueSet : NaN,\n                value : value.value,\n                unit : value.unit,\n                id : 19\n            }\n        }\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCom355.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCom355.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:setP,\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == comp1.deviceName){\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == comp2.deviceName){\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }else{\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t}\n        \t\tcompressors[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t_setpoint:{},\n        \t\t\t_commands:{},\n        \t\t}\n        \t}\n        }\n    }\n    /*compress[\"192.168.50.155:502:51\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCom355.deviceName,\n            Address : \"192.168.50.155:502:51\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : myCom355.data,\n        _deviceStatus : {},\n        _outputStatus : {},\n        _alarm : {},\n    }\n    compressors[\"192.168.50.155:502:51\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCom355.deviceName,\n            Address : \"192.168.50.155:502:51\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : myCom355.data,\n        _deviceStatus : onCom3,\n        _outputStatus : {},\n        _alarm : com3alarm,\n        _setpoint:{},\n        _commands:{},\n    }\n    compress[\"192.168.50.155:502:59\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCompressor.deviceName,\n            Address : \"192.168.50.155:502:59\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : objCom.data,\n        _deviceStatus : {\n            \"On\" : objCom.on,\n        },\n        _outputStatus : {},\n        _alarm : {\n            \"No_Link\" : objCom.nolink,\n        },\n    }\n    compressors[\"192.168.50.155:502:59\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCompressor.deviceName,\n            Address : \"192.168.50.155:502:59\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : objCom.data,\n        _deviceStatus : {\n            \"On\" : objCom.on,\n        },\n        _outputStatus : {},\n        _alarm : {\n            \"No_Link\" : objCom.nolink,\n        },\n        _setpoin:{},\n        _commands:{},\n    }*/\n    for(let o in Inter){\n        if(Inter[o] == msg.data[i].adr){\n            inters[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            inter[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XJP60D\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : Object.assign(digital,objInter.data),\n                _deviceStatus : objInter.on,\n                _outputStatus : outputState,\n                _alarm : objInter.alarm,\n                 \n            }\n            inter_rooms[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XJP60D\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : Object.assign(digital,objInter.data),\n                _deviceStatus : objInter.on,\n                _outputStatus : outputState,\n                _alarm : objInter.alarm,\n                _setpoint:{},\n                _commands:{},\n            }\n        }\n    }\n    if(msg.data[i].name == vesselss.deviceName){\n        for(let ves in Vessel){\n            if(Vessel[ves] == msg.data[i].adr){\n                vessels[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                vessel[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesselss.data),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                vessel_rooms[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesselss.data),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                    _setpoint:{},\n                    _commands:{},\n                }\n            }\n        }\n    }else{\n        for(let ves in Vessel){\n            if(Vessel[ves] == msg.data[i].adr){\n                vessels[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                let vesse;\n                if(msg.data[i].name.replace(/ /g,\"_\") == \"VESSEL_1\"){\n                    vesse = objVessel1;\n                }else if(msg.data[i].name.replace(/ /g,\"_\") == \"VESSEL_2\"){\n                    vesse = objVessel2;\n                }\n                vessel[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesse),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                vessel_rooms[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesse),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                    _setpoint:{},\n                    _commands:{\n                        /*\"Device_ON\" : 28,\n                        \"Device_OFF\" : 29,*/\n                    },\n                }\n            }\n        }\n    }\n    var ves3 = {};\n    ves3[\"data\"] = {};\n    ves3[\"nolink\"] = {};\n    for(let [a,b] of Object.entries(vesselss.data)){\n        if(a == \"No_Link\"){\n            ves3[\"nolink\"][a] = b;\n        }else{\n            ves3[\"data\"][a] = b;\n        }\n    }\n    if(vesselss.deviceName){\n        vessel[\"172.16.46.23\"] = {\n            \"_attr\" : {\n                model : \"TouchScreen\",\n                name : vesselss.deviceName,\n                Address : \"172.16.46.23\",\n                Peripheral : \"TCP\",\n            } ,\n            _analogInput : {},\n            _digitalInput : ves3.data,\n            _deviceStatus : {},\n            _outputStatus : {},\n            _alarm : ves3.nolink,\n        }\n        vessel_rooms[\"172.16.46.23\"] = {\n            \"_attr\" : {\n                model : \"TouchScreen\",\n                name : vesselss.deviceName,\n                Address : \"172.16.46.23\",\n                Peripheral : \"TCP\",\n            } ,\n            _analogInput : {},\n            _digitalInput : ves3.data,\n            _deviceStatus : {},\n            _outputStatus : {},\n            _alarm : ves3.nolink,\n            _setpoint:{},\n            _commands:{},\n        }\n    }\n}\n\nall_ctrl = {\n    \"Cold_Room\" : cold_room,\n    \"Ante_Room\" : ante_room,\n    \"Chill_Room\" : chill_room,\n    \"Packing_Room\" : parking_room,\n    \"Loading_Room\" : loadings_room,\n    \"Blast_Room\" : blast_room,\n    \"FanEvap.Condenser\" : conden,\n    \"INTER\" : inter,\n    \"VESSEL\" : vessel,\n    \"NH3_Detector\": detected,\n    \"EnergyMeter\" : powers,\n    \"Compressor\" : compress,\n}\nparseData = {\n    \"Cold_Room\" : cold_storage,\n    \"Ante_Room\" : ante_rooms,\n    \"Chill_Room\" : child_rooms,\n    \"Packing_Room\" : packing_rooms,\n    \"Loading_Room\" : load_rooms,\n    \"Blast_Room\" : blastfreezers,\n    \"FanEvap.Condenser\" : condensers,\n    \"INTER\" : inter_rooms,\n    \"VESSEL\" : vessel_rooms,\n    \"NH3_Detector\": detectors,\n    \"EnergyMeter\" : energy_meter,\n    \"Compressor\" : compressors,\n}\nmsg.data = {\n    id : 1,\n    name : \"Suwinthawong\",\n    INTER : inter,\n    VESSEL : vessel,\n    Compressor : compress,\n    Chill_Room : chill_room,\n    Packing_Room : parking_room,\n    Blast_Room : blast_room,\n    NH3_Detector : detected,\n    Loading_Room : loadings_room,\n    Ante_Room : ante_room,\n    Condenser : conden,\n    EnergyMeter : powers,\n    Cold_Room : cold_room,\n}\nif(parseData !== undefined || \n    parseData !== null){\n    msg.parseData = parseData;\n    msg.questData = all_ctrl;\n}\nmsg.host = flow.get(\"Setting\").url.replace(/\\//g,\"\").replace(/http:/g,\"\");\n\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong_devicesList.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 3620,
        "wires": [
            []
        ]
    },
    {
        "id": "10ae6eac88fb8b27",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "Input API DATA",
        "info": "",
        "x": 320,
        "y": 3680,
        "wires": []
    },
    {
        "id": "e157d83712b46900",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "set list permission Suwinthainwong",
        "func": "var output = {};\noutput = {\n    level : [\n        \"Administrator\",\n        \"Site Manager\",\n        \"General User\"\n        ],\n    permission : {\n        \"Suwinthawong\" : [\n            \"Cold_Storage_1\",\n            \"Cold_Storage_2\",\n            \"Cold_Storage_3\",\n            \"Cold_Storage_4\",\n            \"Cold_Storage_6\",\n            \"Cold_Storage_7\",\n            \"Cold_Storage_8\",\n            \"Cold_Storage_9\",\n            \"Cold_Storage_10\",\n            \"Cold_Storage_11\",\n            \"Ante_Room_1\",\n            \"Ante_Room_2\",\n            \"Ante_Room_3\",\n            \"Chill_Room\",\n            \"Loading_1\",\n            \"Loading_2\",\n            \"Loading_3\",\n            \"Loading_4\",\n            \"Energy_Meter\",\n            \"Packing_Room_1-1\",\n            \"Blast_Freezer_Room_1\",\n            \"Blast_Freezer_Room_2\",\n            \"Blast_Freezer_Room_3\",\n            \"Blast_Freezer_Room_4\",\n            \"Blast_Freezer_Room_5\",\n            \"Blast_Freezer_Room_6\",\n            \"Machine_Room_Ground_Floor\",\n            \"Machine_Room_2nd_Floor\",\n        ]\n    },\n    type : [\n        \"Read Only\",\n        \"Read/Write\",\n    ]\n}\nflow.set(\"UserLevel\",output);\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong_permissionList.json\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 3220,
        "wires": [
            [
                "aa8f8b28a29e84ca"
            ]
        ]
    },
    {
        "id": "79853141b68029de",
        "type": "inject",
        "z": "3151ab83381d0f9c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 980,
        "y": 3220,
        "wires": [
            [
                "e157d83712b46900"
            ]
        ]
    },
    {
        "id": "631cbd8bdbabf9e6",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 3220,
        "wires": []
    },
    {
        "id": "aa8f8b28a29e84ca",
        "type": "file",
        "z": "3151ab83381d0f9c",
        "name": "List Permission",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1440,
        "y": 3220,
        "wires": [
            [
                "631cbd8bdbabf9e6"
            ]
        ]
    },
    {
        "id": "0e842847c33ffdf1",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var reciveToken = msg.req.headers['authorization'].split(' ')[1];\nmsg.payload = reciveToken;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 3320,
        "wires": [
            [
                "9a3d8c04684a0580"
            ]
        ]
    },
    {
        "id": "9a3d8c04684a0580",
        "type": "jwt verify",
        "z": "3151ab83381d0f9c",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 450,
        "y": 3320,
        "wires": [
            [
                "afe60b5ed87e7f6a"
            ]
        ]
    },
    {
        "id": "afe60b5ed87e7f6a",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "let storageName = Object.keys(msg.token.permission)[0];\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\\"+ storageName +\"_permissionList.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 3320,
        "wires": [
            [
                "21d17175cee32ae2"
            ]
        ]
    },
    {
        "id": "21d17175cee32ae2",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 780,
        "y": 3320,
        "wires": [
            [
                "6638e6f927943d20"
            ]
        ]
    },
    {
        "id": "6638e6f927943d20",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 930,
        "y": 3320,
        "wires": [
            [
                "a4486ff0a9634cf7"
            ]
        ]
    },
    {
        "id": "37ccd7c1b417a18c",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "set list permission",
        "func": "var output = {};\nvar permiss = flow.get(\"storage\");\nfor(let key of Object.keys(permiss)){\n    output = {\n        level : [\n            \"Administrator\",\n            \"Site Manager\",\n            \"General User\"\n            ],\n        permission : {\n            [key] : [\n                \"Cold_Storage_1\",\n                \"Cold_Storage_2\",\n                \"Cold_Storage_3\",\n                \"Cold_Storage_4\",\n                \"Cold_Storage_6\",\n                \"Cold_Storage_7\",\n                \"Cold_Storage_8\",\n                \"Cold_Storage_9\",\n                \"Cold_Storage_10\",\n                \"Cold_Storage_11\",\n                \"Ante_Room_1\",\n                \"Ante_Room_2\",\n                \"Ante_Room_3\",\n                \"Chill_Room\",\n                \"Loading_1\",\n                \"Loading_2\",\n                \"Loading_3\",\n                \"Loading_4\",\n                \"Energy_Meter\",\n                \"Packing_Room_1-1\",\n                \"Blast_Freezer_Room_1\",\n                \"Blast_Freezer_Room_2\",\n                \"Blast_Freezer_Room_3\",\n                \"Blast_Freezer_Room_4\",\n                \"Blast_Freezer_Room_5\",\n                \"Blast_Freezer_Room_6\",\n                \"Machine_Room_Ground_Floor\",\n                \"Machine_Room_2nd_Floor\",\n            ]\n        },\n        type : [\n            \"Read Only\",\n            \"Read/Write\",\n        ],\n    }\n}\nflow.set(\"UserLevel\",output);\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 3260,
        "wires": [
            []
        ]
    },
    {
        "id": "e5a7c3517adf5394",
        "type": "http in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "url": "/api/setdefault/value",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 4260,
        "wires": [
            [
                "dff0b02de10523d9"
            ]
        ]
    },
    {
        "id": "dff0b02de10523d9",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Config json",
        "func": "var output = {};\nlet storageName = msg.payload.site;\nlet dataSite = msg.payload.data;\nmsg.payload = dataSite;\nmsg.filename = \"C:\\\\inetpub\\\\wwwroot\\\\build\\\\config\\\\\"+storageName+\"\\\\defaultPlant.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 4260,
        "wires": [
            [
                "965a553e7e21a638"
            ]
        ]
    },
    {
        "id": "965a553e7e21a638",
        "type": "file",
        "z": "3151ab83381d0f9c",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 500,
        "y": 4260,
        "wires": [
            [
                "4c5214c1c9e99d15"
            ]
        ]
    },
    {
        "id": "4c5214c1c9e99d15",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 4260,
        "wires": []
    },
    {
        "id": "0158a492f44e7935",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "Setting.url",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1570,
        "y": 1680,
        "wires": [
            [
                "a793ba86cecdf517"
            ]
        ]
    },
    {
        "id": "e18d77f7fdcc3e12",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nvar parseData = {};\nvar ctrl = flow.get(\"Ctrl\")||{};\n\nlet _set = flow.get(\"setpointChk\")||{};\nfor(let a of Object.values(ctrl)){\n    for(let values of Object.values(a)){\n        if(values[\"_attr\"].UID == msg.req.body.UID){\n            for(let [k,v] of Object.entries(values[\"_setpoint\"])){\n                let key = msg.req.body.UID +\"_\"+ v.id;\n                if(v.value !== msg.req.body.set){\n                    output = {\n                        setname : k,\n                        name : values[\"_attr\"].name,\n                        device : msg.req.body.UID,\n                        id : msg.req.body.id,\n                        value : msg.req.body.set,\n                    }\n                    _set[key] = v.value;\n                }else{\n                    if(!_set[key]){\n                        output = null;\n                        delete _set[key];\n                    }\n                }\n                parseData = {\n                    _set : v.set,\n                    _value : v.value,\n                    _unit : v.unit,\n                    _id : v.id,\n                }\n            }\n        }\n    }\n}\nflow.set(\"setpointChk\",_set);\nmsg.setpoint = output;\nmsg.from = parseData;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1700,
        "wires": [
            [
                "b78751c632b8f74a"
            ]
        ]
    },
    {
        "id": "b78751c632b8f74a",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#token}}\n    SELECT * FROM [dbo].[USERS_MANAGEMENTS] WHERE [USERNAME] = '{{{username}}}'\n{{/token}}",
        "output": "str",
        "x": 960,
        "y": 1700,
        "wires": [
            [
                "1bf0cee617ad2a4f"
            ]
        ]
    },
    {
        "id": "1bf0cee617ad2a4f",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1120,
        "y": 1700,
        "wires": [
            [
                "1424620ba99b3f7f"
            ]
        ]
    },
    {
        "id": "1424620ba99b3f7f",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nswitch(msg.payload[0].TYPE){\n    case \"Read/Write\":\n        output = {\n            device : msg.setpoint.device,\n            id : msg.setpoint.id,\n            value : msg.setpoint.value,\n        }\n    break;\n    case \"Read Only\":\n        output = {\n            status: \"failed\",\n            message : \"Access denied !\",\n        }\n    break;\n    default:\n    break\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1700,
        "wires": [
            [
                "669460dc3655b03a"
            ]
        ]
    },
    {
        "id": "a793ba86cecdf517",
        "type": "http request",
        "z": "3151ab83381d0f9c",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{url}}}api?action=edit_setpoint&username=Admin&password=Admin&device={{{payload.device}}}&point={{{payload.id}}}&value={{{payload.value}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1750,
        "y": 1680,
        "wires": [
            [
                "583a0d4e7ddeda40"
            ]
        ]
    },
    {
        "id": "583a0d4e7ddeda40",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1910,
        "y": 1680,
        "wires": [
            [
                "404a58246ff3db80",
                "76a156ff5aeb83d9"
            ]
        ]
    },
    {
        "id": "404a58246ff3db80",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nif(msg.payload.status == \"ok\"){\n    output = {\n        status : msg.payload.status,\n        id : msg.setpoint.id,\n        value : msg.from._value,\n    }\n}else{\n    output = {\n        status : \"failed\"\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1680,
        "wires": [
            [
                "3d2bfa6a981cff6d"
            ]
        ]
    },
    {
        "id": "669460dc3655b03a",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1410,
        "y": 1700,
        "wires": [
            [
                "0158a492f44e7935"
            ],
            [
                "3d2bfa6a981cff6d"
            ]
        ]
    },
    {
        "id": "c04fad0c20645bbc",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nif(msg.payload.status == \"ok\"){\n    output = {\n        status : msg.payload.status\n    }\n}else{\n    output = {\n        status : \"failed\"\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1880,
        "wires": [
            [
                "9c5674ee2b8d027b",
                "7ca69953c016aed6"
            ]
        ]
    },
    {
        "id": "b482c91dfb5259f2",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Active log command",
        "func": "var output = {};\nlet timestamp = new Date().getTime();\nif(msg.payload.status === \"ok\"){\n    /*Roomname | commandName | true */\n    let details = msg.commandpoint.name +\"|\"+ msg.commandpoint.commandname +\"|\"+ \"true\";\n    output = {\n        timestamp : timestamp,\n        username : msg.token.username,\n        level : msg.token.level,\n        event : \"Command\",\n        state : \"Success\",\n        detail : {\n            message : details,\n        },\n    }\n}else{\n    let details = msg.commandpoint.name +\"|\"+ msg.commandpoint.commandname +\"|\"+ \"false\";\n    output = {\n        timestamp : timestamp,\n        username : msg.token.username,\n        level : msg.token.level,\n        event : \"Command\",\n        state : \"Failed\",\n        detail : {\n            message : details,\n        },\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1840,
        "wires": [
            [
                "be201cad3e21cac1"
            ]
        ]
    },
    {
        "id": "be201cad3e21cac1",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    INSERT INTO ACTIVE_USERS_SYSTEM([TIMESTAMP],[USERNAME],[POSITION],[EVENTS],[STATE],[DETAILS])\n    VALUES('{{{payload.timestamp}}}','{{{payload.username}}}','{{{payload.level}}}','{{{payload.event}}}','{{{payload.state}}}','{{{payload.detail.message}}}')\n{{/payload}}",
        "output": "str",
        "x": 1840,
        "y": 1840,
        "wires": [
            [
                "3f139c7781df7cf6"
            ]
        ]
    },
    {
        "id": "3f139c7781df7cf6",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 2020,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "842f47c835fa16ec",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nmsg.url = flow.get(\"Setting\").url;\nvar ctrl = flow.get(\"Ctrl\")||{};\n\nfor(let a of Object.values(ctrl)){\n    for(let values of Object.values(a)){\n        if(values[\"_attr\"].UID == msg.req.body.UID){\n            for(let [k,v] of Object.entries(values[\"_commands\"])){\n                if(v == msg.req.body.id){\n                    output = {\n                        commandname : k,\n                        name : values[\"_attr\"].name,\n                        device : msg.req.body.UID,\n                        id : msg.req.body.id,\n                        username : msg.token.username,\n                    }\n                }\n            }\n        }\n    }\n}\nmsg.payload = output;\nmsg.commandpoint = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1900,
        "wires": [
            [
                "4e72ae5f5a6feb0d"
            ]
        ]
    },
    {
        "id": "4e72ae5f5a6feb0d",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#token}}\n    SELECT * FROM [dbo].[USERS_MANAGEMENTS] WHERE [USERNAME] = '{{{username}}}'\n{{/token}}",
        "output": "str",
        "x": 920,
        "y": 1900,
        "wires": [
            [
                "09938109c801c061"
            ]
        ]
    },
    {
        "id": "09938109c801c061",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1080,
        "y": 1900,
        "wires": [
            [
                "f7c26c651f4eb935"
            ]
        ]
    },
    {
        "id": "f7c26c651f4eb935",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\n\nswitch(msg.payload[0].TYPE){\n    case \"Read/Write\":\n        output = {\n            device : msg.commandpoint.device,\n            id : msg.commandpoint.id,\n            commandname : msg.commandpoint.commandname,\n            name : msg.commandpoint.name,\n        }\n    break;\n    case \"Read Only\":\n        output = {\n            status : \"Deined\",\n            message : \"Access denied !\"\n        }\n    break;\n    default:\n    break;\n}\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1900,
        "wires": [
            [
                "f4f796fc27438651"
            ]
        ]
    },
    {
        "id": "f4f796fc27438651",
        "type": "switch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 1900,
        "wires": [
            [
                "23569fbf8ba0acb8"
            ],
            [
                "9c5674ee2b8d027b"
            ]
        ]
    },
    {
        "id": "049a7931b6676c21",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1650,
        "y": 1880,
        "wires": [
            [
                "c04fad0c20645bbc",
                "b482c91dfb5259f2"
            ]
        ]
    },
    {
        "id": "23569fbf8ba0acb8",
        "type": "http request",
        "z": "3151ab83381d0f9c",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{url}}}api?action=send_command&username=Admin&password=Admin&device={{{payload.device}}}&command={{{payload.id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1510,
        "y": 1880,
        "wires": [
            [
                "049a7931b6676c21"
            ]
        ]
    },
    {
        "id": "f22b53815072f86a",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 2220,
        "wires": []
    },
    {
        "id": "f38aefeff4c76d50",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nif(msg.payload.length === 1){\n    let permiss = msg.payload[0].PERMISSION.split(\",\");\n    var store = flow.get(\"storage\")[permiss[0]];\n    \n    let role = msg.payload[0].POSITION.trim();\n    let rols = \"\";\n    if(role == \"Generaluser\"){\n        rols = role.replace(\"Generaluser\",\"General user\");\n    }else{\n        rols = role;\n    }\n    if(rols === msg.token.level){\n        // node.warn(permiss)\n        if(msg.token.level == \"Super Administrator\"){\n            output[\"status\"] = true;\n            output[permiss[0]] = {\n                id : store.id,\n                name : store.name,\n                lat : store.lat,\n                lng : store.lng,\n                address : store.address,\n                storage : store.storage,\n                permissStorage : permiss.slice(1),\n            }\n        }\n        output[\"status\"] = true;\n        output[permiss[0]] = {\n            id : store.id,\n            name : store.name,\n            lat : store.lat,\n            lng : store.lng,\n            address : store.address,\n            storage : store.storage,\n            permissStorage : permiss.slice(1),\n        }\n    }\n}else{\n    output = {\n        status : false,\n        message : \"Invalid username\"\n    }\n}\nmsg.payload = output;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 2220,
        "wires": [
            [
                "f22b53815072f86a"
            ]
        ]
    },
    {
        "id": "8ca2dec44acaf3ac",
        "type": "catch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "scope": [
            "33feed87741c7548"
        ],
        "uncaught": false,
        "x": 970,
        "y": 2220,
        "wires": [
            [
                "c47b556e4c390b25"
            ]
        ]
    },
    {
        "id": "c47b556e4c390b25",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Error",
        "func": "var output = {};\nif(msg.error){\n    output = {\n        status : false,\n        statusCode : msg.statusCode,\n        message : msg.error.message.split(': ')[1],\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 2220,
        "wires": [
            [
                "f22b53815072f86a",
                "9292e1abdd9c71b7"
            ]
        ]
    },
    {
        "id": "9292e1abdd9c71b7",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 2260,
        "wires": []
    },
    {
        "id": "b22f7c7f2c6b7211",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    SELECT * FROM [dbo].[USERS_MANAGEMENTS] WHERE [POSITION] = '{{{payload.level}}}' AND [USERNAME] = '{{{payload.username}}}'\n{{/payload}}",
        "output": "str",
        "x": 760,
        "y": 2160,
        "wires": [
            [
                "cebdf4a47e2e536d"
            ]
        ]
    },
    {
        "id": "cebdf4a47e2e536d",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 920,
        "y": 2160,
        "wires": [
            [
                "2cb9d2b355e52f54"
            ]
        ]
    },
    {
        "id": "2cb9d2b355e52f54",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "query",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 2160,
        "wires": [
            [
                "addffe3df46903c1"
            ]
        ]
    },
    {
        "id": "addffe3df46903c1",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "if(msg.payload.length === 1){\n    let key = Object.keys(msg.token.permission)[0];\n    msg.filename = 'D:\\\\Dixell\\\\system\\\\Config\\\\'+ key +\"_storage.json\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 2160,
        "wires": [
            [
                "181f967f3f96988b"
            ]
        ]
    },
    {
        "id": "181f967f3f96988b",
        "type": "file in",
        "z": "3151ab83381d0f9c",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1400,
        "y": 2160,
        "wires": [
            [
                "fe6fa27d526f078e"
            ]
        ]
    },
    {
        "id": "fe6fa27d526f078e",
        "type": "json",
        "z": "3151ab83381d0f9c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1530,
        "y": 2160,
        "wires": [
            [
                "a9912f5c04b30add"
            ]
        ]
    },
    {
        "id": "a9912f5c04b30add",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nif(msg.query.length === 1){\n    let permission = msg.query[0].PERMISSION.split(\",\");\n    let role = msg.query[0].POSITION.trim();\n    \n    if(role == msg.token.level){\n        for(let [key,value] of Object.entries(msg.payload)){\n            if(key == permission[0]){\n                output[\"status\"] = true;\n                output[key] = {\n                    id : value.id,\n                    name : value.name,\n                    lat : value.lat,\n                    lng : value.lng,\n                    address : value.address,\n                    storage : value.storage,\n                    permissionStorage : permission.slice(1),\n                }\n            }\n        }\n    }\n}else{\n    output = {\n        status : false,\n        message : \"Invalid username\"\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 2160,
        "wires": [
            [
                "47b0a155e3241de9",
                "435cbbd2955581da"
            ]
        ]
    },
    {
        "id": "47b0a155e3241de9",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1810,
        "y": 2160,
        "wires": []
    },
    {
        "id": "510ff18d260c21fe",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 2900,
        "wires": []
    },
    {
        "id": "cca68e3fccf7df06",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 2720,
        "wires": []
    },
    {
        "id": "b84d1644f10c6666",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 2440,
        "wires": []
    },
    {
        "id": "7ca69953c016aed6",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 1920,
        "wires": []
    },
    {
        "id": "435cbbd2955581da",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 2120,
        "wires": []
    },
    {
        "id": "eb147d14f60f0976",
        "type": "ping",
        "z": "3151ab83381d0f9c",
        "protocol": "Automatic",
        "mode": "triggered",
        "name": "",
        "host": "172.16.46.20",
        "timer": "600",
        "inputs": 1,
        "x": 290,
        "y": 4120,
        "wires": [
            [
                "5162801d2a380ccb"
            ]
        ]
    },
    {
        "id": "5162801d2a380ccb",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Storage Overviews",
        "func": "var ping;\nif(msg.payload === false){\n    ping = false;\n    node.status({fill:\"red\",shape:\"dot\",text:ping});\n}else{\n    ping = true;\n    node.status({fill:\"green\",shape:\"dot\",text:ping});\n}\n\nvar output = {};\nvar total = {};\nvar normal = {};\nvar alarm = {};\nvar list = [];\n\nlet count = 0;\nvar almData = global.get(\"Ctrl\");\nfor(let [k,v] of Object.entries(almData)){\n    for(let [a,b] of Object.entries(v)){\n        for(let c of Object.values(b[\"_alarm\"])){\n            if(c == 1){\n                list.push(b[\"_attr\"].Address);\n            }\n        }\n    }\n    for(let key in v){\n        ++count;\n    }\n    alarm = Object.keys(list).length;\n}\n\nnormal = count - alarm;\n\noutput[\"Suwinthawong\"] = {\n    id :1,\n    name : \"JWD Pacific บจก.เจดับเบิ้ลยูดี (สุวินทวงศ์)\",\n    lat : 13.771822360344581,\n    lng :  100.98082521644248,\n    address : \"99/3 หมู่ 11 Suwinthawong Rd Khlong Nakhon Nueang Khet,Mueang Chachoengsao District, Chachoengsao 24000\",\n    storage : {\n        status : ping,\n        total : count,\n        normal : normal,\n        alarm : alarm,\n    }\n}\nmsg.payload = output;\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Suwinthawong_storage.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 4120,
        "wires": [
            [
                "6a51400fca07a3f6"
            ]
        ]
    },
    {
        "id": "08ce2637ba89f465",
        "type": "inject",
        "z": "3151ab83381d0f9c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 4120,
        "wires": [
            [
                "eb147d14f60f0976"
            ]
        ]
    },
    {
        "id": "6a51400fca07a3f6",
        "type": "file",
        "z": "3151ab83381d0f9c",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 660,
        "y": 4120,
        "wires": [
            []
        ]
    },
    {
        "id": "1b6c89655b8e5480",
        "type": "comment",
        "z": "3151ab83381d0f9c",
        "name": "Overviews Input",
        "info": "",
        "x": 300,
        "y": 4080,
        "wires": []
    },
    {
        "id": "c14363f62f24c4a4",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1120,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "7052ea98a84163cb",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 2760,
        "wires": []
    },
    {
        "id": "0124e87680be4ead",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = {};\nvar timestamp = new Date().getTime();\n\nfor(let i in msg.payload){\n    let permiss = \"\";\n    if(msg.token.level == \"Super Administrator\"){\n        for(let [name,store] of Object.entries(msg.req.body.permission)){\n            permiss = name +\",\"+ store.join(\",\");\n        }\n        output = {\n            assignor : msg.token.username,\n            username : msg.req.body.username,\n            display : msg.req.body.display,\n            level : msg.req.body.level,\n            permission : permiss,\n            last_time : timestamp,\n            type : msg.req.body.type,\n        }\n    }else if(msg.token.level == \"Administrator\" && msg.token.level !== \"Super Administrator\"){\n        for(let [name,store] of Object.entries(msg.req.body.permission)){\n            permiss = name +\",\"+ store.join(\",\");\n        }\n        output = {\n            assignor : msg.token.username,\n            username : msg.req.body.username,\n            display : msg.req.body.display,\n            level : msg.req.body.level,\n            permission : permiss,\n            last_time : timestamp,\n            type : msg.req.body.type,\n        }\n    }else if(msg.token.level == \"Site Manager\" && msg.token.level !== \"Administrator\"){\n        for(let [name,store] of Object.entries(msg.req.body.permission)){\n            permiss = name +\",\"+ store.join(\",\");\n        }\n        output = {\n            assignor : msg.token.username,\n            username : msg.req.body.username,\n            display : msg.req.body.display,\n            level : msg.req.body.level,\n            permission : permiss,\n            last_time : timestamp,\n            type : msg.req.body.type,\n        }\n    }else{\n        if(msg.flowToken[i].username == msg.req.body.username){\n            for(let [name,store] of Object.entries(msg.req.body.permission)){\n                permiss = name +\",\"+ store.join(\",\");\n            }\n            output = {\n                assignor : msg.token.username,\n                username : msg.req.body.username,\n                display : msg.req.body.display,\n                level : msg.req.body.level,\n                permission : permiss,\n                last_time : timestamp,\n                type : msg.req.body.type,\n            }\n        }\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 2800,
        "wires": [
            [
                "dac3904ab40b1492"
            ]
        ]
    },
    {
        "id": "42ab62315ac33ac4",
        "type": "change",
        "z": "3151ab83381d0f9c",
        "name": "change msg",
        "rules": [
            {
                "t": "set",
                "p": "actived",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 2480,
        "wires": [
            [
                "db3591510d317078"
            ]
        ]
    },
    {
        "id": "db3591510d317078",
        "type": "template",
        "z": "3151ab83381d0f9c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#token}}\n    SELECT * FROM [dbo].[USERS_MANAGEMENTS] WHERE [ASSIGNOR] = '{{{username}}}'\n{{/token}}",
        "output": "str",
        "x": 1320,
        "y": 2480,
        "wires": [
            [
                "2f0571dc749d79b0"
            ]
        ]
    },
    {
        "id": "2f0571dc749d79b0",
        "type": "MSSQL-UCGv2",
        "z": "3151ab83381d0f9c",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1480,
        "y": 2480,
        "wires": [
            [
                "d2a5a8122e2d5c56"
            ]
        ]
    },
    {
        "id": "d2a5a8122e2d5c56",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "",
        "func": "var output = [];\n\nif(msg.payload.length == 0){\n    if(msg.token.level == \"Super Administrator\"){\n        for(let i in msg.actived){\n            if(msg.actived[i].USERNAME == msg.token.username){\n                let sign = msg.actived[i].EVENTS;\n                if(sign.includes(\"Sign\") == true){\n                    output.push({\n                        timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                        username : msg.actived[i].USERNAME,\n                        level : msg.actived[i].POSITION.trim(),\n                        state : msg.actived[i].STATE.trim(),\n                        event : sign,\n                        detail : {\n                            message : msg.actived[i].DETAILS,\n                        }\n                    })\n                }else{\n                    if(msg.actived[i].EVENTS !== \"Add user\" && msg.actived[i].EVENTS !== \"Remove user\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        switch(detail[0]){\n                            case \"display\":\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : detail.slice(1)[2],\n                                        from : {\n                                            key : detail[0],\n                                            value: detail.slice(1)[0],\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[1],\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"level\":\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : detail.slice(1)[2],\n                                        from : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[0],\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[1],\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"permission\":\n                                let username = detail.slice(1,2)[0];\n                                let permiss = (detail.slice(1)[1]).split(\",\");\n                                let newpermiss = (detail.slice(1)[2]).split(\",\");\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : username,\n                                        from : {\n                                            key : detail[0],\n                                            value : {\n                                                [permiss[0]] : permiss.slice(1),\n                                            }\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : {\n                                                [newpermiss[0]] : newpermiss.slice(1),\n                                            }\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"type\":\n                                let user = detail.slice(3)[0];\n                                let oldType = detail.slice(1)[0];\n                                let newType = detail.slice(2)[0];\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : user,\n                                        from : {\n                                            key : detail[0],\n                                            value : oldType,\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : newType,\n                                        }\n                                    }\n                                })\n                            break;\n                            default:\n                            break;\n                        }\n                    }else{\n                        if(msg.actived[i].EVENTS == \"Add user\" || msg.actived[i].EVENTS == \"Remove user\"){\n                            let detail = (msg.actived[i].DETAILS).split(\"|\");\n                            \n                            output.push({\n                                timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                username : msg.actived[i].USERNAME,\n                                level : msg.actived[i].POSITION.trim(),\n                                state : msg.actived[i].STATE.trim(),\n                                event : msg.actived[i].EVENTS,\n                                detail : {\n                                    affacted : detail[0],\n                                    message : detail[1],\n                                }\n                            })\n                        }\n                    }\n                    if(msg.actived[i].EVENTS == \"Command\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        output.push({\n                            timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                            username : msg.actived[i].USERNAME,\n                            level : msg.actived[i].POSITION.trim(),\n                            state : msg.actived[i].STATE.trim(),\n                            event : msg.actived[i].EVENTS,\n                            detail : {\n                                affacted : detail[0],\n                                to : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                }\n                            }\n                        })\n                    }else if(msg.actived[i].EVENTS == \"Setpoint\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        output.push({\n                            timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                            username : msg.actived[i].USERNAME,\n                            level : msg.actived[i].POSITION.trim(),\n                            state : msg.actived[i].STATE.trim(),\n                            event : msg.actived[i].EVENTS,\n                            detail : {\n                                affacted : detail[0],\n                                from : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                },\n                                to : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                }\n                            }\n                        })\n                    }\n                }\n            }else{\n                let sign = msg.actived[i].EVENTS;\n                if(sign.includes(\"Sign\") == true){\n                    output.push({\n                        timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                        username : msg.actived[i].USERNAME,\n                        level : msg.actived[i].POSITION.trim(),\n                        state : msg.actived[i].STATE.trim(),\n                        event : sign,\n                        detail : {\n                            message : msg.actived[i].DETAILS,\n                        }\n                    })\n                }else{\n                    if(msg.actived[i].EVENTS !== \"Add user\" && msg.actived[i].EVENTS !== \"Remove user\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        switch(detail[0]){\n                            case \"display\":\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : detail.slice(1)[2],\n                                        from : {\n                                            key : detail[0],\n                                            value: detail.slice(1)[0],\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[1],\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"level\":\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : detail.slice(1)[2],\n                                        from : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[0],\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[1],\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"permission\":\n                                let username = detail.slice(1,2)[0];\n                                let permiss = (detail.slice(1)[1]).split(\",\");\n                                let newpermiss = (detail.slice(1)[2]).split(\",\");\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : username,\n                                        from : {\n                                            key : detail[0],\n                                            value : {\n                                                [permiss[0]] : permiss.slice(1),\n                                            }\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : {\n                                                [newpermiss[0]] : newpermiss.slice(1),\n                                            }\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"type\":\n                                let user = detail.slice(3)[0];\n                                let oldType = detail.slice(1)[0];\n                                let newType = detail.slice(2)[0];\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : user,\n                                        from : {\n                                            key : detail[0],\n                                            value : oldType,\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : newType,\n                                        }\n                                    }\n                                })\n                            break;\n                            default:\n                            break;\n                        }\n                    }else{\n                        if(msg.actived[i].EVENTS == \"Add user\" || msg.actived[i].EVENTS == \"Remove user\"){\n                            let detail = (msg.actived[i].DETAILS).split(\"|\");\n                            \n                            output.push({\n                                timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                username : msg.actived[i].USERNAME,\n                                level : msg.actived[i].POSITION.trim(),\n                                state : msg.actived[i].STATE.trim(),\n                                event : msg.actived[i].EVENTS,\n                                detail : {\n                                    affacted : detail[0],\n                                    message : detail[1],\n                                }\n                            })\n                        }\n                    }\n                    if(msg.actived[i].EVENTS == \"Command\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        output.push({\n                            timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                            username : msg.actived[i].USERNAME,\n                            level : msg.actived[i].POSITION.trim(),\n                            state : msg.actived[i].STATE.trim(),\n                            event : msg.actived[i].EVENTS,\n                            detail : {\n                                affacted : detail[0],\n                                to : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                }\n                            }\n                        })\n                    }else if(msg.actived[i].EVENTS == \"Setpoint\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        output.push({\n                            timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                            username : msg.actived[i].USERNAME,\n                            level : msg.actived[i].POSITION.trim(),\n                            state : msg.actived[i].STATE.trim(),\n                            event : msg.actived[i].EVENTS,\n                            detail : {\n                                affacted : detail[0],\n                                from : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                },\n                                to : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                }\n                            }\n                        })\n                    }\n                }\n            }\n        }\n    }else{\n        for(let i in msg.actived){\n            if(msg.actived[i].USERNAME == msg.token.username){\n                let sign = msg.actived[i].EVENTS;\n                if(sign.includes(\"Sign\") == true){\n                    output.push({\n                        timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                        username : msg.actived[i].USERNAME,\n                        level : msg.actived[i].POSITION.trim(),\n                        state : msg.actived[i].STATE.trim(),\n                        event : sign,\n                        detail : {\n                            message : msg.actived[i].DETAILS,\n                        }\n                    })\n                }else{\n                    if(msg.actived[i].EVENTS !== \"Add user\" && msg.actived[i].EVENTS !== \"Remove user\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        switch(detail[0]){\n                            case \"display\":\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : detail.slice(1)[2],\n                                        from : {\n                                            key : detail[0],\n                                            value: detail.slice(1)[0],\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[1],\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"level\":\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : detail.slice(1)[2],\n                                        from : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[0],\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[1],\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"permission\":\n                                let username = detail.slice(1,2)[0];\n                                let permiss = (detail.slice(1)[1]).split(\",\");\n                                let newpermiss = (detail.slice(1)[2]).split(\",\");\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : username,\n                                        from : {\n                                            key : detail[0],\n                                            value : {\n                                                [permiss[0]] : permiss.slice(1),\n                                            }\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : {\n                                                [newpermiss[0]] : newpermiss.slice(1),\n                                            }\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"type\":\n                                let user = detail.slice(3)[0];\n                                let oldType = detail.slice(1)[0];\n                                let newType = detail.slice(2)[0];\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : user,\n                                        from : {\n                                            key : detail[0],\n                                            value : oldType,\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : newType,\n                                        }\n                                    }\n                                })\n                            break;\n                            default:\n                            break;\n                        }\n                    }else{\n                        if(msg.actived[i].EVENTS == \"Add user\" || msg.actived[i].EVENTS == \"Remove user\"){\n                            let detail = (msg.actived[i].DETAILS).split(\"|\");\n                            \n                            output.push({\n                                timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                username : msg.actived[i].USERNAME,\n                                level : msg.actived[i].POSITION.trim(),\n                                state : msg.actived[i].STATE.trim(),\n                                event : msg.actived[i].EVENTS,\n                                detail : {\n                                    affacted : detail[0],\n                                    message : detail[1],\n                                }\n                            })\n                        }\n                    }\n                    if(msg.actived[i].EVENTS == \"Command\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        output.push({\n                            timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                            username : msg.actived[i].USERNAME,\n                            level : msg.actived[i].POSITION.trim(),\n                            state : msg.actived[i].STATE.trim(),\n                            event : msg.actived[i].EVENTS,\n                            detail : {\n                                affacted : detail[0],\n                                to : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                }\n                            }\n                        })\n                    }else if(msg.actived[i].EVENTS == \"Setpoint\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        output.push({\n                            timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                            username : msg.actived[i].USERNAME,\n                            level : msg.actived[i].POSITION.trim(),\n                            state : msg.actived[i].STATE.trim(),\n                            event : msg.actived[i].EVENTS,\n                            detail : {\n                                affacted : detail[0],\n                                from : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                },\n                                to : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                }\n                            }\n                        })\n                    }\n                }\n            }\n        }\n    }\n}else{\n    for(let pay in msg.payload){\n        if(msg.payload[pay].ASSIGNOR == msg.token.username){\n            for(let i in msg.actived){\n                let sign = msg.actived[i].EVENTS;\n                if(sign.includes(\"Sign\") == true){\n                    output.push({\n                        timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                        username : msg.actived[i].USERNAME,\n                        level : msg.actived[i].POSITION.trim(),\n                        state : msg.actived[i].STATE.trim(),\n                        event : sign,\n                        detail : {\n                            message : msg.actived[i].DETAILS,\n                        }\n                    })\n                }else{\n                    if(msg.actived[i].EVENTS !== \"Add user\" && msg.actived[i].EVENTS !== \"Remove user\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        switch(detail[0]){\n                            case \"display\":\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : detail.slice(1)[2],\n                                        from : {\n                                            key : detail[0],\n                                            value: detail.slice(1)[0],\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[1],\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"level\":\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : detail.slice(1)[2],\n                                        from : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[0],\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : detail.slice(1)[1],\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"permission\":\n                                let username = detail.slice(1,2)[0];\n                                let permiss = (detail.slice(1)[1]).split(\",\");\n                                let newpermiss = (detail.slice(1)[2]).split(\",\");\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : username,\n                                        from : {\n                                            key : detail[0],\n                                            value : {\n                                                [permiss[0]] : permiss.slice(1),\n                                            }\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : {\n                                                [newpermiss[0]] : newpermiss.slice(1),\n                                            }\n                                        }\n                                    }\n                                })\n                            break;\n                            case \"type\":\n                                let user = detail.slice(3)[0];\n                                let oldType = detail.slice(1)[0];\n                                let newType = detail.slice(2)[0];\n                                output.push({\n                                    timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                    username : msg.actived[i].USERNAME,\n                                    level : msg.actived[i].POSITION.trim(),\n                                    state : msg.actived[i].STATE.trim(),\n                                    event : msg.actived[i].EVENTS,\n                                    detail : {\n                                        affacted : user,\n                                        from : {\n                                            key : detail[0],\n                                            value : oldType,\n                                        },\n                                        to : {\n                                            key : detail[0],\n                                            value : newType,\n                                        }\n                                    }\n                                })\n                            break;\n                            default:\n                            break;\n                        }\n                    }else{\n                        if(msg.actived[i].EVENTS == \"Add user\" || msg.actived[i].EVENTS == \"Remove user\"){\n                            let detail = (msg.actived[i].DETAILS).split(\"|\");\n                            \n                            output.push({\n                                timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                                username : msg.actived[i].USERNAME,\n                                level : msg.actived[i].POSITION.trim(),\n                                state : msg.actived[i].STATE.trim(),\n                                event : msg.actived[i].EVENTS,\n                                detail : {\n                                    affacted : detail[0],\n                                    message : detail[1],\n                                }\n                            })\n                        }\n                    }\n                    if(msg.actived[i].EVENTS == \"Command\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        output.push({\n                            timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                            username : msg.actived[i].USERNAME,\n                            level : msg.actived[i].POSITION.trim(),\n                            state : msg.actived[i].STATE.trim(),\n                            event : msg.actived[i].EVENTS,\n                            detail : {\n                                affacted : detail[0],\n                                to : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                }\n                            }\n                        })\n                    }else if(msg.actived[i].EVENTS == \"Setpoint\"){\n                        let detail = msg.actived[i].DETAILS.split(\"|\");\n                        \n                        output.push({\n                            timestamp : parseInt(msg.actived[i].TIMESTAMP),\n                            username : msg.actived[i].USERNAME,\n                            level : msg.actived[i].POSITION.trim(),\n                            state : msg.actived[i].STATE.trim(),\n                            event : msg.actived[i].EVENTS,\n                            detail : {\n                                affacted : detail[0],\n                                from : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                },\n                                to : {\n                                    key : detail[1],\n                                    value : detail[2],\n                                }\n                            }\n                        })\n                    }\n                }\n            }\n            break\n        }\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 2480,
        "wires": [
            [
                "f126cb7d0b417519",
                "3dc453b839187512"
            ]
        ]
    },
    {
        "id": "f126cb7d0b417519",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 2480,
        "wires": []
    },
    {
        "id": "3dc453b839187512",
        "type": "function",
        "z": "3151ab83381d0f9c",
        "name": "Response Permission",
        "func": "var output = [];\n\nfor(let i in msg.payload){\n    \n    if(msg.token.level == \"Administrator\"){\n        if(msg.payload[i].level !== \"Super Administrator\"){\n            output.push({\n                timestamp : msg.payload[i].timestamp,\n                username : msg.payload[i].username,\n                level : msg.payload[i].level,\n                state : msg.payload[i].state,\n                event : msg.payload[i].event,\n                detail : msg.payload[i].detail,\n            })\n        }\n    }else if(msg.token.level == \"Site Manager\" &&\n        msg.payload[i].level !== \"Administrator\"\n    ){\n        if(msg.token.username){\n            if(msg.payload[i].level !== \"Super Administrator\"){\n                output.push({\n                    timestamp : msg.payload[i].timestamp,\n                    username : msg.payload[i].username,\n                    level : msg.payload[i].level,\n                    state : msg.payload[i].state,\n                    event : msg.payload[i].event,\n                    detail : msg.payload[i].detail,\n                })\n            }\n        }\n    }else if(msg.token.level == \"General User\" &&\n        msg.payload[i].level !== \"Site Manager\" &&\n        msg.payload[i].level !== \"Super Administrator\" &&\n        msg.payload[i].level !== \"Administrator\"\n    ){\n        output.push({\n            timestamp : msg.payload[i].timestamp,\n            username : msg.payload[i].username,\n            level : msg.payload[i].level,\n            state : msg.payload[i].state,\n            event : msg.payload[i].event,\n            detail : msg.payload[i].detail,\n        })\n    }else if(msg.token.level == \"Super Administrator\"){\n        output.push({\n            timestamp : msg.payload[i].timestamp,\n            username : msg.payload[i].username,\n            level : msg.payload[i].level,\n            state : msg.payload[i].state,\n            event : msg.payload[i].event,\n            detail : msg.payload[i].detail,\n        })\n    }else{\n        output.push({\n            timestamp : msg.payload[i].timestamp,\n            username : msg.payload[i].username,\n            level : msg.payload[i].level,\n            state : msg.payload[i].state,\n            event : msg.payload[i].event,\n            detail : msg.payload[i].detail,\n        })\n    }\n}\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 2560,
        "wires": [
            [
                "245706f462de83a6"
            ]
        ]
    },
    {
        "id": "245706f462de83a6",
        "type": "http response",
        "z": "3151ab83381d0f9c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1870,
        "y": 2560,
        "wires": []
    },
    {
        "id": "b0a778c17c81aa67",
        "type": "catch",
        "z": "3151ab83381d0f9c",
        "name": "",
        "scope": [
            "d3ca251004beede4"
        ],
        "uncaught": false,
        "x": 1170,
        "y": 3900,
        "wires": [
            [
                "268fb828f08dc07d"
            ]
        ]
    },
    {
        "id": "268fb828f08dc07d",
        "type": "debug",
        "z": "3151ab83381d0f9c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 3900,
        "wires": []
    },
    {
        "id": "a9719ce1e4294d33",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "func": "var influx = flow.get(\"influxDB\");\nvar output = [];\nvar dateBetween = [];\n\nvar requestBody = {};\nfor(let [k,v] of Object.entries(msg.payload.data)){\n    requestBody = {\n        name : msg.payload.name,\n        measurement : k,\n        device : Object.keys(v).toString(),\n        field : Object.values(v)[0],\n        timeRangeStart : msg.payload.from,\n        timeRangeStop : msg.payload.to,\n        every : msg.payload.samp,\n    }\n}\nfor(let i = 0; i < influx.length; i++){\n    if(influx[i].tags._device == requestBody.device){\n        if(influx[i].measurement){\n            output.push({\n                name : requestBody.name,\n                measurement : requestBody.measurement,\n                device : requestBody.device,\n                field : requestBody.field,\n                timeRangeStart : requestBody.timeRangeStart,\n                timeRangeStop : requestBody.timeRangeStop,\n            });\n            if(requestBody.timeRangeStart && requestBody.timeRangeStop){\n                dateBetween.push({\n                    name : requestBody.name,\n                    measurement : requestBody.measurement,\n                    device : requestBody.device,\n                    field : requestBody.field,\n                    every : requestBody.every,\n                    timeRangeStart : requestBody.timeRangeStart,\n                    timeRangeStop : requestBody.timeRangeStop,\n                });\n                msg.queryDate = dateBetween;\n            }\n        }\n    }\n}\nmsg.payload = requestBody;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 240,
        "wires": [
            [
                "a2e166af8090b52a"
            ]
        ]
    },
    {
        "id": "07294f1349610864",
        "type": "switch",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "property": "req.body",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 260,
        "wires": [
            [
                "a9719ce1e4294d33"
            ],
            [
                "01346ec2bff921e7"
            ]
        ]
    },
    {
        "id": "fe9b36a22b507e3d",
        "type": "http in",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "url": "/api/influxdb",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "07294f1349610864"
            ]
        ]
    },
    {
        "id": "01346ec2bff921e7",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "return Not Found",
        "func": "msg.payload = \"Not Found 404!!\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            [
                "e1464dbbb5540035"
            ]
        ]
    },
    {
        "id": "e1464dbbb5540035",
        "type": "http response",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1390,
        "y": 300,
        "wires": []
    },
    {
        "id": "8592d63609fcd195",
        "type": "http in",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "url": "/api/influx",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "f0061d1823c9ca6f"
            ]
        ]
    },
    {
        "id": "ab4e35d4bc0b4aae",
        "type": "http response",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 180,
        "wires": []
    },
    {
        "id": "f0061d1823c9ca6f",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "views parameter influxdb",
        "func": "var data = flow.get(\"influxDB\");\nvar output = {};\n\nfor(let index in data){\n    output[data[index].measurement] = {};\n}\nfor(let index in data){\n    output[data[index].measurement][data[index].tags._device] = Object.keys(data[index].fields)\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 180,
        "wires": [
            [
                "ab4e35d4bc0b4aae"
            ]
        ]
    },
    {
        "id": "a2e166af8090b52a",
        "type": "switch",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "property": "queryDate",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "bb18568cbf455f08"
            ],
            [
                "8a5a46408092ad98"
            ]
        ]
    },
    {
        "id": "8a5a46408092ad98",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "return Not Found",
        "func": "msg.payload = \"Not Found 404!!\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "e1464dbbb5540035"
            ]
        ]
    },
    {
        "id": "bb18568cbf455f08",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "Check Variable",
        "func": "var output = [];\n\nfor(let i in msg.queryDate){\n    var ans = Array.isArray(msg.queryDate[i].field);\n    if(ans == true){\n        let field = msg.queryDate[i].field.join(`\" or r[\"_field\"] == \"`);\n        output.push({\n            name : msg.queryDate[i].name,\n            measurement : msg.queryDate[i].measurement,\n            device : msg.queryDate[i].device,\n            field : field,\n            every : msg.queryDate[i].every,\n            timeRangeStart : parseInt(msg.queryDate[i].timeRangeStart / 1000),\n            timeRangeStop : parseInt(msg.queryDate[i].timeRangeStop / 1000),\n        });\n    }else{\n        output.push({\n            name : msg.queryDate[i].name,\n            measurement : msg.queryDate[i].measurement,\n            device : msg.queryDate[i].device,\n            field : msg.queryDate[i].field,\n            every : msg.queryDate[i].every,\n            timeRangeStart : parseInt(msg.queryDate[i].timeRangeStart / 1000),\n            timeRangeStop : parseInt(msg.queryDate[i].timeRangeStop / 1000),\n        })\n    }\n}\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 220,
        "wires": [
            [
                "92c16495e3ac9a97"
            ]
        ]
    },
    {
        "id": "92c16495e3ac9a97",
        "type": "template",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    from(bucket : \"{{{name}}}\")\n        |> range(start : {{{timeRangeStart}}}, stop : {{{timeRangeStop}}})\n        |> filter(fn: (r) => r[\"_measurement\"] == \"{{{measurement}}}\")\n        |> filter(fn: (r) => r[\"_device\"] == \"{{{device}}}\")\n        |> filter(fn: (r) => r[\"_field\"] == \"{{{field}}}\")\n        |> aggregateWindow(every: {{{every}}},fn: last,createEmpty: false)\n        |> drop(columns:[\"_start\",\"_stop\"])\n        |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n{{/payload}}",
        "output": "str",
        "x": 940,
        "y": 220,
        "wires": [
            [
                "93ca5c81e1800104"
            ]
        ]
    },
    {
        "id": "93ca5c81e1800104",
        "type": "change",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "query",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 220,
        "wires": [
            [
                "68a12a440bc1fc5d"
            ]
        ]
    },
    {
        "id": "68a12a440bc1fc5d",
        "type": "influxdb in",
        "z": "a18e7f39a1e44c08",
        "influxdb": "cd05d9872760ae9d",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "8fc976c27811713b",
        "x": 1340,
        "y": 240,
        "wires": [
            [
                "e1464dbbb5540035",
                "9e4130ae455aefb4"
            ]
        ]
    },
    {
        "id": "ca99e5f1d607c465",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "func": "var d = new Date();\nvar date = ('00' + d.getDate()).slice(-2) + \"-\" + ('00' + (d.getMonth()+1)).slice(-2) +\"-\" + d.getFullYear() + \" \" + ('00' + d.getHours()).slice(-2) + \":\" + ('00' + d.getMinutes()).slice(-2);\n\nflow.set(\"DateTime\",date)\nflow.set(\"mili\",d.getTime())",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "45ad6b040ca2f916",
        "type": "cronplus",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "schedule1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 * * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 900,
        "y": 40,
        "wires": [
            [
                "ca99e5f1d607c465"
            ]
        ]
    },
    {
        "id": "577d2495a58389b6",
        "type": "http in",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "url": "/api/activealarm",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "0ada87ef9f3ec1e6"
            ]
        ]
    },
    {
        "id": "6141a7d96020166e",
        "type": "http response",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 520,
        "wires": []
    },
    {
        "id": "6eaf87913b68ec2b",
        "type": "comment",
        "z": "a18e7f39a1e44c08",
        "name": "Alarm Active",
        "info": "",
        "x": 150,
        "y": 460,
        "wires": []
    },
    {
        "id": "f8a38393d27aa65f",
        "type": "http in",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "url": "/api/alarmslog",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "14e68df47021ef4e"
            ]
        ]
    },
    {
        "id": "6ffe83cd6dd97053",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "StoreName and startTime to endTime",
        "func": "var output = [];\nif(msg.req.body){\n    output.push({\n        name : msg.req.body.name,\n        startTime : msg.req.body.from,\n        endTime : msg.req.body.to,\n    })\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 600,
        "wires": [
            [
                "6944b526cb514f41"
            ]
        ]
    },
    {
        "id": "c24d7a67c3af06b2",
        "type": "http response",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 680,
        "wires": []
    },
    {
        "id": "6944b526cb514f41",
        "type": "template",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    SELECT * FROM [{{{name}}}].[dbo].[ALARMSLOG]\n    WHERE [TimeStamp] BETWEEN '{{{startTime}}}' AND '{{{endTime}}}'\n    ORDER BY [TimeStamp] ASC;\n{{/payload}}",
        "output": "str",
        "x": 760,
        "y": 600,
        "wires": [
            [
                "7367e22589dc14c4"
            ]
        ]
    },
    {
        "id": "7a64367dbb905e84",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "Store name is null",
        "func": "msg.payload = [\n    `request parameter => name,fromTime,toTime`,\n    `request body`\n]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 680,
        "wires": [
            [
                "c24d7a67c3af06b2"
            ]
        ]
    },
    {
        "id": "14e68df47021ef4e",
        "type": "switch",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "property": "req.body.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 640,
        "wires": [
            [
                "6ffe83cd6dd97053"
            ],
            [
                "7a64367dbb905e84"
            ]
        ]
    },
    {
        "id": "0ada87ef9f3ec1e6",
        "type": "switch",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "property": "payload.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 500,
        "wires": [
            [
                "f184914e0e784985"
            ],
            [
                "711d414afa34f839"
            ]
        ]
    },
    {
        "id": "711d414afa34f839",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "func": "msg.payload = `Not Found ! 404`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 540,
        "wires": [
            [
                "6141a7d96020166e"
            ]
        ]
    },
    {
        "id": "c1a3bab6f2ccedba",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "func": "var output = [];\n\nfor(let i = 0; i < msg.payload.length; i++){\n    output.push({\n        room : msg.payload[i].room,\n        adr : msg.payload[i].adr,\n        deviceName : msg.payload[i].deviceName,\n        message : msg.payload[i].message,\n        timestamp : parseInt(msg.payload[i].TimeStamp),\n        status : msg.payload[i].Status.replace(/ /g,\"\") == \"true\" ? true : false,\n    })\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 600,
        "wires": [
            [
                "c24d7a67c3af06b2"
            ]
        ]
    },
    {
        "id": "439c0ee011159bf1",
        "type": "comment",
        "z": "a18e7f39a1e44c08",
        "name": "Alarms Logs",
        "info": "",
        "x": 150,
        "y": 600,
        "wires": []
    },
    {
        "id": "7367e22589dc14c4",
        "type": "MSSQL-UCGv2",
        "z": "a18e7f39a1e44c08",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 930,
        "y": 600,
        "wires": [
            [
                "c1a3bab6f2ccedba"
            ]
        ]
    },
    {
        "id": "6f821b46ab2fa71f",
        "type": "http in",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "url": "/api/energy",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 840,
        "wires": [
            [
                "bad1f34c75e7ed06"
            ]
        ]
    },
    {
        "id": "cded10791a84ee06",
        "type": "switch",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "property": "req.body",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 840,
        "wires": [
            [
                "ddba46c50accb020"
            ],
            [
                "4ee947b92355f817"
            ]
        ]
    },
    {
        "id": "4ee947b92355f817",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "func": "msg.payload = \"Not Found 404!!\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 860,
        "wires": [
            [
                "750974ba7d52f930"
            ]
        ]
    },
    {
        "id": "6ffeb30face1d432",
        "type": "change",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "query",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 820,
        "wires": [
            [
                "80dff93ed6fbb99c"
            ]
        ]
    },
    {
        "id": "bad1f34c75e7ed06",
        "type": "change",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "body",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 840,
        "wires": [
            [
                "cded10791a84ee06"
            ]
        ]
    },
    {
        "id": "750974ba7d52f930",
        "type": "http response",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1590,
        "y": 860,
        "wires": []
    },
    {
        "id": "80dff93ed6fbb99c",
        "type": "influxdb in",
        "z": "a18e7f39a1e44c08",
        "influxdb": "cd05d9872760ae9d",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "8fc976c27811713b",
        "x": 1240,
        "y": 820,
        "wires": [
            [
                "6129ab020b82d229"
            ]
        ]
    },
    {
        "id": "ddba46c50accb020",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "convert input to query",
        "func": "var output = {};\noutput.name = msg.req.body.name\noutput.from = msg.req.body.from/1000\noutput.to = msg.req.body.to/1000\noutput.every = msg.req.body.samp\n\nyesterday = new Date(msg.req.body.from)\nif(yesterday.getDate() === 1){\n    yesterday = new Date(yesterday.setDate(0))\n}else{\n    yesterday = new Date(yesterday.setDate(yesterday.getDate()-1))\n}\n\noutput.fromYesterday = Date.parse(yesterday)/1000\n\nnow = new Date()\nnow.setSeconds(0)\nnow.setMilliseconds(0)\nnow = Date.parse(now)/1000\nif(output.to > now){\n    output.to = now\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 820,
        "wires": [
            [
                "15051bd33fedfe62"
            ]
        ]
    },
    {
        "id": "6129ab020b82d229",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "analyst data",
        "func": "let input = msg.payload\ndata = {}\noutput = {}\npower_sum = {}\nsumData = []\n\nfor (let v of input) {\n    if (!data[v.result]) {\n        data[v.result] = []\n    }\n    data[v.result].push(v)\n}\n\nfor (let v of data.total_all) {\n    time = v[\"_time\"]\n    d = new Date(time)\n    d = new Date(d.setDate(d.getDate() - 1))\n    date = d.getDate()\n    month = d.getMonth()\n    year = d.getFullYear()\n    id = new Date(year, month, date)\n    id = Date.parse(id)\n    if (!power_sum[id]) {\n        power_sum[id] = {}\n        power_sum[id].min = {\n                device: NaN,\n                value: 0,\n                timestamp: NaN,\n            }\n        power_sum[id].max = {\n                device: NaN,\n                value: 0,\n                timestamp: NaN,\n            }\n        power_sum[id].avg = {\n                total: 0,\n                quantity: 0,\n            }\n    }else{\n        d = new Date(time)\n        date = d.getDate()\n        month = d.getMonth()\n        year = d.getFullYear()\n        id = new Date(year, month, date)\n        id = Date.parse(id)\n        power_sum[id] = {}\n        power_sum[id].min = {\n                device: NaN,\n                value: 0,\n                timestamp: NaN,\n            }\n        power_sum[id].max = {\n                device: NaN,\n                value: 0,\n                timestamp: NaN,\n            }\n        power_sum[id].avg = {\n                total: 0,\n                quantity: 0,\n            }\n    }\n}\nfor (let v of data.activepower_raw) {\n    time = v[\"_time\"]\n    d = new Date(time)\n    date = d.getDate()\n    month = d.getMonth()\n    year = d.getFullYear()\n    id = new Date(year, month, date)\n    id = Date.parse(id)\n    for (let [key, val] of Object.entries(v)) {\n        if (power_sum[id] && key !== \"table\" && key !== \"result\" && key !== \"_time\") {\n            if (isNaN(power_sum[id].min.timestamp) || val < power_sum[id].min.value) {\n                power_sum[id].min = {\n                        device: key,\n                        value: val,\n                        timestamp: Date.parse(time),\n                    }\n            }\n            if (isNaN(power_sum[id].max.timestamp) || val > power_sum[id].max.value) {\n                power_sum[id].max = {\n                        device: key,\n                        value: val,\n                        timestamp: Date.parse(time),\n                    }\n            }\n            power_sum[id].avg.total += val\n            power_sum[id].avg.quantity++\n        }\n    }\n}\nfor (let [i, v] of Object.entries(power_sum)) {\n    let obj = {\n        total: data.total_all[sumData.length] ? data.total_all[sumData.length].total : 0,\n        timestamp: sumData.length === Object.keys(power_sum).length-1 ? Date.parse(new Date()) : parseInt(i),\n        ...v\n    }\n    sumData.push(obj)\n}\noutput = Object.assign({},data)\ndelete output.total_all\ndelete output.activepower_raw\noutput.summarize = sumData\n\nmsg.payload = output\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 820,
        "wires": [
            [
                "750974ba7d52f930",
                "e10d7b895290c168"
            ]
        ]
    },
    {
        "id": "44f7c78306f8a4f2",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "AlarmsActive",
        "func": "var data = JSON.parse(JSON.stringify(global.get(\"all_ctrl\")));\nvar output = [];\nvar timestamp = new Date().getTime();\n\nfor(let [k,v] of Object.entries(data)){\n    for(let [a,b] of Object.entries(v)){\n        let name = b[\"_attr\"].name;\n        if(b[\"_alarm\"]){\n            for(let [c,d] of Object.entries(b[\"_alarm\"])){\n                let value = parseInt(d);\n                output.push({\n                    room : k,\n                    deviceName : name,\n                    adr : a,\n                    message : c,\n                    status : value > 0,\n                })\n            }\n        }\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1260,
        "wires": [
            [
                "7c455059ebfd90dd",
                "2104c68f6198fa99"
            ]
        ]
    },
    {
        "id": "7c455059ebfd90dd",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "Filter Alarm",
        "func": "siteName = \"Suwinthawong\"\ninputAlarm = msg.payload\nallAlarm = flow.get(\"ActiveAlarm\") || {}\nsiteAlarm = allAlarm[siteName] || []\n\nfor(let v of inputAlarm){\n    let adr = v[\"adr\"]\n    let message = v[\"message\"]\n    if(v.status){\n        //Active\n        if(siteAlarm.some(x => x[\"adr\"] === adr && x[\"message\"] === message) === false){\n            v.timestamp = Date.parse(new Date())\n            siteAlarm.push(v)\n        }\n    }else{\n        //Inactive\n        let index = siteAlarm.findIndex(x => x[\"adr\"] === adr && x[\"message\"] === message)\n        if(index >= 0){\n            siteAlarm.splice(index,1)\n        }\n    }\n}\n\nallAlarm = {\n    ...allAlarm,\n     [siteName]: siteAlarm\n}\n\nflow.set(\"ActiveAlarm\", allAlarm)\nmsg.payload = allAlarm\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1260,
        "wires": [
            [
                "e54585d67839861c"
            ]
        ]
    },
    {
        "id": "614db90d5cc06343",
        "type": "comment",
        "z": "a18e7f39a1e44c08",
        "name": "AlarmsActive",
        "info": "",
        "x": 330,
        "y": 1220,
        "wires": []
    },
    {
        "id": "e54585d67839861c",
        "type": "debug",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1260,
        "wires": []
    },
    {
        "id": "2104c68f6198fa99",
        "type": "debug",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1220,
        "wires": []
    },
    {
        "id": "c3b3218a520614df",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "insert to influx",
        "func": "var influx = global.get(\"Ctrl\");\n\nvar output = [];\n\nfor(let [k,v] of Object.entries(influx)){\n    for(let [a,b] of Object.entries(v)){\n        let objects = {};\n        let objectsAnalog = {};\n        let objectsDigital = {};\n        let objectsdeviceState = {};\n        let objectsOutput = {};\n        let objectsAlarm = {};\n        let deviceName = b[\"_attr\"].name;\n        let adr = b[\"_attr\"].Address;\n        for(let [c,d] of Object.entries(b[\"_analogInput\"])){\n            objects[c + \" \" + d.unit] = parseFloat(d.value);\n        }\n        for(let [c,d] of Object.entries(b[\"_digitalInput\"])){\n            objects[c] = parseFloat(d);\n        }\n        for(let [c,d] of Object.entries(b[\"_deviceStatus\"])){\n            objects[c] = parseFloat(d);\n        }\n        for(let [c,d] of Object.entries(b[\"_outputStatus\"])){\n            objects[c] = parseFloat(d);\n        }\n        for(let [c,d] of Object.entries(b[\"_alarm\"])){\n            objects[c] = parseFloat(d);\n            if(c == \"Alarm\"){\n                node.warn(c +\"------\"+d)\n            }\n        }\n        output.push({\n            measurement : k,\n            fields : objects,\n            tags : {\n                _device : deviceName,\n            },\n            timestamp : parseInt(msg.payload.triggerTimestamp),\n        })\n    }\n}\n\n\nif(output.length > 0){\n    flow.set(\"influxDB\",output);\n    msg.payload = output;\n    node.status({fill:\"green\",shape:\"ring\",text : \"Successfully Amount >>>>\" + output.length})\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "e358d5afbc0551be"
            ]
        ]
    },
    {
        "id": "e0428fb34f83311d",
        "type": "cronplus",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "schedule1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 * * * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 160,
        "y": 60,
        "wires": [
            [
                "c3b3218a520614df"
            ]
        ]
    },
    {
        "id": "e358d5afbc0551be",
        "type": "influxdb batch",
        "z": "a18e7f39a1e44c08",
        "influxdb": "a313a5c51c706b00",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "8fc976c27811713b",
        "bucket": "Suwinthawong",
        "x": 600,
        "y": 40,
        "wires": []
    },
    {
        "id": "1b51dd01e53de5ce",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "convert input to query",
        "func": "var data = JSON.parse(JSON.stringify(global.get(\"all_ctrl.Energy_Meter\")));\nvar output = {};\noutput.name = msg.req.body.name\noutput.from = msg.req.body.from/1000\noutput.to = msg.req.body.to/1000\noutput.every = msg.req.body.samp\nmeasurement = \"\"\ndevice = \"\"\n\nfor(let v of Object.values(data)){\n    let m,d\n    if(measurement===\"\"){\n        m = v[\"_attr\"].name\n    }else{\n        m = `\" or r[\"_measurement\"] == \"`+v[\"_attr\"].name\n    }\n    if(device===\"\"){\n        d = v[\"_attr\"].Address\n    }else{\n        d = `\" or r[\"_device\"] == \"`+v[\"_attr\"].Address\n    }\n    measurement+=m\n    device+=d\n}\n\nnow = new Date()\nnow.setSeconds(0)\nnow.setMilliseconds(0)\nnow = Date.parse(now)/1000\nif(output.to > now){\n    output.to = now\n}\n\noutput.measurement = measurement\noutput.device = device\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "9e4130ae455aefb4",
        "type": "debug",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 200,
        "wires": []
    },
    {
        "id": "f3254178ea0ff954",
        "type": "catch",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "scope": [
            "e358d5afbc0551be"
        ],
        "uncaught": false,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "886f1b90e6f70fc8"
            ]
        ]
    },
    {
        "id": "886f1b90e6f70fc8",
        "type": "debug",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 100,
        "wires": []
    },
    {
        "id": "e10d7b895290c168",
        "type": "debug",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 780,
        "wires": []
    },
    {
        "id": "f184914e0e784985",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "Active Alarm",
        "func": "var output = [];\nvar activeAlarm = flow.get(\"ActiveAlarm\")[msg.payload.name];\nmsg.payload = activeAlarm;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 480,
        "wires": [
            [
                "6141a7d96020166e"
            ]
        ]
    },
    {
        "id": "2efdb392f5b98293",
        "type": "template",
        "z": "a18e7f39a1e44c08",
        "name": "Query",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    INSERT INTO [Suwinthawong].[dbo].[ALARMSLOG]([room],[adr],[deviceName],[message],[TimeStamp],[Status],[LINE]) VALUES('{{{room}}}','{{{adr}}}','{{{deviceName}}}','{{{message}}}','{{{timestamp}}}','{{{Status}}}',0)\n{{/payload}}",
        "output": "str",
        "x": 870,
        "y": 1100,
        "wires": [
            [
                "8a876d04eb2f87e7"
            ]
        ]
    },
    {
        "id": "8a876d04eb2f87e7",
        "type": "MSSQL-UCGv2",
        "z": "a18e7f39a1e44c08",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "SuwinthawongDB",
        "query": "",
        "outField": "payload",
        "x": 1030,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "821a16b488d9fd13",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "AlarmsLogs",
        "func": "var data = global.get(\"all_ctrl\")||{};\nvar output = [];\nvar timestamp = new Date().getTime();\n\nfor(let [k,v] of Object.entries(data)){\n    for(let [a,b] of Object.entries(v)){\n        let name = b[\"_attr\"].name;\n        if(b[\"_alarm\"]){\n            for(let [c,d] of Object.entries(b[\"_alarm\"])){\n                let value = parseInt(d);\n                if(value !== \"\"){\n                    output.push({\n                        room : k,\n                        deviceName : name,\n                        adr : a,\n                        message : c,\n                        timestamp : timestamp,\n                        value : value,\n                    })   \n                }\n            }\n        }\n    }\n}\n\nmsg.filename = \"D:\\\\Dixell\\\\system\\\\Config\\\\Alarm.json\";\nmsg.alarm = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1060,
        "wires": [
            [
                "9f70fb040f7189ff"
            ]
        ]
    },
    {
        "id": "6aebe05121fa7fc3",
        "type": "catch",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "scope": [
            "9f70fb040f7189ff"
        ],
        "uncaught": false,
        "x": 170,
        "y": 1120,
        "wires": [
            [
                "cc988b173c505152"
            ]
        ]
    },
    {
        "id": "cc988b173c505152",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "File is null and create empty file",
        "func": "msg. payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1120,
        "wires": [
            [
                "1411090152ee4b7e"
            ]
        ]
    },
    {
        "id": "e3802309a55c1921",
        "type": "change",
        "z": "a18e7f39a1e44c08",
        "name": "create overwrite file",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "alarm",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 1020,
        "wires": [
            [
                "55f8c48f5424552d"
            ]
        ]
    },
    {
        "id": "55f8c48f5424552d",
        "type": "file",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1080,
        "y": 1020,
        "wires": [
            [
                "0eb3dcb6a810bba7"
            ]
        ]
    },
    {
        "id": "0eb3dcb6a810bba7",
        "type": "debug",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9f70fb040f7189ff",
        "type": "file in",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 460,
        "y": 1060,
        "wires": [
            [
                "f678546dd608ec5e"
            ]
        ]
    },
    {
        "id": "f678546dd608ec5e",
        "type": "json",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 1060,
        "wires": [
            [
                "70d9a6e16be931fd"
            ]
        ]
    },
    {
        "id": "70d9a6e16be931fd",
        "type": "function",
        "z": "a18e7f39a1e44c08",
        "name": "Filter Alarm",
        "func": "let alm = flow.get(\"Alarm\")||{};\nvar output = [];\n\n/* เมื่อเครื่องดับให้เรียกใช้ File และ  Flow Alarm is null*/\nif(Object.keys(alm).length === 0){\n    alm = msg.payload;\n}\nfor(let i = 0; i < msg.alarm.length; i++){\n    let key = msg.alarm[i].adr +\"_\"+ msg.alarm[i].message;\n    \n    if(msg.alarm[i].value !== \"\"){\n        if(msg.alarm[i].value == 1){\n            //AlarmsLog\n            if(!alm[key]) {\n                output.push({\n                    room : msg.alarm[i].room,\n                    deviceName : msg.alarm[i].deviceName,\n                    adr : msg.alarm[i].adr,\n                    message : msg.alarm[i].message,\n                    timestamp : msg.alarm[i].timestamp,\n                    Status : msg.alarm[i].value == 1 ? true : false,\n                })\n                alm[key] = msg.alarm[i].value == 1 ? true : false;\n            }\n        }else{\n            if(alm[key]){\n                output.push({\n                    room : msg.alarm[i].room,\n                    deviceName : msg.alarm[i].deviceName,\n                    adr : msg.alarm[i].adr,\n                    message : msg.alarm[i].message,\n                    timestamp : msg.alarm[i].timestamp,\n                    Status : msg.alarm[i].value == 0 ? false : true,\n                })\n                delete alm[key];\n            }\n        }\n    }\n}\nflow.set(\"Alarm\", alm);\nif(output.length > 0){\n    msg.payload = output;\n    msg.alarm = alm;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1060,
        "wires": [
            [
                "e3802309a55c1921",
                "2efdb392f5b98293"
            ]
        ]
    },
    {
        "id": "1411090152ee4b7e",
        "type": "file",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 580,
        "y": 1120,
        "wires": [
            [
                "a6b6e316ced88d5c"
            ]
        ]
    },
    {
        "id": "a6b6e316ced88d5c",
        "type": "debug",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1120,
        "wires": []
    },
    {
        "id": "6995f69dc53978e8",
        "type": "inject",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1060,
        "wires": [
            [
                "821a16b488d9fd13"
            ]
        ]
    },
    {
        "id": "7c1b2990af6daebc",
        "type": "comment",
        "z": "a18e7f39a1e44c08",
        "name": "AlarmsLog",
        "info": "",
        "x": 300,
        "y": 1020,
        "wires": []
    },
    {
        "id": "15051bd33fedfe62",
        "type": "template",
        "z": "a18e7f39a1e44c08",
        "name": "query",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    Data = from(bucket: \"{{{name}}}\")\n        |> range(start: {{{from}}}, stop: {{{to}}})\n        |> filter(fn: (r) => r[\"_measurement\"] == \"Energy_Meter\")\n        |> aggregateWindow(every: 1m, fn: last, createEmpty: false)\n    \n    ActivePower = Data\n        |> filter(fn: (r) => r[\"_field\"] == \"Total_Active_Power Watt\")\n    \n    EnergyUsage = Data\n        |> filter(fn: (r) => r[\"_field\"] == \"Total_kWh KWh\")\n    \n    Current = Data\n        |> filter(fn: (r) => r[\"_field\"] == \"Current_L3 A\" or r[\"_field\"] == \"Neutral_Current A\" or r[\"_field\"] == \"Current_L1 A\" or r[\"_field\"] == \"Current_L2 A\")\n  \n    kW_raw = ActivePower\n        |> drop(columns: [\"_start\", \"_stop\", \"_measurement\", \"_field\"])\n        |> map(\n            fn: (r) => ({\n                _time: r._time,\n                _device: r._device,\n                _value: float(v: r._value) / 1000.0,\n            }),\n        )\n        |> pivot(columnKey: [\"_device\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n        |> drop(columns: [\"Energy_meter_Main_MDB\", \"Energy_meter_MDB2\"])\n        |> yield(name: \"activepower_raw\")\n    \n    kW_all = ActivePower\n        |> aggregateWindow(every: {{{every}}}, fn: last, createEmpty: false)\n        |> drop(columns: [\"_start\", \"_stop\", \"_measurement\", \"_field\"])\n        |> map(\n            fn: (r) => ({\n                _time: r._time,\n                _device: r._device,\n                _value: float(v: r._value) / 1000.0,\n            }),\n        )\n        |> pivot(columnKey: [\"_device\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n        |> yield(name: \"activepower_all\")\n    \n    kWh_all = EnergyUsage\n        |> aggregateWindow(every: {{{every}}}, fn: last, createEmpty: false)\n        |> drop(columns: [\"_start\", \"_stop\", \"_measurement\", \"_field\"])\n        |> difference(nonNegative: false, columns: [\"_value\"])\n        |> map(\n            fn: (r) => ({\n                _time: r._time,\n                _device: r._device,\n                _value: if float(v: r._value) < 0.0 then 0.0 else r._value,\n            }),\n        )\n        |> pivot(columnKey: [\"_device\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n        |> yield(name: \"energy_all\")\n    \n    kwh_sum = EnergyUsage\n        |> range(start: {{{fromYesterday}}}, stop: {{{to}}})\n        |> filter(fn: (r) => r[\"_measurement\"] == \"Energy_Meter\")\n        |> aggregateWindow(every: 1m, fn: last, createEmpty: false)\n        |> timeShift(duration: 7h, columns: [\"_start\", \"_stop\", \"_time\"])\n        |> aggregateWindow(every: 1d, fn: last, createEmpty: false)\n        |> timeShift(duration: -7h, columns: [\"_start\", \"_stop\", \"_time\"])\n        |> difference(nonNegative: false, columns: [\"_value\"])\n        |> drop(columns: [\"_start\", \"_stop\", \"_measurement\", \"_field\"])\n        |> pivot(columnKey: [\"_device\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n        |> map(\n            fn: (r) => ({\n                \"_time\": r._time,\n                \"total\": r[\"Energy_meter_Main_MDB\"] + r[\"Energy_meter_MDB2\"],\n            }),\n        )\n       |> yield(name: \"total_all\")\n    \n    current_all = Current\n        |> aggregateWindow(every: {{{every}}}, fn: last, createEmpty: false)\n        |> map(\n        fn: (r) => ({\n            _time: r._time,\n            _device: r._device,\n            _field: r._field,\n            _value: float(v: r._value) / 1000.0,\n        }),\n        )\n        |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n        |> map(\n            fn: (r) => ({\n                _time: r._time,\n                _device: r._device,\n                _value: float(v: r[\"Current_L1 A\"]) + float(v: r[\"Current_L2 A\"]) + float(v: r[\"Current_L3 A\"]) + float(v: r[\"Neutral_Current A\"]) / 4.0,\n            }),\n        )\n        |> pivot(columnKey: [\"_device\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n        |> yield(name: \"current\")\n    \n    kwh_first = EnergyUsage\n        |> first()\n    \n    kwh_last = EnergyUsage\n        |> last()\n    \n    union(tables: [kwh_first, kwh_last])\n        |> difference(nonNegative: false, columns: [\"_value\"])\n        |> drop(columns: [\"_start\", \"_stop\", \"_measurement\", \"_field\"])\n        |> pivot(columnKey: [\"_device\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n        |> map(\n            fn: (r) => ({\n                \"Energy_meter_Com.PR1\": r[\"Energy_meter_Com.PR1\"],\n                \"Energy_meter_Com.PR2\": r[\"Energy_meter_Com.PR2\"],\n                \"Energy_meter_Com.PR3\": r[\"Energy_meter_Com.PR3\"],\n                \"Energy_meter_Com.PR4\": r[\"Energy_meter_Com.PR4\"],\n                \"Other\": float(v: r[\"Energy_meter_Main_MDB\"]) + float(v: r[\"Energy_meter_MDB2\"]) - float(v: r[\"Energy_meter_Com.PR1\"]) - float(v: r[\"Energy_meter_Com.PR2\"]) - float(v: r[\"Energy_meter_Com.PR3\"]) - float(v: r[\"Energy_meter_Com.PR4\"]),\n            }),\n        )\n        |> yield(name: \"per_all\")\n{{/payload}}",
        "output": "str",
        "x": 870,
        "y": 820,
        "wires": [
            [
                "6ffeb30face1d432"
            ]
        ]
    },
    {
        "id": "2fcd61dd58ce74a4",
        "type": "inject",
        "z": "a18e7f39a1e44c08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1260,
        "wires": [
            [
                "44f7c78306f8a4f2"
            ]
        ]
    },
    {
        "id": "90ec9f55040ce304",
        "type": "http in",
        "z": "89b1a4cb613890e8",
        "name": "",
        "url": "/api/access/token",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "21b018e50a71485a"
            ]
        ]
    },
    {
        "id": "68419b7c603df5d8",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "msg.headers = {\n    'Content-Type' : 'application/x-www-form-urlencoded',\n    'Authorization' : 'Bearer ' + msg.payload[0].TOKEN,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 80,
        "wires": [
            [
                "16e36dd770c71938"
            ]
        ]
    },
    {
        "id": "746b3d97cdc1b21b",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    SELECT [TOKEN] FROM [dbo].[USERS_MANAGEMENTS] WHERE [USERNAME] = '{{{state}}}'\n{{/payload}}",
        "output": "str",
        "x": 480,
        "y": 80,
        "wires": [
            [
                "efeed1754573da3c"
            ]
        ]
    },
    {
        "id": "21b018e50a71485a",
        "type": "change",
        "z": "89b1a4cb613890e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "request",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 80,
        "wires": [
            [
                "746b3d97cdc1b21b"
            ]
        ]
    },
    {
        "id": "16e36dd770c71938",
        "type": "http request",
        "z": "89b1a4cb613890e8",
        "name": "Revoke TOKEN",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://notify-api.line.me/api/revoke",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 960,
        "y": 80,
        "wires": [
            [
                "de6d587fcc6eb45a"
            ]
        ]
    },
    {
        "id": "05534ffabe9da985",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "request oauth/token",
        "func": "msg.headers = {\n    'Content-Type' : 'application/x-www-form-urlencoded'\n}\nmsg.payload = {\n    grant_type : 'authorization_code',\n    code : msg.request.code,\n    redirect_uri : 'http://172.16.61.21:1880/api/access/token',\n    client_id : 'Wz6zBOPBk5h9065lzydGbD',\n    client_secret : 'GaV8vC4DckhdYJS1Wbu7A5X5noIhCvLHYxy7DgfhtN9',\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 80,
        "wires": [
            [
                "27fb56183d5247c6"
            ]
        ]
    },
    {
        "id": "27fb56183d5247c6",
        "type": "http request",
        "z": "89b1a4cb613890e8",
        "name": "oauth/token",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://notify-bot.line.me/oauth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1470,
        "y": 80,
        "wires": [
            [
                "85341253c20617d3"
            ]
        ]
    },
    {
        "id": "85341253c20617d3",
        "type": "json",
        "z": "89b1a4cb613890e8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 90,
        "y": 140,
        "wires": [
            [
                "b6cb757dce7c0861",
                "dbd5e780634811fd"
            ]
        ]
    },
    {
        "id": "0d4b6fa15aada6c8",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "msg.payload = {\n    token : msg.payload.access_token,\n    username : msg.request.state,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 140,
        "wires": [
            [
                "d81d76aa2551a5f1"
            ]
        ]
    },
    {
        "id": "b6cb757dce7c0861",
        "type": "switch",
        "z": "89b1a4cb613890e8",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "0d4b6fa15aada6c8"
            ]
        ]
    },
    {
        "id": "d81d76aa2551a5f1",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    UPDATE [dbo].[USERS_MANAGEMENTS] SET [TOKEN] = '{{{token}}}' WHERE [USERNAME] = '{{{username}}}'\n    \n    SELECT [USERNAME] FROM [dbo].[USERS_MANAGEMENTS] WHERE [TOKEN] = '{{{token}}}'\n{{/payload}}",
        "output": "str",
        "x": 500,
        "y": 140,
        "wires": [
            [
                "ceeaf86872fb46f1"
            ]
        ]
    },
    {
        "id": "de6d587fcc6eb45a",
        "type": "json",
        "z": "89b1a4cb613890e8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1110,
        "y": 80,
        "wires": [
            [
                "05534ffabe9da985"
            ]
        ]
    },
    {
        "id": "e0f925d719b62ca1",
        "type": "http response",
        "z": "89b1a4cb613890e8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 140,
        "wires": []
    },
    {
        "id": "81a5781bee87939e",
        "type": "comment",
        "z": "89b1a4cb613890e8",
        "name": "Generate Token",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "976d3d2c976863be",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 140,
        "wires": [
            [
                "332138b91aa59610"
            ]
        ]
    },
    {
        "id": "332138b91aa59610",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "redirect to front",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<script>\n    window.location.href = 'http://172.16.61.21:80/';\n</script>",
        "output": "str",
        "x": 1040,
        "y": 140,
        "wires": [
            [
                "e0f925d719b62ca1",
                "992d8f619aac1b6c"
            ]
        ]
    },
    {
        "id": "dbd5e780634811fd",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "request headers",
        "func": "msg.headers = {\n    'Authorization' : 'Bearer ' + msg.payload.access_token\n}\nmsg.token = msg.payload.access_token;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 180,
        "wires": [
            [
                "bf97b3510857fc32"
            ]
        ]
    },
    {
        "id": "bf97b3510857fc32",
        "type": "http request",
        "z": "89b1a4cb613890e8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://notify-api.line.me/api/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "12d9b747ac7c6cd7"
            ]
        ]
    },
    {
        "id": "c90e1bbf49707a0f",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload}}\n    UPDATE [dbo].[USERS_MANAGEMENTS] SET [TARGET] = '{{{target}}}', [TARGET_TYPE] = '{{{targetType}}}' WHERE [USERNAME] = '{{{username}}}' OR [TOKEN] = '{{{}}}'\n    \n    SELECT [TARGET],[TARGET_TYPE] FROM [dbo].[USERS_MANAGEMENTS] WHERE [TARGET] = '{{{target}}}'\n{{/payload}}",
        "output": "str",
        "x": 900,
        "y": 180,
        "wires": [
            [
                "3dbb0f417f16c1a0"
            ]
        ]
    },
    {
        "id": "12d9b747ac7c6cd7",
        "type": "json",
        "z": "89b1a4cb613890e8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 180,
        "wires": [
            [
                "e685f53dff03d53b",
                "cb100899ed34baeb"
            ]
        ]
    },
    {
        "id": "e685f53dff03d53b",
        "type": "switch",
        "z": "89b1a4cb613890e8",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 180,
        "wires": [
            [
                "bcc9346ea2518ccb"
            ]
        ]
    },
    {
        "id": "bcc9346ea2518ccb",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "msg.payload = {\n    target : msg.payload.target,\n    targetType : msg.payload.targetType,\n    username : msg.req.query.state,\n    token : msg.token,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 180,
        "wires": [
            [
                "c90e1bbf49707a0f"
            ]
        ]
    },
    {
        "id": "14b674e73abcc926",
        "type": "http in",
        "z": "89b1a4cb613890e8",
        "name": "",
        "url": "/api/target/token",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "e7c13cba4a0bb6f5"
            ]
        ]
    },
    {
        "id": "2a6c2af5682f89df",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#token}}\n    SELECT [USERNAME],[DISPLAY],[TOKEN],[TARGET],[TARGET_TYPE] FROM [dbo].[USERS_MANAGEMENTS]\n    WHERE [USERNAME] = '{{{username}}}'\n{{/token}}",
        "output": "str",
        "x": 740,
        "y": 280,
        "wires": [
            [
                "9dcd40947b258f88"
            ]
        ]
    },
    {
        "id": "c75590a4c3f4cee1",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "filter users target",
        "func": "var output = [];\n\nfor(let i = 0; i < msg.payload.length; i++){\n    output.push({\n        username : msg.payload[i].USERNAME.trim(),\n        display : msg.payload[i].DISPLAY.trim(),\n        target : msg.payload[i].TARGET,\n        targetType : msg.payload[i].TARGET_TYPE,\n    })\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "f01d6fb19ad85f52",
                "dc3b712e8b3b4350"
            ]
        ]
    },
    {
        "id": "f01d6fb19ad85f52",
        "type": "http response",
        "z": "89b1a4cb613890e8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1250,
        "y": 280,
        "wires": []
    },
    {
        "id": "e7c13cba4a0bb6f5",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "var reciveToken = msg.req.headers['authorization'].split(' ')[1];\nmsg.payload = reciveToken;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "06b299beeb7275dd"
            ]
        ]
    },
    {
        "id": "06b299beeb7275dd",
        "type": "jwt verify",
        "z": "89b1a4cb613890e8",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 450,
        "y": 280,
        "wires": [
            [
                "bd78d75d1eb9742b"
            ]
        ]
    },
    {
        "id": "bd78d75d1eb9742b",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "2a6c2af5682f89df"
            ]
        ]
    },
    {
        "id": "dc3b712e8b3b4350",
        "type": "debug",
        "z": "89b1a4cb613890e8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 320,
        "wires": []
    },
    {
        "id": "795a4a9316ab34d7",
        "type": "http in",
        "z": "89b1a4cb613890e8",
        "name": "",
        "url": "/api/remove/token",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "bf41655e50f7e412"
            ]
        ]
    },
    {
        "id": "bf41655e50f7e412",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "var reciveToken = msg.req.headers['authorization'].split(' ')[1];\nmsg.payload = reciveToken;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 380,
        "wires": [
            [
                "fce040e0f99ff0e2"
            ]
        ]
    },
    {
        "id": "fce040e0f99ff0e2",
        "type": "jwt verify",
        "z": "89b1a4cb613890e8",
        "name": "",
        "alg": [
            "HS256"
        ],
        "jwkurl": "",
        "secret": "obICN5oGcze2s6EIQxmI3RyoHNzrV6EH",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 450,
        "y": 380,
        "wires": [
            [
                "1f74fd2daa4ccfd5"
            ]
        ]
    },
    {
        "id": "1f74fd2daa4ccfd5",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#token}}\n    UPDATE [dbo].[USERS_MANAGEMENTS] SET [TOKEN] = null,[TARGET] = null,[TARGET_TYPE] = null WHERE [USERNAME] = '{{{username}}}'\n    \n    SELECT [TOKEN] FROM [dbo].[USERS_MANAGEMENTS] WHERE [USERNAME] = '{{{username}}}'\n{{/token}}",
        "output": "str",
        "x": 600,
        "y": 380,
        "wires": [
            [
                "7ceff70b7198591c"
            ]
        ]
    },
    {
        "id": "c01ded46fb29cfca",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "response",
        "func": "var output = {};\nif(msg.payload[0].TOKEN == null){\n    output = {\n        status : \"ok\",\n        message : \"Deleted success\",\n    }\n}else{\n    output = {\n        status : \"failed\",\n        message : \"Deleted failed\"\n    }\n}\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 380,
        "wires": [
            [
                "6d315c68a1070706",
                "e1bf53e2d380b20c"
            ]
        ]
    },
    {
        "id": "6d315c68a1070706",
        "type": "http response",
        "z": "89b1a4cb613890e8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 380,
        "wires": []
    },
    {
        "id": "e1bf53e2d380b20c",
        "type": "debug",
        "z": "89b1a4cb613890e8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 440,
        "wires": []
    },
    {
        "id": "cb100899ed34baeb",
        "type": "debug",
        "z": "89b1a4cb613890e8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 240,
        "wires": []
    },
    {
        "id": "f5eb2a2b50a97c67",
        "type": "comment",
        "z": "89b1a4cb613890e8",
        "name": "Target Token",
        "info": "",
        "x": 190,
        "y": 240,
        "wires": []
    },
    {
        "id": "f1d5c0d4e64ed9c9",
        "type": "comment",
        "z": "89b1a4cb613890e8",
        "name": "Remove Token",
        "info": "",
        "x": 200,
        "y": 340,
        "wires": []
    },
    {
        "id": "ceeaf86872fb46f1",
        "type": "MSSQL-UCGv2",
        "z": "89b1a4cb613890e8",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "976d3d2c976863be"
            ]
        ]
    },
    {
        "id": "3dbb0f417f16c1a0",
        "type": "MSSQL-UCGv2",
        "z": "89b1a4cb613890e8",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1080,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "efeed1754573da3c",
        "type": "MSSQL-UCGv2",
        "z": "89b1a4cb613890e8",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 640,
        "y": 80,
        "wires": [
            [
                "68419b7c603df5d8"
            ]
        ]
    },
    {
        "id": "9dcd40947b258f88",
        "type": "MSSQL-UCGv2",
        "z": "89b1a4cb613890e8",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 900,
        "y": 280,
        "wires": [
            [
                "c75590a4c3f4cee1"
            ]
        ]
    },
    {
        "id": "7ceff70b7198591c",
        "type": "MSSQL-UCGv2",
        "z": "89b1a4cb613890e8",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 760,
        "y": 380,
        "wires": [
            [
                "c01ded46fb29cfca"
            ]
        ]
    },
    {
        "id": "1061ffe33b215aa5",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "SELECT [ID]\n      ,room\n      ,[adr]\n      ,message\n      ,[deviceName]\n      ,[LINE]\n      ,[Status]\n      ,[TimeStamp]\nFROM [dbo].[ALARMSLOG] WHERE LINE = 0 \nORDER BY [TimeStamp] ASC",
        "output": "str",
        "x": 240,
        "y": 640,
        "wires": [
            [
                "f7b5cdc0a7d71ecb"
            ]
        ]
    },
    {
        "id": "f7b5cdc0a7d71ecb",
        "type": "MSSQL-UCGv2",
        "z": "89b1a4cb613890e8",
        "mssqlCN": "c5a5c509ecaea59e",
        "name": "Xweb UCGv2",
        "query": "",
        "outField": "payload",
        "x": 400,
        "y": 640,
        "wires": [
            [
                "319e1f60504dfcf7"
            ]
        ]
    },
    {
        "id": "2cbcb9752c9a750e",
        "type": "MSSQL-UCGv2",
        "z": "89b1a4cb613890e8",
        "mssqlCN": "6344ddc14b2ec98c",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 1160,
        "y": 640,
        "wires": [
            [
                "a7ccf95a9a717200"
            ]
        ]
    },
    {
        "id": "2ba7080b4797f935",
        "type": "array-iterate",
        "z": "89b1a4cb613890e8",
        "name": "",
        "source_object": "msg",
        "source_property": "payload",
        "x": 710,
        "y": 640,
        "wires": [
            [
                "cc92eeb9962d9fb9",
                "ac203dfe94d0a31d"
            ],
            []
        ]
    },
    {
        "id": "319e1f60504dfcf7",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "dummy",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 640,
        "wires": [
            [
                "2ba7080b4797f935"
            ]
        ]
    },
    {
        "id": "cc92eeb9962d9fb9",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "var unix_timestamp = parseInt(msg.payload.TimeStamp);\nvar d = new Date(unix_timestamp);\nvar date = (\"00\" + d.getDate()).slice(-2);\nvar month = ('00' + (d.getMonth()+1)).slice(-2);\nvar year = d.getFullYear();\nvar hours = d.getHours();\nvar minutes = \"0\" + d.getMinutes();\n// var seconds = \"0\" + d.getSeconds();\nvar dateTime = hours + \":\" + minutes.substr(-2) +\"  \"+ date +\"/\"+ month +\"/\" + year;\n\nmsg.room = {\n    room : msg.payload.room,\n    adr : msg.payload.adr,\n    deviceName : msg.payload.deviceName,\n    msg : msg.payload.message,\n    state : msg.payload.Status.trim() == 'true' ? true : false,\n    line : msg.payload.LINE,\n    dateTime : dateTime,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 640,
        "wires": [
            [
                "f8a23404212f0f2e"
            ]
        ]
    },
    {
        "id": "f8a23404212f0f2e",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#room}}\n    SELECT [TOKEN] FROM [USERS_MANAGEMENTS] WHERE [PERMISSION] LIKE '%{{{room}}}%'\n{{/room}}",
        "output": "str",
        "x": 1000,
        "y": 640,
        "wires": [
            [
                "2cbcb9752c9a750e"
            ]
        ]
    },
    {
        "id": "a7ccf95a9a717200",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "\nlet token = msg.payload;\nlet arr = [];\nlet arry = [];\nfor(let t of token){\n    if(t.TOKEN !== null){\n        arr.push(t.TOKEN);\n    }\n}\n\nconst toFindDuplicate = (arry) => arry.filter((item,index) => arry.indexOf(item) !== index);\n\nlet duplicate = toFindDuplicate(arr);\nif(duplicate.length === 0){\n    for(let  i of arr){\n        arry.push(i);\n    }\n}else{\n    arry.push(Object.values(duplicate)[0]);\n}\n\nmsg.user = arry;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 640,
        "wires": [
            [
                "12de7db0a1dc74d9"
            ]
        ]
    },
    {
        "id": "12de7db0a1dc74d9",
        "type": "switch",
        "z": "89b1a4cb613890e8",
        "name": "",
        "property": "user.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1470,
        "y": 640,
        "wires": [
            [
                "f835adaf0a84a2d3"
            ]
        ]
    },
    {
        "id": "f835adaf0a84a2d3",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "notify & check & change Data status",
        "func": "var Active = {};\nvar InActive = {};\n\nfor(let i in msg.user){\n    if(msg.room.line === false){\n        if(msg.room.state === true){\n            Active = {\n                room : msg.room.room,\n                adr : msg.room.adr,\n                deviceName : msg.room.deviceName,\n                message : msg.room.msg,\n                state : msg.room.state,\n                line : msg.room.line,\n                dateTime : msg.room.dateTime,\n            }\n        }else{\n            InActive = {\n                room : msg.room.room,\n                adr : msg.room.adr,\n                deviceName : msg.room.deviceName,\n                message : msg.room.msg,\n                state : msg.room.state,\n                line : msg.room.line,\n                dateTime : msg.room.dateTime,\n            }\n        }\n    }\n}\n\nif(Object.keys(Active).length > 0 || Object.keys(InActive).length > 0){\n    msg.payload = {\n        Active : Active,\n        ActiveShow : Object.values(Active).length > 0 ? true : false,\n        \n        Stop : InActive,\n        StopShow : Object.values(InActive).length > 0 ? true : false,\n    }\n}\n\nreturn [msg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 700,
        "wires": [
            [
                "e72d53814a020112"
            ]
        ]
    },
    {
        "id": "f5d9656f95485261",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "shift();",
        "func": "msg.user.shift();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 700,
        "wires": [
            [
                "12de7db0a1dc74d9"
            ]
        ]
    },
    {
        "id": "e72d53814a020112",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#payload.ActiveShow}}\n\n🆘 Alarm Active\n{{#payload.Active}}\n[{{{room}}}]\n→ Address : {{{adr}}}\n→ Device : {{{deviceName}}}\n→ {{{message}}}  🆘 Active\n→  เมื่อ {{{dateTime}}} นาที\n{{/payload.Active}}\n{{/payload.ActiveShow}}\n\n{{#payload.StopShow}}\n\n✅ Alarm InActive\n{{#payload.Stop}}\n[{{{room}}}] \n→ Address : {{{adr}}}\n→ Device : {{{deviceName}}}\n→ {{{message}}}  ✅ InActive\n→  เมื่อ {{{dateTime}}} นาที\n{{/payload.Stop}}\n{{/payload.StopShow}}",
        "output": "str",
        "x": 420,
        "y": 700,
        "wires": [
            [
                "e7f1ae8c028906cf"
            ]
        ]
    },
    {
        "id": "e7f1ae8c028906cf",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "Message",
        "func": "\nmsg.headers = {\n    'Content-Type' : 'application/x-www-form-urlencoded',\n    'Authorization' : 'Bearer ' + msg.user[0],\n}\nmsg.payload = {\n    \"message\" : msg.template\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 700,
        "wires": [
            [
                "5887d8690d141305"
            ]
        ]
    },
    {
        "id": "5887d8690d141305",
        "type": "http request",
        "z": "89b1a4cb613890e8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://notify-api.line.me/api/notify",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 710,
        "y": 700,
        "wires": [
            [
                "4942b0ae6673766f",
                "5d629d973ada481f"
            ]
        ]
    },
    {
        "id": "dc3bc766a9fbe184",
        "type": "debug",
        "z": "89b1a4cb613890e8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 760,
        "wires": []
    },
    {
        "id": "4942b0ae6673766f",
        "type": "switch",
        "z": "89b1a4cb613890e8",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 850,
        "y": 700,
        "wires": [
            [
                "104c88cf97f0d389",
                "0ea1b279487a07b0"
            ]
        ]
    },
    {
        "id": "583dbcce0ec796f3",
        "type": "function",
        "z": "89b1a4cb613890e8",
        "name": "",
        "func": "if(Object.keys(msg.room).length > 0){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 760,
        "wires": [
            [
                "a7f8782610f731f5"
            ]
        ]
    },
    {
        "id": "a7f8782610f731f5",
        "type": "template",
        "z": "89b1a4cb613890e8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{#room}}\n    IF EXISTS(\n    \tSELECT * FROM ALARMSLOG\n    \tWHERE ID = (SELECT max(ID) FROM ALARMSLOG WHERE [room] = '{{{room}}}' AND [adr] = '{{{adr}}}' AND [deviceName] = '{{{deviceName}}}' AND [message] = '{{{msg}}}' AND [Status] = '{{{state}}}' AND [LINE] = 'false')\n    )\n    BEGIN\n        UPDATE ALARMSLOG SET [LINE] = 1 WHERE [adr] = '{{{adr}}}' AND [deviceName] = '{{{deviceName}}}' AND [message] = '{{{msg}}}' AND [LINE] = 0\n        SELECT [LINE] FROM ALARMSLOG WHERE [adr] = '{{{adr}}}' AND [deviceName] = '{{{deviceName}}}' AND [message] = '{{{msg}}}'\n    END\n{{/room}}",
        "output": "str",
        "x": 360,
        "y": 760,
        "wires": [
            [
                "aea8b2c118804564"
            ]
        ]
    },
    {
        "id": "104c88cf97f0d389",
        "type": "delay",
        "z": "89b1a4cb613890e8",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 700,
        "wires": [
            [
                "f5d9656f95485261"
            ]
        ]
    },
    {
        "id": "0ea1b279487a07b0",
        "type": "json",
        "z": "89b1a4cb613890e8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 90,
        "y": 760,
        "wires": [
            [
                "583dbcce0ec796f3"
            ]
        ]
    },
    {
        "id": "aea8b2c118804564",
        "type": "MSSQL",
        "z": "89b1a4cb613890e8",
        "mssqlCN": "eee6093ea24b6bf2",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 520,
        "y": 760,
        "wires": [
            [
                "dc3bc766a9fbe184"
            ]
        ]
    },
    {
        "id": "ac203dfe94d0a31d",
        "type": "delay",
        "z": "89b1a4cb613890e8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 580,
        "wires": [
            [
                "319e1f60504dfcf7"
            ]
        ]
    },
    {
        "id": "08a6e94a957a277d",
        "type": "cronplus",
        "z": "89b1a4cb613890e8",
        "name": "Schedule",
        "outputField": "payload",
        "timeZone": "",
        "persistDynamic": false,
        "commandResponseMsgOutput": "output1",
        "outputs": 1,
        "options": [
            {
                "name": "schedule1",
                "topic": "topic1",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 */3 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 100,
        "y": 640,
        "wires": [
            [
                "1061ffe33b215aa5"
            ]
        ]
    },
    {
        "id": "3659651e96aab5b3",
        "type": "comment",
        "z": "89b1a4cb613890e8",
        "name": "Send_Alarms",
        "info": "",
        "x": 330,
        "y": 600,
        "wires": []
    },
    {
        "id": "992d8f619aac1b6c",
        "type": "debug",
        "z": "89b1a4cb613890e8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 200,
        "wires": []
    },
    {
        "id": "5d629d973ada481f",
        "type": "debug",
        "z": "89b1a4cb613890e8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 760,
        "wires": []
    },
    {
        "id": "34dd5fa40a12994c",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "",
        "func": "var configStored = [\n    {\n        name : \"Suwinthawong\",\n    },\n    {\n        name : \"StoreTest\",\n    }\n];\nvar pathName;\nfor(var i in configStored){\n    msg.filename = \"C:\\\\Users\\\\Onisuka\\\\AppData\\\\Roaming\\\\npm\\\\stored.json\";\n}\nflow.set('Stored',configStored);\nmsg.payload = configStored;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 140,
        "wires": [
            [
                "013a1029165644fc"
            ]
        ]
    },
    {
        "id": "8dcaab7d3592fc0e",
        "type": "inject",
        "z": "26b3157ed829ec77",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "34dd5fa40a12994c"
            ]
        ]
    },
    {
        "id": "013a1029165644fc",
        "type": "file",
        "z": "26b3157ed829ec77",
        "name": "List Store",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 480,
        "y": 140,
        "wires": [
            [
                "512c48e9d19649c3"
            ]
        ]
    },
    {
        "id": "b3e0f51fb2d91cb1",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "path file test",
        "func": "msg.filename = \"C:\\Users\\Onisuka\\AppData\\Roaming\\npm\\storedConfig.json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "79196583c6d2b6fb",
        "type": "comment",
        "z": "26b3157ed829ec77",
        "name": "data_API",
        "info": "",
        "x": 320,
        "y": 40,
        "wires": []
    },
    {
        "id": "e43fadbb43abe193",
        "type": "comment",
        "z": "26b3157ed829ec77",
        "name": "list Devices",
        "info": "http://172.16.46.20/cgi-bin/rt_format.cgi?DEVLST=1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|96|97|98|101|102|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|156|157|TCP-192.168.50.155:502:51|TCP-192.168.50.155:502:52|TCP-192.168.50.155:502:53|TCP-192.168.50.155:502:54|TCP-192.168.50.155:502:55|TCP-192.168.50.155:502:56|TCP-192.168.50.155:502:57|TCP-192.168.50.155:502:58|TCP-192.168.50.155:502:59|TCP-192.168.50.155:502:60|TCP-192.168.50.155:502:61|TCP-192.168.50.155:502:62|TCP-192.168.50.155:502:63|TCP-192.168.50.155:502:64|TCP-192.168.50.155:502:65|TCP-192.168.50.155:502:66|TCP-192.168.50.155:502:67|TCP-192.168.50.155:502:68|TCP-192.168.50.155:502:69|TCP-192.168.50.83:502:101|TCP-192.168.50.83:502:102",
        "x": 470,
        "y": 40,
        "wires": []
    },
    {
        "id": "58ba8011d1a68ec6",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "",
        "func": "Type = Object.keys(msg.payload)[0];\nvar output = {};\nvar data = [];\n\nvar timestamp = new Date().getTime();\nmsg.dateTime = parseInt(timestamp / 1000)\n\nfor(let i in msg.payload[Type].device){\n    analog = [];\n    anal = {};\n    for(let ana in msg.payload[Type].device[i].analogInput){\n        analog.push({\n            name : msg.payload[Type].device[i].analogInput[ana].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].analogInput[ana].value.toString(),\n            unit : msg.payload[Type].device[i].analogInput[ana].unit.toString(),\n            index : msg.payload[Type].device[i].analogInput[ana].index.toString(),\n            \n        })\n        anal[msg.payload[Type].device[i].analogInput[ana].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].analogInput[ana].value.toString();\n    }\n    digital = [];\n    digit = {};\n    for(let di in msg.payload[Type].device[i].digitalInput){\n        digital.push({\n            name : msg.payload[Type].device[i].digitalInput[di].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].digitalInput[di].value.toString(),\n        })\n        digit[msg.payload[Type].device[i].digitalInput[di].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].digitalInput[di].value.toString();\n    }\n    deviceState = [];\n    deviceSta = {};\n    for(let ds in msg.payload[Type].device[i].deviceStatus){\n        deviceState.push({\n            name : msg.payload[Type].device[i].deviceStatus[ds].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].deviceStatus[ds].value.toString(),\n        })\n        deviceSta[msg.payload[Type].device[i].deviceStatus[ds].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].deviceStatus[ds].value.toString();\n    }\n    outState = [];\n    outputState = {};\n    for(let os in msg.payload[Type].device[i].outputStatus){\n        outState.push({\n            name : msg.payload[Type].device[i].outputStatus[os].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].outputStatus[os].value.toString(),\n        })\n        outputState[msg.payload[Type].device[i].outputStatus[os].name.toString().replace(/\"/g,\"\")] = msg.payload[Type].device[i].outputStatus[os].value.toString();\n    }\n    alm = [];\n    alarms = {};\n    for(let al in msg.payload[Type].device[i].alarm){\n        alm.push({\n            name : msg.payload[Type].device[i].alarm[al].name.toString().replace(/\"/g,\"\"),\n            value : msg.payload[Type].device[i].alarm[al].value.toString(),\n        })\n        alarms[msg.payload[Type].device[i].alarm[al].name.toString().replace(/\"/g,\"\").replace(/ /g,\"_\").replace(/-/g,\"_\")] = msg.payload[Type].device[i].alarm[al].value.toString(); \n    }\n    output[i] = {\n        name : msg.payload[Type].device[i].$.name,\n        adr : msg.payload[Type].device[i].$.adr,\n        analogInput : anal,\n        digitalInput : digit,\n        deviceStatus : deviceSta,\n        outputStatus : outputState,\n        alarm : alarms,\n    }\n    data[i] = {\n        name : msg.payload[Type].device[i].$.name.replace(/ /g,\"_\"),\n        adr : msg.payload[Type].device[i].$.adr,\n        uid : msg.payload[Type].device[i].$.uid,\n        lanid : msg.payload[Type].device[i].$.lanid,\n        analogInput : analog,\n        digitalInput : digital,\n        deviceStatus : deviceState,\n        outputStatus : outState,\n        alarm : alm,\n    }\n}\nmsg.data = data;\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 80,
        "wires": [
            [
                "8cbc1c0457949eff"
            ]
        ]
    },
    {
        "id": "a398f20ac9de6050",
        "type": "file",
        "z": "26b3157ed829ec77",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1300,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "26959ce7712df560",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "",
        "func": "var output = [];\nfor(const [k,v] of Object.entries(msg.payload)){\n    if(k !== \"id\" && k !== \"name\"){\n        output.push(k);\n    }\n}\nmsg.filename = \"C:\\\\Users\\\\Onisuka\\\\AppData\\\\Roaming\\\\npm\\\\Suwinthawong_points.json\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "830952d1bdbfa450"
            ]
        ]
    },
    {
        "id": "830952d1bdbfa450",
        "type": "file",
        "z": "26b3157ed829ec77",
        "name": "Point file",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1450,
        "y": 120,
        "wires": [
            [
                "a04b8a2a46c7d56f"
            ]
        ]
    },
    {
        "id": "a04b8a2a46c7d56f",
        "type": "debug",
        "z": "26b3157ed829ec77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 120,
        "wires": []
    },
    {
        "id": "4fd63db0e0df73e6",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "Setting",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nsetting = {\n    url : \"http://172.16.46.20/\"\n    // url : \"http://192.168.200.200/\"\n}\nflow.set(\"Setting\",setting);",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c96cb7a030f4de2f",
        "type": "debug",
        "z": "26b3157ed829ec77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 240,
        "wires": []
    },
    {
        "id": "823c99cdc611338a",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "",
        "func": "var output = {};\n\nfor(var i = 0; i < msg.data.length; i++){\n    output[msg.data[i].name.replace(/ /g,\"_\").replace(/-/g,\"\")] = {\n        name : msg.data[i].name.replace(/ /g,\"_\").replace(/-/g,\"\"),\n        adr : msg.data[i].adr,\n        deviceId : msg.data[i].uid,\n        lanid : msg.data[i].lanid,\n    }\n}\nmsg.filename = \"C:\\\\Users\\\\Onisuka\\\\AppData\\\\Roaming\\\\npm\\\\Suwinthawong_deviceId.json\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 240,
        "wires": [
            [
                "59b1789236bc7752"
            ]
        ]
    },
    {
        "id": "59b1789236bc7752",
        "type": "file",
        "z": "26b3157ed829ec77",
        "name": "List deviceId file",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1220,
        "y": 240,
        "wires": [
            [
                "c96cb7a030f4de2f"
            ]
        ]
    },
    {
        "id": "98772fc4c016dc37",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "set flow storage",
        "func": "var signal = flow.get(\"signal\")||{};\nvar output = {};\nvar total = {};\nvar normal = {};\nvar alarm = {};\nvar list = [];\n\nlet count = 0;\nfor(let [k,v] of Object.entries(msg.questData)){\n    for(let [a,b] of Object.entries(v)){\n        for(let c of Object.values(b[\"_alarm\"])){\n            if(c == 1){\n                list.push(b[\"_attr\"].Address)\n            }\n        }\n    }\n    for(let key in v){\n        ++count;\n    }\n    alarm = Object.keys(list).length;\n}\nnormal = count - alarm;\n\noutput[\"Suwinthawong\"] = {\n    id : 1,\n    name : \"JWD Pacific บจก.เจดับเบิ้ลยูดี (สุวินทวงศ์)\",\n    lat : 13.771822360344581,\n    lng :  100.98082521644248,\n    address : \"99/3 หมู่ 11 Suwinthawong Rd Khlong Nakhon Nueang Khet,Mueang Chachoengsao District, Chachoengsao 24000\",\n    storage : {\n        status : signal,\n        total : count,\n        normal : normal,\n        alarm : alarm,\n    }\n}\nflow.set(\"storage\",output)\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "512c48e9d19649c3",
        "type": "debug",
        "z": "26b3157ed829ec77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 140,
        "wires": []
    },
    {
        "id": "3e2f26719ab8fcab",
        "type": "change",
        "z": "26b3157ed829ec77",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "questData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 20,
        "wires": [
            [
                "8c68815f39ba803a"
            ]
        ]
    },
    {
        "id": "8c68815f39ba803a",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "",
        "func": "msg.filename = \"C:\\\\Users\\\\Onisuka\\\\AppData\\\\Roaming\\\\npm\\\\Suwinthawong_All.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 20,
        "wires": [
            [
                "4930ae4f91865e08"
            ]
        ]
    },
    {
        "id": "4930ae4f91865e08",
        "type": "file",
        "z": "26b3157ed829ec77",
        "name": "Suwinthawong_All",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1690,
        "y": 20,
        "wires": [
            [
                "d51a0c58f9e2e7d8"
            ]
        ]
    },
    {
        "id": "d51a0c58f9e2e7d8",
        "type": "debug",
        "z": "26b3157ed829ec77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 20,
        "wires": []
    },
    {
        "id": "10de7c252f9cf07e",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "test",
        "func": "msg.filename = \"D:\\\\Text\\\\Test\\\\PacificJWD.xml\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 220,
        "wires": [
            [
                "157ee00ab1f688d2"
            ]
        ]
    },
    {
        "id": "157ee00ab1f688d2",
        "type": "file",
        "z": "26b3157ed829ec77",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 280,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "60bc2ef3f7751d1a",
        "type": "inject",
        "z": "26b3157ed829ec77",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "535e853004134cee"
            ]
        ]
    },
    {
        "id": "856919f24f59d720",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "",
        "func": "flow.set(\"Xweb\",msg.payload)\nmsg.Type = Object.keys(msg.payload)[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 80,
        "wires": [
            [
                "a896ee8971b6b1c8"
            ]
        ]
    },
    {
        "id": "a896ee8971b6b1c8",
        "type": "switch",
        "z": "26b3157ed829ec77",
        "name": "",
        "property": "Type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "xwebEVO",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "xweb500",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 80,
        "wires": [
            [
                "58ba8011d1a68ec6"
            ],
            []
        ]
    },
    {
        "id": "63c9bf74590aaeb2",
        "type": "xml",
        "z": "26b3157ed829ec77",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 470,
        "y": 80,
        "wires": [
            [
                "856919f24f59d720"
            ]
        ]
    },
    {
        "id": "6eabd4419c913d16",
        "type": "debug",
        "z": "26b3157ed829ec77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 140,
        "wires": []
    },
    {
        "id": "8cbc1c0457949eff",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "",
        "func": "var touch = JSON.parse(JSON.stringify(global.get(\"dataScreens\")));\n\nvar powerMeter = [1,2,3,4,128,129];\nvar condensor = [5];\nvar coldRoom = [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,115,116,117,118,119,120,121,122,123,124];\nvar anteRoom = [25,26,127];\nvar loadingRoom = [27,28,36,37,125,126];\nvar detector = [29,30,31,32];\nvar blast = [33,34,35,39,40,41];\nvar parkingRm = [38];\nvar childroom = [22];\nvar comp = [\"192.168.50.83:502:101\",\"192.168.50.84:502:102\"];\nvar Inter = [96];\nvar Vessel = [97,98];\n\nvar xjad = [\n    \"192.168.50.155:502:51\",\n    \"192.168.50.155:502:52\",\n    \"192.168.50.155:502:53\",\n    \"192.168.50.155:502:54\",\n    \"192.168.50.155:502:55\",\n    \"192.168.50.155:502:56\",\n    \"192.168.50.155:502:57\",\n    \"192.168.50.155:502:58\",\n    \"192.168.50.155:502:59\",\n    \"192.168.50.155:502:60\",\n    \"192.168.50.155:502:61\",\n    \"192.168.50.155:502:62\",\n    \"192.168.50.155:502:63\",\n    \"192.168.50.155:502:64\",\n    \"192.168.50.155:502:65\",\n    \"192.168.50.155:502:66\",\n    \"192.168.50.155:502:67\",\n    \"192.168.50.155:502:68\",\n    \"192.168.50.155:502:69\",\n    156,157,\n];\n\nvar loading77 = [27,28];\nvar loading20 = [125,126];\nvar blast77 = [34,35,];\nvar blast20 = [33,39,40,41];\n\nvar power = {};\nvar cold = {};\nvar con = {};\nvar ante = {};\nvar loading = {};\nvar detect = {};\nvar bla = {};\nvar parking = {};\nvar child = {};\nvar com = {};\nvar inters = {};\nvar vessels = {};\n\nvar all_ctrl = {};\n\nvar powers = {};\nvar cold_room = {};\nvar ante_room = {};\nvar loading_room = {};\nvar loadings_room = {};\nvar detected = {};\nvar blast_room = {};\nvar blasts_room = {};\nvar parking_room = {};\nvar chill_room = {};\nvar inter = {};\nvar vessel = {};\nvar conden = {};\nvar compress = {};\n\nvar data = global.get(\"xjaData\")\n\nvar objVessel1 = {};\nvar objVessel2 = {};\nvar objInter = {};\nobjInter[\"data\"] = {};\nobjInter[\"on\"] = {};\nobjInter[\"alarm\"] = {};\nvar blast1 = {};\nblast1[\"data\"] = {};\nblast1[\"alarm\"] = {};\nblast1[\"analog\"] = {};\nblast1[\"deviceStatus\"] = {};\nvar blast2 = {};\nblast2[\"data\"] = {};\nblast2[\"alarm\"] = {};\nblast2[\"analog\"] = {};\nblast2[\"deviceStatus\"] = {};\nvar blast3 = {};\nblast3[\"data\"] = {};\nblast3[\"alarm\"] = {};\nblast3[\"analog\"] = {};\nblast3[\"deviceStatus\"] = {};\n\nlet compress12 = global.get(\"Comp1-2\");\nlet comp1 = {};\ncomp1[\"data\"] = {};\nlet comp2 = {};\ncomp2[\"data\"] = {};\nfor(let [c,d] of Object.entries(compress12)){\n    if(c.includes(\"Comp1\")){\n        comp1[\"deviceName\"] = \"Compressor_No.1\";\n        comp1[\"data\"][d.name] = d.value;\n    }else if(c.includes(\"Comp2\")){\n        comp2[\"deviceName\"] = \"Compressor_No.2\"\n        comp2[\"data\"][d.name] = d.value;\n    }\n}\nfor(let to of touch){\n    let nameDevice = to.deviceName;\n    switch(nameDevice){\n        case \"VESSEL_1\":\n            for(let [a,b] of Object.entries(to.data)){\n               if(a.includes(\"Vessel1\")){\n                   objVessel1[a] = b;\n               }\n           }\n        break;\n        case \"VESSEL_2\":\n            for(let [a,b] of Object.entries(to.data)){\n               if(a.includes(\"Vessel2\")){\n                   objVessel2[a] = b;\n               }\n           }\n        break;\n        case \"INTER\":\n            for(let [a,b] of Object.entries(to.data)){\n                let name = a.replace(/ /g,\"_\");\n                let inter = name.includes(\"Inter\");\n                // objInter[a.replace(/ /g,\"_\")] = b;\n                if(inter == false){\n                    if(name.includes(\"INTER\")){\n                        objInter[\"data\"][name] = b;\n                    }else if(name !== \"Pb_1\" && name == \"On\"){\n                        objInter[\"on\"][name] = b;\n                    }else{\n                        if(name !== \"Pb_1\"){\n                            objInter[\"alarm\"][name] = b;\n                        }\n                    }\n                }\n            }\n        break;\n        default:\n        break;\n    }\n    \t\n    switch(to.deviceName){\n        case \"Blast_Freezer_1\":\n            for(let [k,v] of Object.entries(to.data)){\n                blast1[\"deviceName\"] = to.deviceName;\n                if(k.includes(\"Blast1_Fan_\") || k.includes(\"Blast1_Defrost\") || k.includes(\"Blast1_suction_SV\")){\n                     blast1[\"data\"][k] = v;\n                }else if(k.includes(\"Room\")){\n                    blast1[\"analog\"][k] = v;\n                }else if(k.includes(\"On\")){\n                    blast1[\"deviceStatus\"][k] = v;\n                }else{\n                    blast1[\"alarm\"][k] = v;\n                }\n            }\n        break;\n        case \"Blast_Freezer_2\":\n            for(let [k,v] of Object.entries(to.data)){\n                blast2[\"deviceName\"] = to.deviceName;\n                if(k.includes(\"Blast2_Fan_\") || k.includes(\"Blast2_Defrost\") || k.includes(\"Blast2_suction_SV\") || k.includes(\"Blast2_Liquid_SV\")){\n                    blast2[\"data\"][k] = v;\n                }else if(k.includes(\"Room\")){\n                    blast2[\"analog\"][k] = v;\n                }else if(k.includes(\"On\")){\n                    blast2[\"deviceStatus\"][k] = v;\n                }else{\n                    blast2[\"alarm\"][k] = v;\n                }\n            }\n        break;\n        case \"Blast_Freezer_3\":\n            for(let [k,v] of Object.entries(to.data)){\n                blast3[\"deviceName\"] = to.deviceName;\n                if(k.includes(\"Blast3_Fan_\") || k.includes(\"Blast3_Defrost\") || k.includes(\"Blast3_suction_SV\") || k.includes(\"Blast3_Liquid_SV\")){\n                    blast3[\"data\"][k] = v;\n                }else if(k.includes(\"Room\")){\n                    blast3[\"analog\"][k] = v;\n                }else if(k.includes(\"On\")){\n                    blast3[\"deviceStatus\"][k] = v;\n                }else{\n                    blast3[\"alarm\"][k] = v;\n                }\n            }\n        break;\n        default:\n        break;\n    }\n}\nconst finded = (name) =>{\n    for(let i in data){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k == name){\n                return {\n                    name : k,\n                    value : v,\n                };\n            }\n        }\n    }\n}\nvar xja = {};\nxja[\"Blast_Freezer_4\"] = {};\nxja[\"Blast_Freezer_5\"] = {};\nxja[\"Blast_Freezer_6\"] = {};\nxja[\"Cold_Storage_9-1\"] = {};\nxja[\"Cold_Storage_9-2\"] = {};\nxja[\"Cold_Storage_9-3\"] = {};\nxja[\"Cold_Storage_10\"] = {};\nxja[\"Cold_Storage_11-1\"] = {};\nxja[\"Cold_Storage_11-2\"] = {};\nxja[\"Cold_Storage_11-3\"] = {};\nxja[\"Cold_Storage_11-4\"] = {};\nxja[\"Cold_Storage_11-5\"] = {};\nxja[\"Cold_Storage_8\"] = {};\nxja[\"Compressor_No.3\"] = {};\nxja[\"Compressor_No.4\"] = {};\nxja[\"Loading_3\"] = {};\nxja[\"Loading_4\"] = {};\nxja[\"VESSEL_3\"] = {};\nxja[\"Fan_Evap._Condenser_3\"] = {};\nxja[\"Fan_Evap._Condenser_4\"] = {};\nxja[\"Ante_Room_3\"] = {};\nfor(let i = 0; i < data.length; i++){\n    if(data[i].adr == \"192.168.50.155:502:51\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            if(k !== \"On\" && \n                k !== \"Alarm\" &&\n                k !== \"No-Link\"\n            ){\n                xja[\"Compressor_No.3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Compressor_No.3\",\n                    adr : data[i].adr,\n                    name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    value : v,\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:52\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let key = k.replace(/ /g,\"_\").replace(/-/g,\"_\");\n            let name;\n            switch(key){\n                case \"Overload_Fan_1\":\n                    name = \"Fan_1_Overload\";\n                break;\n                case \"Overload_Fan_2\":\n                    name = \"Fan_2_Overload\";\n                break;\n                case \"Overload_Fan_3\":\n                    name = \"Fan_3_Overload\";\n                break;\n                case \"Overload_Fan_4\":\n                    name = \"Fan_4_Overload\";\n                break;\n                case \"Overload_Water_Pump\":\n                    name = \"Water_Pump_Overlaod\";\n                break;\n                default:\n                    name = key;\n                break;\n            }\n            xja[\"Fan_Evap._Condenser_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                deviceName : \"Fan_Evap._Condenser_3\",\n                adr : data[i].adr,\n                name : name,\n                value : v,\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:53\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast4 = k.includes(\"Freezer 4\");\n                if(blast4 == false){\n                    if(k !== \"On\" && k !== \"No-Link\"){\n                        xja[\"VESSEL_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"VESSEL_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:53\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let has = k.includes(\"Freezer 4\");\n                if(has == true){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:54\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer 4\")){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:55\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let has = k.includes(\"Freezer 4\");\n                let blast5 = k.includes(\"Freezer 5\");\n                if(has == true){\n                    xja[\"Blast_Freezer_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    \tdeviceName : \"Blast_Freezer_4\",\n                    \tadr : data[i].adr,\n                    \tname : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                    \tvalue : v\n                    }\n                }\n                if(blast5 == true){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:56\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer 6\");\n                if(k.includes(\"Freezer 5\")){\n                    xja[\"Blast_Freezer_5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Freezer 6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:57\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Freezer 6\")){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:58\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let blast6 = k.includes(\"Freezer 6\");\n                if(blast6 == true){\n                    xja[\"Blast_Freezer_6\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Blast_Freezer_6\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:59\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold91 = k.includes(\"Storage 9-1\");\n                let Cold92 = k.includes(\"Storage 9-2\");\n                if(Cold91 == false && Cold92 == false){\n                    xja[\"Compressor_No.4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Compressor_No.4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else{\n                    if(Cold91 == true){\n                        xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-1\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }else if(Cold92 == true){\n                        xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Cold_Storage_9-2\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:60\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let Cold92 = k.includes(\"Storage 9-2\");\n                if(Cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 9-3\")){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:61\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage 11-1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:62\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage 11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 11-3\")){\n                    xja[\"Cold_Storage_11-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:63\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage 11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 11-5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:64\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage 8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:65\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Loading 3\")){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading 4\")){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Ante Room 3\")){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:66\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold9 = k.includes(\"Storage 9\");\n                let cold91 = k.includes(\"Storage 9-1\");\n                let cold92 = k.includes(\"Storage 9-2\");\n                if(cold9 == false){\n                    if(k !== \"On\" && k !== \"No-Link\"){\n                        xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                            deviceName : \"Ante_Room_3\",\n                            adr : data[i].adr,\n                            name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                            value : v,\n                        }\n                    }\n                }\n                if(cold91 == true){\n                    xja[\"Cold_Storage_9-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(cold92 == true){\n                    xja[\"Cold_Storage_9-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:67\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let cold93 = k.includes(\"Storage 9-3\");\n                let cold11 = k.includes(\"Storage 11\");\n                if(cold93 == true){\n                    xja[\"Cold_Storage_9-3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_9-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n                if(k.includes(\"Storage 11-1\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-1\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 11-2\")){\n                    xja[\"Cold_Storage_11-2\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-2\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 11-3\")){\n                    xja[\"Cold_Storage_11-1\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 11-4\")){\n                    xja[\"Cold_Storage_11-4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:68\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                if(k.includes(\"Storage 11-5\")){\n                    xja[\"Cold_Storage_11-5\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_11-5\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 10\")){\n                    xja[\"Cold_Storage_10\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_10\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Storage 8\")){\n                    xja[\"Cold_Storage_8\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Cold_Storage_8\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading 3\")){\n                    xja[\"Loading_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\").replace(/_Area/g,\"_\"),\n                        value : v,\n                    }\n                }else if(k.includes(\"Loading 4\")){\n                    xja[\"Loading_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Loading_4\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\").replace(/_Area/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"192.168.50.155:502:69\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let ante3 = k.includes(\"Ante Room 3\");\n                if(ante3 == true){\n                    xja[\"Ante_Room_3\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Ante_Room_3\",\n                        adr : data[i].adr,\n                        name : k.replace(/ /g,\"_\").replace(/-/g,\"_\"),\n                        value : v,\n                    }\n                }\n            }\n        }\n    }\n    if(data[i].adr == \"156\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            if(k == dataFind.name){\n                let fan = k.includes(\"Fan\");\n                let key = k.replace(/ /g,\"_\").replace(/-/g,\"_\");\n                if(fan == true){\n                    switch(key){\n                        case \"Overload_Fan_1\":\n                            name = \"Fan_1_Overload\";\n                        break;\n                        case \"Overload_Fan_2\":\n                            name = \"Fan_2_Overload\";\n                        break;\n                        case \"Overload_Fan_3\":\n                            name = \"Fan_3_Overload\";\n                        break;\n                        case \"Overload_Fan_4\":\n                            name = \"Fan_4_Overload\";\n                        break;\n                        case \"Overload_Water_Pump\":\n                            name = \"Water_Pump_Overlaod\";\n                        break;\n                        default:\n                            name = key;\n                        break;\n                    }\n                    xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                        deviceName : \"Fan_Evap._Condenser_4\",\n                        adr : data[i].adr,\n                        name : name,\n                        value : v,\n                    }\n                }\n            }\n        }\n    }else if(data[i].adr == \"157\"){\n        for(let [k,v] of Object.entries(data[i].data)){\n            let dataFind = finded(k);\n            let key = k.replace(/ /g,\"_\").replace(/-/g,\"_\");\n            if(k == dataFind.name){\n                switch(key){\n                    case \"Overload_Fan_1\":\n                        name = \"Fan_1_Overload\";\n                    break;\n                    case \"Overload_Fan_2\":\n                        name = \"Fan_2_Overload\";\n                    break;\n                    case \"Overload_Fan_3\":\n                        name = \"Fan_3_Overload\";\n                    break;\n                    case \"Overload_Fan_4\":\n                        name = \"Fan_4_Overload\";\n                    break;\n                    case \"Overload_Water_Pump\":\n                        name = \"Water_Pump_Overlaod\";\n                    break;\n                    default:\n                        name = key;\n                    break;\n                }\n                xja[\"Fan_Evap._Condenser_4\"][k.replace(/ /g,\"_\").replace(/-/g,\"_\")] = {\n                    deviceName : \"Fan_Evap._Condenser_4\",\n                    adr : data[i].adr,\n                    name : name,\n                    value : v,\n                }\n            }\n        }\n    }\n}\nmsg.test = xja\nvar timestamp = parseInt(new Date().getTime() / 1000);\nvar output = {};\nvar blast4 = {};\nblast4[\"data\"] = {};\nvar blast5 = {};\nblast5[\"data\"] = {};\nvar blast6 = {};\nblast6[\"data\"] = {};\nvar cold91 = {};\ncold91[\"data\"] = {};\nvar cold92 = {};\ncold92[\"data\"] = {};\nvar cold93 = {};\ncold93[\"data\"] = {};\nvar cold8 = {};\ncold8[\"data\"] = {};\nvar cold10 = {};\ncold10[\"data\"] = {};\nvar cold11 = {};\ncold11[\"data\"] = {};\nvar cold12 = {};\ncold12[\"data\"] = {};\nvar cold13 = {};\ncold13[\"data\"] = {};\nvar cold14 = {};\ncold14[\"data\"] = {};\nvar cold15 = {};\ncold15[\"data\"] = {};\nvar ante3 = {};\nante3[\"data\"] = {};\nvar loading3 = {};\nloading3[\"data\"] = {};\nvar loading4 = {};\nloading4[\"data\"] = {};\nvar myCompressor = {};\nmyCompressor[\"data\"] = {};\nvar evap2000 = {};\nevap2000[\"data\"] = {};\nvar evapsec = {};\nevapsec[\"data\"] = {};\nvar myCom355 = {};\nmyCom355[\"data\"] = {};\nvar vesselss = {};\nvesselss[\"data\"] = {};\nfor(let [k,v] of Object.entries(xja)){\n    for(let [a,b] of Object.entries(v)){\n        switch(b.deviceName){\n            case \"Blast_Freezer_4\":\n                blast4[\"deviceName\"] = b.deviceName;\n                blast4[\"timestamp\"] = timestamp;\n                blast4[\"data\"][b.name] = b.value;\n            break;\n            case \"Blast_Freezer_5\":\n                blast5[\"deviceName\"] = b.deviceName;\n                blast5[\"timestamp\"] = timestamp;\n                blast5[\"data\"][b.name] = b.value;\n            break;\n            case \"Blast_Freezer_6\":\n                blast6[\"deviceName\"] = b.deviceName;\n                blast6[\"timestamp\"] = timestamp;\n                blast6[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_9-1\":\n                cold91[\"deviceName\"] = b.deviceName;\n                cold91[\"timestamp\"] = timestamp;\n                cold91[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_9-2\":\n                cold92[\"deviceName\"] = b.deviceName;\n                cold92[\"timestamp\"] = timestamp;\n                cold92[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_9-3\":\n                cold93[\"deviceName\"] = b.deviceName;\n                cold93[\"timestamp\"] = timestamp;\n                cold93[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_8\":\n                cold8[\"deviceName\"] = b.deviceName;\n                cold8[\"timestamp\"] = timestamp;\n                cold8[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_10\":\n                cold10[\"deviceName\"] = b.deviceName;\n                cold10[\"timestamp\"] = timestamp;\n                cold10[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-1\":\n                cold11[\"deviceName\"] = b.deviceName;\n                cold11[\"timestamp\"] = timestamp;\n                cold11[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-2\":\n                cold12[\"deviceName\"] = b.deviceName;\n                cold12[\"timestamp\"] = timestamp;\n                cold12[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-3\":\n                cold13[\"deviceName\"] = b.deviceName;\n                cold13[\"timestamp\"] = timestamp;\n                cold13[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-4\":\n                cold14[\"deviceName\"] = b.deviceName;\n                cold14[\"timestamp\"] = timestamp;\n                cold14[\"data\"][b.name] = b.value;\n            break;\n            case \"Cold_Storage_11-5\":\n                cold15[\"deviceName\"] = b.deviceName;\n                cold15[\"timestamp\"] = timestamp;\n                cold15[\"data\"][b.name] = b.value;\n            break;\n            case \"Ante_Room_3\":\n                ante3[\"deviceName\"] = b.deviceName;\n                ante3[\"timestamp\"] = timestamp;\n                ante3[\"data\"][b.name] = b.value;\n            break;\n            case \"Loading_3\":\n                loading3[\"deviceName\"] = b.deviceName;\n                loading3[\"timestamp\"] = timestamp;\n                loading3[\"data\"][b.name.replace(/_Area/g,\"\")] = b.value;\n            break;\n            case \"Loading_4\":\n                loading4[\"deviceName\"] = b.deviceName;\n                loading4[\"timestamp\"] = timestamp;\n                loading4[\"data\"][b.name.replace(/_Area/g,\"\")] = b.value;\n            break;\n            case \"Compressor_No.3\":\n                myCom355[\"deviceName\"] = b.deviceName;\n                myCom355[\"timestamp\"] = timestamp;\n                myCom355[\"data\"][b.name] = b.value;\n            break;\n            case \"Compressor_No.4\":\n                myCompressor[\"deviceName\"] = b.deviceName;\n                myCompressor[\"timestamp\"] = timestamp;\n                myCompressor[\"data\"][b.name] = b.value;\n            break;\n            case \"Fan_Evap._Condenser_3\":\n                evap2000[\"deviceName\"] = b.deviceName;\n                evap2000[\"timestamp\"] = timestamp;\n                evap2000[\"data\"][b.name] = b.value;\n            break;\n            case \"Fan_Evap._Condenser_4\":\n                evapsec[\"deviceName\"] = b.deviceName;\n                evapsec[\"timestamp\"] = timestamp;\n                evapsec[\"data\"][b.name] = b.value;\n            break;\n            case \"VESSEL_3\":\n                vesselss[\"deviceName\"] = b.deviceName;\n                vesselss[\"timestamp\"] = timestamp;\n                vesselss[\"data\"][b.name] = b.value;\n            break;\n            default:\n            break;\n        }\n    }\n}\n\n\nlet objCom = {};\nobjCom[\"data\"] = {};\nlet objCon3 = {};\nobjCon3[\"data\"] = {};\nlet objCon4 = {};\nobjCon4[\"data\"] = {};\nfor(let [a,b] of Object.entries(myCompressor.data)){\n    if(a == \"No_Link\"){\n        objCom[\"nolink\"] = b;\n    }else if(a == \"On\"){\n        objCom[\"on\"] = b;\n    }else{\n        objCom[\"data\"][a] = b; \n    }\n}\nfor(let [a,b] of Object.entries(evap2000.data)){\n    if(a == \"No_Link\"){\n        objCon3[\"nolink\"] = b;\n    }else if(a == \"On\"){\n        objCon3[\"on\"] = b;\n    }else if(a == \"Alarm\"){\n        objCon3[\"alarm\"] = b;\n    }else{\n        objCon3[\"data\"][a] = b;\n    }\n}\nfor(let [a,b] of Object.entries(evapsec.data)){\n    if(a == \"No_Link\"){\n        objCon4[\"nolink\"] = b;\n    }else if(a == \"On\"){\n        objCon4[\"on\"] = b;\n    }else{\n        objCon4[\"data\"][a] = b;\n    }\n}\n\nfor(let i in msg.data){\n    var analog = {};\n    for(let a in msg.data[i].analogInput){\n        analog[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n            value : msg.data[i].analogInput[a].value,\n            unit : msg.data[i].analogInput[a].unit,\n        };\n        if(msg.data[i].analogInput[a].unit == \"\"){\n            analog[msg.data[i].analogInput[a].name.replace(/ /g,\"_\")] = {\n                value : msg.data[i].analogInput[a].value,\n                unit : \"\",\n            };\n        }\n    }\n    var digital = {};\n    for(let d in msg.data[i].digitalInput){\n        digital[msg.data[i].digitalInput[d].name.replace(/ /g,\"_\")] = msg.data[i].digitalInput[d].value;\n    }\n    var devState = {};\n    for(let de in msg.data[i].deviceStatus){\n        devState[msg.data[i].deviceStatus[de].name.replace(/ /g,\"_\")] = msg.data[i].deviceStatus[de].value;\n    }\n    var outputState = {};\n    for(let os in msg.data[i].outputStatus){\n        outputState[msg.data[i].outputStatus[os].name.replace(/ /g,\"_\")] = msg.data[i].outputStatus[os].value;\n    }\n    var alm = {};\n    for(let al in msg.data[i].alarm){\n        alm[msg.data[i].alarm[al].name.replace(/ /g,\"_\").replace(/-/g,\"_\").replace(/%20/g,\"_\")] = msg.data[i].alarm[al].value;\n    }\n    var cate = {};\n    for(let c in msg.data[i].category){\n        cate[msg.data[i].category[c].name.replace(/ /g,\"_\")] = msg.data[i].category[c].value;\n    }\n    for(let p in powerMeter){\n        if(powerMeter[p] == msg.data[i].adr){\n            power[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : {},\n                _deviceStatus : {},\n                _outputStatus : {},\n                _alarm : alm,\n            }\n            powers[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"EPM07S\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : {},\n                _deviceStatus : {},\n                _outputStatus : {},\n                _alarm : alm,\n            }\n        }\n    }\n    if(msg.data[i].name == cold91.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold91.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else if(msg.data[i].name == cold92.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold92.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else if(msg.data[i].name == cold93.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold93.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else if(msg.data[i].name == cold11.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold11.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else if(msg.data[i].name == cold12.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold12.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else if(msg.data[i].name == cold13.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold13.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else if(msg.data[i].name == cold14.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold14.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else if(msg.data[i].name == cold15.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold15.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else if(msg.data[i].name == cold8.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold8.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else if(msg.data[i].name == cold10.deviceName){\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                \n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                \n            }\n            cold_room[msg.data[i].adr] = {\n            \t\"_attr\" : {\n            \t\tmodel : \"XR77CX\",\n            \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n            \t\tAddress : msg.data[i].adr,\n            \t\tUID : msg.data[i].uid,\n            \t\tPeripheral : msg.data[i].lanid,\n            \t} ,\n            \t_analogInput : analog,\n            \t_digitalInput : Object.assign(digital,cold10.data),\n            \t_deviceStatus : devState,\n            \t_outputStatus : outputState,\n            \t_alarm : alm,\n            \t \n            }\n        }\n    }else{\n        for(let col in coldRoom){\n            if(coldRoom[col] == msg.data[i].adr){\n                cold[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                cold_room[msg.data[i].adr] = {\n                \t\"_attr\" : {\n                \t\tmodel : \"XR77CX\",\n                \t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n                \t\tAddress : msg.data[i].adr,\n                \t\tUID : msg.data[i].uid,\n                \t\tPeripheral : msg.data[i].lanid,\n                \t} ,\n                \t_analogInput : analog,\n                \t_digitalInput : digital,\n                \t_deviceStatus : devState,\n                \t_outputStatus : outputState,\n                \t_alarm : alm,\n                \t \n                }\n            }\n        }\n    }\n    for(let c in condensor){\n        if(condensor[c] == msg.data[i].adr){\n            con[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            conden[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n        }\n        var fanEvap = JSON.parse(JSON.stringify(global.get(\"Evap\")));\n        for(let [a,b] of Object.entries(fanEvap)){\n            let obj = {};\n            obj[\"data\"] = {};\n            for(let [c,d] of Object.entries(b.data)){\n                obj[\"data\"][c.replace(/Evap1/g,\"\").replace(/Evap2/g,\"\")] = d;\n                \n            }\n            switch(b.deviceName){\n                case \"Fan_Evap._Condenser_1\":\n                    conden[\"172.16.46.23:502\"+\":1\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:1\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                    }\n                break;\n                case \"Fan_Evap._Condenser_2\":\n                    conden[\"172.16.46.23:502\"+\":2\"] = {\n                        \"_attr\" : {\n                            model : \"TouchScreen\",\n                            name : b.deviceName,\n                            Address : \"172.16.46.23:502:2\",\n                            Peripheral : \"TCP\",\n                        },\n                        _analogInput : {},\n                        _digitalInput : obj.data,\n                        _deviceStatus : {},\n                        _outputStatus : {},\n                        _alarm : {},\n                    }\n                break;\n                default:\n                break;\n            }\n        }\n        conden[\"192.168.50.155:502:52\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evap2000.deviceName,\n                Address : \"192.168.50.155:502:52\",\n                Peripheral : \"TCP\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon3.data,\n            _deviceStatus : {\n                \"On\" : objCon3.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"Alarm\" : objCon3.alarm,\n                \"No_Link\" : objCon3.nolink,\n            },\n        }\n        conden[\"156\"] = {\n            \"_attr\" : {\n                model : \"XJA50D\",\n                name : evapsec.deviceName,\n                Address : \"156\",\n                Peripheral : \"RS1\",\n            },\n            _analogInput : {},\n            _digitalInput : objCon4.data,\n            _deviceStatus : {\n                \"On\" : objCon4.on,\n            },\n            _outputStatus : {},\n            _alarm : {\n                \"No_Link\" : objCon4.nolink,\n            },\n        }\n    }\n    if(msg.data[i].name == ante3.deviceName){\n        for(let an in anteRoom){\n        \tif(anteRoom[an] == msg.data[i].adr){\n        \t\tante[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tante_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,ante3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else{\n        for(let an in anteRoom){\n        \tif(anteRoom[an] == msg.data[i].adr){\n        \t\tante[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tante_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }\n    for(let lo in loadingRoom){\n        if(loadingRoom[lo] == msg.data[i].adr){\n            loading[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n        }\n    }\n    if(msg.data[i].name == loading3.deviceName){\n        for(let lo in loading77){\n        \tif(loading77[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let lo in loading20){\n        \tif(loading20[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == loading4.deviceName){\n        for(let lo in loading77){\n        \tif(loading77[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let lo in loading20){\n        \tif(loading20[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,loading4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else{\n        for(let lo in loading77){\n        \tif(loading77[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let lo in loading20){\n        \tif(loading20[lo] == msg.data[i].adr){\n        \t\tloadings_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }\n    for(let d in detector){\n        if(detector[d] == msg.data[i].adr){\n            detect[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            detected[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XT121C\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                },\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n        }\n    }\n    for(let b in blast){\n        if(blast[b] == msg.data[i].adr){\n            bla[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n            }\n        }\n    }\n    if(msg.data[i].name.replace(/ /g,\"_\") == blast4.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast4.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name.replace(/ /g,\"_\") == blast5.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast5.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name.replace(/ /g,\"_\") == blast6.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast6.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == blast1.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == blast2.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == blast3.deviceName){\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,blast3.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else{\n        for(let b in blast77){\n        \tif(blast77[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR77CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n        for(let b in blast20){\n        \tif(blast20[b] == msg.data[i].adr){\n        \t\tblast_room[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"XR20CX\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }\n    for(let p in parkingRm){\n        if(parkingRm[p] == msg.data[i].adr){\n            parking[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            parking_room[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n        }\n    }\n    for(let ch in childroom){\n        if(childroom[ch] == msg.data[i].adr){\n            child[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            chill_room[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XR77CX\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n        }\n    }\n    if(msg.data[i].name == myCompressor.deviceName){\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCompressor.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == myCom355.deviceName){\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,myCom355.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == comp1.deviceName){\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp1.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else if(msg.data[i].name == comp2.deviceName){\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : Object.assign(digital,comp2.data),\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }else{\n        for(let c in comp){\n        \tif(comp[c] == msg.data[i].adr){\n        \t\tcom[msg.data[i].name.replace(/ /g,\"_\")] = {\n        \t\t\t$ : {\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t} ,\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t\tcompress[msg.data[i].adr] = {\n        \t\t\t\"_attr\" : {\n        \t\t\t\tmodel : \"Compressor\",\n        \t\t\t\tname : msg.data[i].name.replace(/ /g,\"_\"),\n        \t\t\t\tAddress : msg.data[i].adr,\n        \t\t\t\tUID : msg.data[i].uid,\n        \t\t\t\tPeripheral : msg.data[i].lanid,\n        \t\t\t},\n        \t\t\t_analogInput : analog,\n        \t\t\t_digitalInput : digital,\n        \t\t\t_deviceStatus : devState,\n        \t\t\t_outputStatus : outputState,\n        \t\t\t_alarm : alm,\n        \t\t\t \n        \t\t}\n        \t}\n        }\n    }\n    compress[\"192.168.50.155:502:51\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCom355.deviceName,\n            Address : \"192.168.50.155:502:51\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : myCom355.data,\n        _deviceStatus : {},\n        _outputStatus : {},\n        _alarm : {},\n    }\n    compress[\"192.168.50.155:502:59\"] = {\n        \"_attr\" : {\n            model : \"XJA50D\",\n            name : myCompressor.deviceName,\n            Address : \"192.168.50.155:502:59\",\n            Peripheral : \"TCP\",\n        },\n        _analogInput : {},\n        _digitalInput : objCom.data,\n        _deviceStatus : {\n            \"On\" : objCom.on,\n        },\n        _outputStatus : {},\n        _alarm : {\n            \"No_Link\" : objCom.nolink,\n        },\n    }\n    for(let o in Inter){\n        if(Inter[o] == msg.data[i].adr){\n            inters[msg.data[i].name.replace(/ /g,\"_\")] = {\n                $ : {\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : digital,\n                _deviceStatus : devState,\n                _outputStatus : outputState,\n                _alarm : alm,\n                 \n            }\n            inter[msg.data[i].adr] = {\n                \"_attr\" : {\n                    model : \"XJP60D\",\n                    name : msg.data[i].name.replace(/ /g,\"_\"),\n                    Address : msg.data[i].adr,\n                    UID : msg.data[i].uid,\n                    Peripheral : msg.data[i].lanid,\n                } ,\n                _analogInput : analog,\n                _digitalInput : Object.assign(digital,objInter.data),\n                _deviceStatus : objInter.on,\n                _outputStatus : outputState,\n                _alarm : objInter.alarm,\n                 \n            }\n        }\n    }\n    if(msg.data[i].name == vesselss.deviceName){\n        for(let ves in Vessel){\n            if(Vessel[ves] == msg.data[i].adr){\n                vessels[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                vessel[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesselss.data),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n            }\n        }\n    }else{\n        for(let ves in Vessel){\n            if(Vessel[ves] == msg.data[i].adr){\n                vessels[msg.data[i].name.replace(/ /g,\"_\")] = {\n                    $ : {\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : digital,\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n                let vesse;\n                if(msg.data[i].name.replace(/ /g,\"_\") == \"VESSEL_1\"){\n                    vesse = objVessel1;\n                }else if(msg.data[i].name.replace(/ /g,\"_\") == \"VESSEL_2\"){\n                    vesse = objVessel2;\n                }\n                vessel[msg.data[i].adr] = {\n                    \"_attr\" : {\n                        model : \"XJP60D\",\n                        name : msg.data[i].name.replace(/ /g,\"_\"),\n                        Address : msg.data[i].adr,\n                        UID : msg.data[i].uid,\n                        Peripheral : msg.data[i].lanid,\n                    } ,\n                    _analogInput : analog,\n                    _digitalInput : Object.assign(digital,vesse),\n                    _deviceStatus : devState,\n                    _outputStatus : outputState,\n                    _alarm : alm,\n                     \n                }\n            }\n        }\n    }\n    var ves3 = {};\n    ves3[\"data\"] = {};\n    ves3[\"nolink\"] = {};\n    for(let [a,b] of Object.entries(vesselss.data)){\n        if(a == \"No_Link\"){\n            ves3[\"nolink\"][a] = b;\n        }else{\n            ves3[\"data\"][a] = b;\n        }\n    }\n    if(vesselss.deviceName){\n        vessel[\"172.16.46.23\"] = {\n            \"_attr\" : {\n                model : \"TouchScreen\",\n                name : vesselss.deviceName,\n                Address : \"172.16.46.23\",\n                Peripheral : \"TCP\",\n            } ,\n            _analogInput : {},\n            _digitalInput : ves3.data,\n            _deviceStatus : {},\n            _outputStatus : {},\n            _alarm : ves3.nolink,\n        }\n    }\n}\n\nall_ctrl = {\n    \"Cold_Room\" : cold_room,\n    \"Ante_Room\" : ante_room,\n    \"Chill_Room\" : chill_room,\n    \"Packing_Room\" : parking_room,\n    \"Loading_Room\" : loadings_room,\n    \"Blast_Room\" : blast_room,\n    \"FanEvap.Condenser\" : conden,\n    \"INTER\" : inter,\n    \"VESSEL\" : vessel,\n    \"NH3_Detector\": detected,\n    \"EnergyMeter\" : powers,\n    \"Compressor\" : compress,\n}\nmsg.payload = {\n    id : 1,\n    name : \"Suwinthawong\",\n    INTER : inter,\n    VESSEL : vessel,\n    Compressor : compress,\n    Chill_Room : chill_room,\n    Packing_Room : parking_room,\n    Blast_Room : blast_room,\n    NH3_Detector : detected,\n    Loading_Room : loadings_room,\n    Ante_Room : ante_room,\n    Condenser : conden,\n    EnergyMeter : powers,\n    Cold_Room : cold_room,\n}\nflow.set(\"all_ctrl\",all_ctrl);\nglobal.set(\"all_ctrl\",all_ctrl);\nmsg.questData = all_ctrl;\nmsg.host = flow.get(\"Setting\").url.replace(/\\//g,\"\").replace(/http:/g,\"\");\nmsg.filename = \"C:\\\\Users\\\\Onisuka\\\\AppData\\\\Roaming\\\\npm\\\\Suwinthawong.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 80,
        "wires": [
            [
                "3e2f26719ab8fcab",
                "a398f20ac9de6050",
                "26959ce7712df560",
                "823c99cdc611338a",
                "6eabd4419c913d16",
                "98772fc4c016dc37"
            ]
        ]
    },
    {
        "id": "3e3b54b48e5a7d71",
        "type": "ping",
        "z": "26b3157ed829ec77",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "192.168.200.200",
        "timer": "10",
        "inputs": 0,
        "x": 600,
        "y": 200,
        "wires": [
            [
                "1c00c485867aeca4"
            ]
        ]
    },
    {
        "id": "1c00c485867aeca4",
        "type": "function",
        "z": "26b3157ed829ec77",
        "name": "ping tcp ip",
        "func": "var ping;\nif(msg.payload == false){\n    ping = false;\n}else{\n    ping = true;\n}\nflow.set(\"signal\",ping)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "535e853004134cee",
        "type": "template",
        "z": "26b3157ed829ec77",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<xwebEVO name=\"XWEB EVO\" on=\"1\">\n<device name=\"Energy meter Com.PR3\" adr=\"1\" uid=\"51\" lanid=\"RS1\">\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>1.000</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>1.000</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.08</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>1.000</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>255585.708</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>160</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>403.3</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>229.7</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>232.5</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>231.0</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>399.8</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>402.1</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter Main MDB\" adr=\"2\" uid=\"52\" lanid=\"RS1\">\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>402.7</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>126000.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>133350.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>136450.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>139300.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>54850.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>400.1</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>55300.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>155950.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>1193291.745</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>500</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>232.7</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>36.000</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>229.9</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>403.8</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>607.000</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>46950.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>641.000</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>620.000</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>149150.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>137625.6</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>231.2</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>0.913</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.07</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>0.927</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>0.949</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>397150.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>431900.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter Com.PR1\" adr=\"3\" uid=\"53\" lanid=\"RS1\">\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>402.9</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>86508.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>92712.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>-90528.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>95208.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>-44088.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>400.5</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>39024.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>76860.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>283726.163</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>120</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>232.8</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>874.800</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>230.3</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>403.7</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>413.280</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>38868.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>435.360</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>434.760</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>101304.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>98304.0</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>231.1</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>0.911</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.08</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>0.900</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>0.928</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>178992.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>-44124.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>295368.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter Main Com.PR2\" adr=\"4\" uid=\"54\" lanid=\"RS1\">\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>1.000</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>1.000</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.08</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>1.000</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>153474.848</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>120</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>404.6</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>230.6</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>0.000</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>233.1</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>231.7</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>401.2</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>0.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>0.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>403.5</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Fan Evap. Condenser\" adr=\"5\" uid=\"3\" lanid=\"RS1\">\n<analogInput>\n<name>\"Discharge. (bar)\"</name>\n<value>50.00</value>\n<unit>bar</unit>\n<index>3</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Low Pressure\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Pressure\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_1-1\" adr=\"6\" uid=\"10\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.2</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.8</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_1-2\" adr=\"7\" uid=\"11\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.5</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.4</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_1-3\" adr=\"8\" uid=\"12\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.6</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_1-4\" adr=\"9\" uid=\"13\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.1</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.7</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_2-1\" adr=\"10\" uid=\"14\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-19.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>0.0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_2-2\" adr=\"11\" uid=\"15\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-19.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_2-3\" adr=\"12\" uid=\"16\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.9</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_3-1\" adr=\"13\" uid=\"17\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.7</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_3-2\" adr=\"14\" uid=\"18\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-19.1</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_3-3\" adr=\"15\" uid=\"19\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.8</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.5</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_3-4\" adr=\"16\" uid=\"20\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-19.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.4</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_4-1\" adr=\"17\" uid=\"21\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.1</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-17.6</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_4-2\" adr=\"18\" uid=\"22\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-17.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-17.8</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-20.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_7-1\" adr=\"19\" uid=\"23\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>30.1</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>30.8</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>29.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_6-1\" adr=\"20\" uid=\"24\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.5</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_6-2\" adr=\"21\" uid=\"25\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-18.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-18.4</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-21.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Chill Room\" adr=\"22\" uid=\"26\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>11.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>12.4</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_5-1\" adr=\"23\" uid=\"27\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>1</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_5-2\" adr=\"24\" uid=\"28\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>1</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Ante Room.1-1\" adr=\"25\" uid=\"29\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-4.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>-4.6</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-5.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Ante Room.1-2\" adr=\"26\" uid=\"30\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-3.0</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>49.5</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>-5.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Loading_1\" adr=\"27\" uid=\"31\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>9.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>8.3</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Loading_2\" adr=\"28\" uid=\"32\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>8.2</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>0.0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"NH3 Detector_1\" adr=\"29\" uid=\"33\" lanid=\"RS1\">\n<analogInput>\n<name>\"NH3\"</name>\n<value>0</value>\n<unit>ppm</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"High Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Pre Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"NH3 Detector_2\" adr=\"30\" uid=\"34\" lanid=\"RS1\">\n<analogInput>\n<name>\"NH3\"</name>\n<value>-1</value>\n<unit>ppm</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"High Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Pre Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"NH3 Detector_3\" adr=\"31\" uid=\"35\" lanid=\"RS1\">\n<analogInput>\n<name>\"NH3\"</name>\n<value>0</value>\n<unit>ppm</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"High Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Pre Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"NH3 Detector_4\" adr=\"32\" uid=\"36\" lanid=\"RS1\">\n<analogInput>\n<name>\"NH3\"</name>\n<value>0</value>\n<unit>ppm</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"High Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Pre Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 1\" adr=\"33\" uid=\"37\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>13.2</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 2\" adr=\"34\" uid=\"67\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>16.1</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 3\" adr=\"35\" uid=\"68\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>16.5</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"LOADING AHU_1\" adr=\"36\" uid=\"69\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>9.5</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>12.1</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"LOADING AHU_2\" adr=\"37\" uid=\"70\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>11.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>12.9</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>8.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Packing_1_1\" adr=\"38\" uid=\"71\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>26.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>22.0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Set Point\"</name>\n<value>0.0</value>\n<unit>°C</unit>\n<index>19</index>\n</analogInput>\n<digitalInput>\n<name>\"Auto\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Alarm Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Buzzer\"</name>\n<value>0</value>\n</deviceStatus>\n<deviceStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Fan\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Defrost\"</name>\n<value>0</value>\n</outputStatus>\n<outputStatus>\n<name>\"Liquid SV\"</name>\n<value>1</value>\n</outputStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 4\" adr=\"39\" uid=\"72\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-17.2</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 5\" adr=\"40\" uid=\"73\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>-16.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Blast Freezer 6\" adr=\"41\" uid=\"74\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>2.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"INTER\" adr=\"96\" uid=\"75\" lanid=\"RS1\">\n<analogInput>\n<name>\"Pb 1\"</name>\n<value>2.4</value>\n<unit>Bar</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"VESSEL 1\" adr=\"97\" uid=\"76\" lanid=\"RS1\">\n<analogInput>\n<name>\"Pb 1\"</name>\n<value>0.8</value>\n<unit>Bar</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"VESSEL 2\" adr=\"98\" uid=\"77\" lanid=\"RS1\">\n<analogInput>\n<name>\"Pb 1\"</name>\n<value>1.7</value>\n<unit>Bar</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_9-1\" adr=\"115\" uid=\"38\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>16.1</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>15.6</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_9-2\" adr=\"116\" uid=\"39\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>14.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>15.9</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_9-3\" adr=\"117\" uid=\"40\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>15.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>14.6</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>1</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_8\" adr=\"118\" uid=\"41\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>23.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>22.8</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_10\" adr=\"119\" uid=\"42\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>24.4</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>23.6</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-1\" adr=\"120\" uid=\"43\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>24.4</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>24.1</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-2\" adr=\"121\" uid=\"44\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>24.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>24.5</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-3\" adr=\"122\" uid=\"45\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>24.7</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>23.7</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-4\" adr=\"123\" uid=\"46\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>23.8</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>23.5</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Cold Storage_11-5\" adr=\"124\" uid=\"47\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>23.2</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>23.0</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Loading_3\" adr=\"125\" uid=\"48\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>16.3</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Loading_4\" adr=\"126\" uid=\"49\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>21.2</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Ante Room_3\" adr=\"127\" uid=\"50\" lanid=\"RS1\">\n<analogInput>\n<name>\"Room (Pb1)\"</name>\n<value>10.5</value>\n<unit>°C</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Evap. Temp. (P2)\"</name>\n<value>9.4</value>\n<unit>°C</unit>\n<index>4</index>\n</analogInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"HighValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"High Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Low Value Pb1\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"Error Pb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"LowValuePb2\"</name>\n<value>0</value>\n</alarm>\n<alarm>\n<name>\"No%20Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter Com.PR4\" adr=\"128\" uid=\"66\" lanid=\"RS1\">\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>130110.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>120954.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>0.997</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>0.999</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.08</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>0.999</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>9912.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>1323788.567</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>60</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>39321.6</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>43914.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>403.5</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>188.940</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>3318.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>190.020</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>189.420</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>229.9</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>10.980</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>232.4</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>231.1</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>3000.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>400.0</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>2892.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>42984.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>40578.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>40014.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>39984.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>402.3</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Energy meter MDB2\" adr=\"129\" uid=\"65\" lanid=\"RS1\">\n<analogInput>\n<name>\"V L3-L1\"</name>\n<value>401.5</value>\n<unit>V</unit>\n<index>10</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W1\"</name>\n<value>54920.0</value>\n<unit>Watt</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W2\"</name>\n<value>56272.0</value>\n<unit>Watt</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Active Power W3\"</name>\n<value>55952.0</value>\n<unit>Watt</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA1\"</name>\n<value>60456.0</value>\n<unit>VA</unit>\n<index>17</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr3\"</name>\n<value>19800.0</value>\n<unit>VAr</unit>\n<index>16</index>\n</analogInput>\n<analogInput>\n<name>\"V L1-L2\"</name>\n<value>399.0</value>\n<unit>V</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr1\"</name>\n<value>20080.0</value>\n<unit>VAr</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"Total Inductive Reactive Power\"</name>\n<value>58144.0</value>\n<unit>VAr</unit>\n<index>21</index>\n</analogInput>\n<analogInput>\n<name>\"Total kWh\"</name>\n<value>140834.886</value>\n<unit>KWh</unit>\n<index>28</index>\n</analogInput>\n<analogInput>\n<name>\"Size CT\"</name>\n<value>80</value>\n<unit>/5</unit>\n<index>29</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L3\"</name>\n<value>231.9</value>\n<unit>V</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Neutral Current\"</name>\n<value>17.280</value>\n<unit>A</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L1\"</name>\n<value>229.5</value>\n<unit>V</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"V L2-L3\"</name>\n<value>402.1</value>\n<unit>V</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Current L1\"</name>\n<value>264.320</value>\n<unit>A</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Reactive VAr2\"</name>\n<value>18528.0</value>\n<unit>VAr</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Current L3\"</name>\n<value>267.200</value>\n<unit>A</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Current L2\"</name>\n<value>269.280</value>\n<unit>A</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA3\"</name>\n<value>61792.0</value>\n<unit>VA</unit>\n<index>19</index>\n</analogInput>\n<analogInput>\n<name>\"Apparent VA2\"</name>\n<value>58982.4</value>\n<unit>VA</unit>\n<index>18</index>\n</analogInput>\n<analogInput>\n<name>\"Voltage L2\"</name>\n<value>230.3</value>\n<unit>V</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L1\"</name>\n<value>0.940</value>\n<unit/>\n<index>25</index>\n</analogInput>\n<analogInput>\n<name>\"Frequency\"</name>\n<value>50.09</value>\n<unit>Hz</unit>\n<index>24</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L3\"</name>\n<value>0.939</value>\n<unit/>\n<index>27</index>\n</analogInput>\n<analogInput>\n<name>\"Power Factor L2\"</name>\n<value>0.954</value>\n<unit/>\n<index>26</index>\n</analogInput>\n<analogInput>\n<name>\"Total Active Power\"</name>\n<value>167416.0</value>\n<unit>Watt</unit>\n<index>20</index>\n</analogInput>\n<analogInput>\n<name>\"Size VT\"</name>\n<value>10</value>\n<unit>/220</unit>\n<index>30</index>\n</analogInput>\n<analogInput>\n<name>\"Total Capaitive Reactive Power\"</name>\n<value>0.0</value>\n<unit>VAr</unit>\n<index>22</index>\n</analogInput>\n<analogInput>\n<name>\"Total Apparent Power\"</name>\n<value>183128.0</value>\n<unit>VA</unit>\n<index>23</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Evap Condenser (SEC1410C)\" adr=\"156\" uid=\"97\" lanid=\"RS1\">\n<digitalInput>\n<name>\"Fan 1 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 2 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 3 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Evap Condenser (SEC1410C) 2\" adr=\"157\" uid=\"98\" lanid=\"RS1\">\n<digitalInput>\n<name>\"Fan 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 4 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Water Pump Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Water Pump Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Comp Mycom 355 kW (Blast Freezer)\" adr=\"192.168.50.155:502:51\" uid=\"78\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Comp Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Comp Alarm\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Oil Pump Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Oil Pump Alarm\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Evap Condenser (ECS-2000)\" adr=\"192.168.50.155:502:52\" uid=\"79\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Fan 1\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Fan 2\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Fan 4 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Fan 3\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Water Pump Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Fan 4\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Overload Water Pump\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Vessel and Blast Freezer 4\" adr=\"192.168.50.155:502:53\" uid=\"80\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Diff Pressure\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"NH3 Pump1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"NH3 Pump1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"NH3 Pump2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"NH3 Pump2 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Hi-Cut\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 By Pass SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 4 and 5\" adr=\"192.168.50.155:502:54\" uid=\"81\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 4 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 4 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 5 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 4 and 5 (2)\" adr=\"192.168.50.155:502:55\" uid=\"82\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 5 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 6 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 4 Fan 6 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 ByPass SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 5 and 6\" adr=\"192.168.50.155:502:56\" uid=\"83\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 4 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 5 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 5 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 6 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 5 Fan 6 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 6\" adr=\"192.168.50.155:502:57\" uid=\"84\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 6 By Pass SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 1 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 2 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 3 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 4 Run\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Blast Freezer 6 (2)\" adr=\"192.168.50.155:502:58\" uid=\"85\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 5 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 5 Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 6 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Blast Freezer 6 Fan 6 Run\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>0</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Compressor 4 (Mycom) and Cold Storage 9\" adr=\"192.168.50.155:502:59\" uid=\"86\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Comp Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Oil Pump Run\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Comp Alarm\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-2 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Cold Storage 9-2 and Cold Storage 9-3\" adr=\"192.168.50.155:502:60\" uid=\"87\" lanid=\"TCP\"/>\n<device name=\"Status Cold Storage 11-1 and Cold Storage 11-2\" adr=\"192.168.50.155:502:61\" uid=\"88\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 11-1 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<outputStatus>\n<name>\"Alarm\"</name>\n<value>1</value>\n</outputStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Cold Storage 11-2 Cold Storage 11-3 and Cold Storage 11-4\" adr=\"192.168.50.155:502:62\" uid=\"89\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 11-2 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Cold Storage 11-5 and Cold Storage 8\" adr=\"192.168.50.155:502:63\" uid=\"90\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 11-4 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Sunction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-5 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Cold Storage 8 and Cold Storage 10\" adr=\"192.168.50.155:502:64\" uid=\"91\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 8 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Hotgas SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Fan 3 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Loading Area 3 4 and Ante Room 3\" adr=\"192.168.50.155:502:65\" uid=\"92\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Loading 3 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 3 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 3 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 4 Liquid SV\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 3 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 4 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 4 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Ante Room 3 Defrost\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Ante Room 3 Liquid SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Ante Room 3 Fan 1 Run\"</name>\n<value>1</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Ante Room 3 and Overload\" adr=\"192.168.50.155:502:66\" uid=\"93\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Ante Room 3 Fan 2 Run\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Oil Pump Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Ante Room 3 Suction SV\"</name>\n<value>1</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 9-1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Overload Cold Storage 11\" adr=\"192.168.50.155:502:67\" uid=\"94\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 9-3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-2 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-1 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 11-3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Overload Cold Storage and Loading\" adr=\"192.168.50.155:502:68\" uid=\"95\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Cold Storage 11-5 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 10 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Cold Storage 8 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 4 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<digitalInput>\n<name>\"Loading 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Status Overload Ante Room 3\" adr=\"192.168.50.155:502:69\" uid=\"96\" lanid=\"TCP\">\n<digitalInput>\n<name>\"Ante Room 3 Overload\"</name>\n<value>0</value>\n</digitalInput>\n<deviceStatus>\n<name>\"On\"</name>\n<value>1</value>\n</deviceStatus>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n<device name=\"Compressor No.1\" adr=\"192.168.50.83:502:101\" uid=\"55\" lanid=\"TCP\">\n<analogInput>\n<name>\"Discharge Temp\"</name>\n<value>77.7</value>\n<unit>°C</unit>\n<index>9</index>\n</analogInput>\n<analogInput>\n<name>\"Silding Valve\"</name>\n<value>100.0</value>\n<unit>%</unit>\n<index>1</index>\n</analogInput>\n<analogInput>\n<name>\"Suction Temp\"</name>\n<value>-24.5</value>\n<unit>°C</unit>\n<index>8</index>\n</analogInput>\n<analogInput>\n<name>\"Discharge Pressure\"</name>\n<value>13.61</value>\n<unit>bar</unit>\n<index>3</index>\n</analogInput>\n<analogInput>\n<name>\"Suction Pressure\"</name>\n<value>2.09</value>\n<unit>bar</unit>\n<index>2</index>\n</analogInput>\n<analogInput>\n<name>\"Precent of FLA\"</name>\n<value>82.8</value>\n<unit>%</unit>\n<index>5</index>\n</analogInput>\n<analogInput>\n<name>\"Oil Pressure\"</name>\n<value>12.53</value>\n<unit>bar</unit>\n<index>4</index>\n</analogInput>\n<analogInput>\n<name>\"Diff Pressure\"</name>\n<value>0.63</value>\n<unit>bar</unit>\n<index>7</index>\n</analogInput>\n<analogInput>\n<name>\"Filter Pressure\"</name>\n<value>12.96</value>\n<unit>bar</unit>\n<index>6</index>\n</analogInput>\n<analogInput>\n<name>\"Discharge Superheat\"</name>\n<value>45.0</value>\n<unit>°C</unit>\n<index>14</index>\n</analogInput>\n<analogInput>\n<name>\"Estimated KW\"</name>\n<value>283.5</value>\n<unit>kW</unit>\n<index>15</index>\n</analogInput>\n<analogInput>\n<name>\"Suction Superheat\"</name>\n<value>7.4</value>\n<unit>°C</unit>\n<index>13</index>\n</analogInput>\n<analogInput>\n<name>\"Motor Current\"</name>\n<value>447.5</value>\n<unit>A</unit>\n<index>12</index>\n</analogInput>\n<analogInput>\n<name>\"Oil Separator Temp\"</name>\n<value>72.9</value>\n<unit>°C</unit>\n<index>11</index>\n</analogInput>\n<analogInput>\n<name>\"Oil Comp.Temp\"</name>\n<value>51.3</value>\n<unit>°C</unit>\n<index>10</index>\n</analogInput>\n<alarm>\n<name>\"No-Link\"</name>\n<value>0</value>\n</alarm>\n<category/>\n</device>\n</xwebEVO>",
        "output": "str",
        "x": 320,
        "y": 80,
        "wires": [
            [
                "63c9bf74590aaeb2",
                "10de7c252f9cf07e"
            ]
        ]
    }
]